id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: sl
  commentId: N:sl
  language: CSharp
  name:
    CSharp: sl
    VB: sl
  nameWithType:
    CSharp: sl
    VB: sl
  qualifiedName:
    CSharp: sl
    VB: sl
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: sl.ZEDCamera
    commentId: T:sl.ZEDCamera
    language: CSharp
    name:
      CSharp: ZEDCamera
      VB: ZEDCamera
    nameWithType:
      CSharp: ZEDCamera
      VB: ZEDCamera
    qualifiedName:
      CSharp: sl.ZEDCamera
      VB: sl.ZEDCamera
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ZEDCamera
      path: ''
      startLine: 10
    syntax:
      content:
        CSharp: public class ZEDCamera
        VB: Public Class ZEDCamera
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: sl.ZEDCamera.ImageWidth
      commentId: P:sl.ZEDCamera.ImageWidth
      language: CSharp
      name:
        CSharp: ImageWidth
        VB: ImageWidth
      nameWithType:
        CSharp: ZEDCamera.ImageWidth
        VB: ZEDCamera.ImageWidth
      qualifiedName:
        CSharp: sl.ZEDCamera.ImageWidth
        VB: sl.ZEDCamera.ImageWidth
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ImageWidth
        path: ''
        startLine: 41
      summary: "\nWidth of the images returned by the ZED in pixels. Corresponds to the ZED&apos;s current resolution setting.\n"
      example: []
      syntax:
        content:
          CSharp: public int ImageWidth { get; }
          VB: Public ReadOnly Property ImageWidth As Integer
        parameters: []
        return:
          type: System.Int32
      overload: sl.ZEDCamera.ImageWidth*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.Deg2Rad
      commentId: F:sl.ZEDCamera.Deg2Rad
      language: CSharp
      name:
        CSharp: Deg2Rad
        VB: Deg2Rad
      nameWithType:
        CSharp: ZEDCamera.Deg2Rad
        VB: ZEDCamera.Deg2Rad
      qualifiedName:
        CSharp: sl.ZEDCamera.Deg2Rad
        VB: sl.ZEDCamera.Deg2Rad
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Deg2Rad
        path: ''
        startLine: 49
      syntax:
        content:
          CSharp: public const float Deg2Rad = 0.0174532924F
          VB: Public Const Deg2Rad As Single = 0.0174532924F
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.Rad2Deg
      commentId: F:sl.ZEDCamera.Rad2Deg
      language: CSharp
      name:
        CSharp: Rad2Deg
        VB: Rad2Deg
      nameWithType:
        CSharp: ZEDCamera.Rad2Deg
        VB: ZEDCamera.Rad2Deg
      qualifiedName:
        CSharp: sl.ZEDCamera.Rad2Deg
        VB: sl.ZEDCamera.Rad2Deg
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Rad2Deg
        path: ''
        startLine: 50
      syntax:
        content:
          CSharp: public const float Rad2Deg = 57.29578F
          VB: Public Const Rad2Deg As Single = 57.29578F
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.ImageHeight
      commentId: P:sl.ZEDCamera.ImageHeight
      language: CSharp
      name:
        CSharp: ImageHeight
        VB: ImageHeight
      nameWithType:
        CSharp: ZEDCamera.ImageHeight
        VB: ZEDCamera.ImageHeight
      qualifiedName:
        CSharp: sl.ZEDCamera.ImageHeight
        VB: sl.ZEDCamera.ImageHeight
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ImageHeight
        path: ''
        startLine: 59
      summary: "\nHeight of the images returned by the ZED in pixels. Corresponds to the ZED&apos;s current resolution setting.\n"
      example: []
      syntax:
        content:
          CSharp: public int ImageHeight { get; }
          VB: Public ReadOnly Property ImageHeight As Integer
        parameters: []
        return:
          type: System.Int32
      overload: sl.ZEDCamera.ImageHeight*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.grabLock
      commentId: F:sl.ZEDCamera.grabLock
      language: CSharp
      name:
        CSharp: grabLock
        VB: grabLock
      nameWithType:
        CSharp: ZEDCamera.grabLock
        VB: ZEDCamera.grabLock
      qualifiedName:
        CSharp: sl.ZEDCamera.grabLock
        VB: sl.ZEDCamera.grabLock
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: grabLock
        path: ''
        startLine: 75
      summary: "\nMutex for the image acquisition thread.\n"
      example: []
      syntax:
        content:
          CSharp: public object grabLock
          VB: Public grabLock As Object
        return:
          type: System.Object
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetRequestedCameraFPS
      commentId: M:sl.ZEDCamera.GetRequestedCameraFPS
      language: CSharp
      name:
        CSharp: GetRequestedCameraFPS()
        VB: GetRequestedCameraFPS()
      nameWithType:
        CSharp: ZEDCamera.GetRequestedCameraFPS()
        VB: ZEDCamera.GetRequestedCameraFPS()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetRequestedCameraFPS()
        VB: sl.ZEDCamera.GetRequestedCameraFPS()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetRequestedCameraFPS
        path: ''
        startLine: 98
      summary: "\nDesired FPS from the ZED camera. This is the maximum FPS for the ZED&apos;s current\nresolution unless a lower setting was specified in Init().\nMaximum values are bound by the ZED&apos;s output, not system performance.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetRequestedCameraFPS()
          VB: Public Function GetRequestedCameraFPS As Single
        return:
          type: System.Single
      overload: sl.ZEDCamera.GetRequestedCameraFPS*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.Baseline
      commentId: P:sl.ZEDCamera.Baseline
      language: CSharp
      name:
        CSharp: Baseline
        VB: Baseline
      nameWithType:
        CSharp: ZEDCamera.Baseline
        VB: ZEDCamera.Baseline
      qualifiedName:
        CSharp: sl.ZEDCamera.Baseline
        VB: sl.ZEDCamera.Baseline
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Baseline
        path: ''
        startLine: 114
      summary: "\nCamera&apos;s stereo baseline (distance between the cameras). Extracted from calibration files.\n"
      example: []
      syntax:
        content:
          CSharp: public float Baseline { get; }
          VB: Public ReadOnly Property Baseline As Single
        parameters: []
        return:
          type: System.Single
      overload: sl.ZEDCamera.Baseline*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.HorizontalFieldOfView
      commentId: P:sl.ZEDCamera.HorizontalFieldOfView
      language: CSharp
      name:
        CSharp: HorizontalFieldOfView
        VB: HorizontalFieldOfView
      nameWithType:
        CSharp: ZEDCamera.HorizontalFieldOfView
        VB: ZEDCamera.HorizontalFieldOfView
      qualifiedName:
        CSharp: sl.ZEDCamera.HorizontalFieldOfView
        VB: sl.ZEDCamera.HorizontalFieldOfView
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: HorizontalFieldOfView
        path: ''
        startLine: 129
      summary: "\nZED&apos;s current horizontal field of view in degrees.\n"
      example: []
      syntax:
        content:
          CSharp: public float HorizontalFieldOfView { get; }
          VB: Public ReadOnly Property HorizontalFieldOfView As Single
        parameters: []
        return:
          type: System.Single
      overload: sl.ZEDCamera.HorizontalFieldOfView*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.VerticalFieldOfView
      commentId: P:sl.ZEDCamera.VerticalFieldOfView
      language: CSharp
      name:
        CSharp: VerticalFieldOfView
        VB: VerticalFieldOfView
      nameWithType:
        CSharp: ZEDCamera.VerticalFieldOfView
        VB: ZEDCamera.VerticalFieldOfView
      qualifiedName:
        CSharp: sl.ZEDCamera.VerticalFieldOfView
        VB: sl.ZEDCamera.VerticalFieldOfView
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: VerticalFieldOfView
        path: ''
        startLine: 136
      summary: "\nZED&apos;s current vertical field of view in degrees.\n"
      example: []
      syntax:
        content:
          CSharp: public float VerticalFieldOfView { get; }
          VB: Public ReadOnly Property VerticalFieldOfView As Single
        parameters: []
        return:
          type: System.Single
      overload: sl.ZEDCamera.VerticalFieldOfView*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.CalibrationParametersRaw
      commentId: P:sl.ZEDCamera.CalibrationParametersRaw
      language: CSharp
      name:
        CSharp: CalibrationParametersRaw
        VB: CalibrationParametersRaw
      nameWithType:
        CSharp: ZEDCamera.CalibrationParametersRaw
        VB: ZEDCamera.CalibrationParametersRaw
      qualifiedName:
        CSharp: sl.ZEDCamera.CalibrationParametersRaw
        VB: sl.ZEDCamera.CalibrationParametersRaw
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CalibrationParametersRaw
        path: ''
        startLine: 161
      summary: "\nStereo parameters for current ZED camera prior to rectification (distorted).\n"
      example: []
      syntax:
        content:
          CSharp: public CalibrationParameters CalibrationParametersRaw { get; }
          VB: Public ReadOnly Property CalibrationParametersRaw As CalibrationParameters
        parameters: []
        return:
          type: sl.CalibrationParameters
      overload: sl.ZEDCamera.CalibrationParametersRaw*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.CalibrationParametersRectified
      commentId: P:sl.ZEDCamera.CalibrationParametersRectified
      language: CSharp
      name:
        CSharp: CalibrationParametersRectified
        VB: CalibrationParametersRectified
      nameWithType:
        CSharp: ZEDCamera.CalibrationParametersRectified
        VB: ZEDCamera.CalibrationParametersRectified
      qualifiedName:
        CSharp: sl.ZEDCamera.CalibrationParametersRectified
        VB: sl.ZEDCamera.CalibrationParametersRectified
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CalibrationParametersRectified
        path: ''
        startLine: 168
      summary: "\nStereo parameters for current ZED camera after rectification (undistorted).\n"
      example: []
      syntax:
        content:
          CSharp: public CalibrationParameters CalibrationParametersRectified { get; }
          VB: Public ReadOnly Property CalibrationParametersRectified As CalibrationParameters
        parameters: []
        return:
          type: sl.CalibrationParameters
      overload: sl.ZEDCamera.CalibrationParametersRectified*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.CameraModel
      commentId: P:sl.ZEDCamera.CameraModel
      language: CSharp
      name:
        CSharp: CameraModel
        VB: CameraModel
      nameWithType:
        CSharp: ZEDCamera.CameraModel
        VB: ZEDCamera.CameraModel
      qualifiedName:
        CSharp: sl.ZEDCamera.CameraModel
        VB: sl.ZEDCamera.CameraModel
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CameraModel
        path: ''
        startLine: 175
      summary: "\nCamera model - ZED or ZED Mini.\n"
      example: []
      syntax:
        content:
          CSharp: public MODEL CameraModel { get; }
          VB: Public ReadOnly Property CameraModel As MODEL
        parameters: []
        return:
          type: sl.MODEL
      overload: sl.ZEDCamera.CameraModel*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.IsCameraReady
      commentId: P:sl.ZEDCamera.IsCameraReady
      language: CSharp
      name:
        CSharp: IsCameraReady
        VB: IsCameraReady
      nameWithType:
        CSharp: ZEDCamera.IsCameraReady
        VB: ZEDCamera.IsCameraReady
      qualifiedName:
        CSharp: sl.ZEDCamera.IsCameraReady
        VB: sl.ZEDCamera.IsCameraReady
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: IsCameraReady
        path: ''
        startLine: 182
      summary: "\nWhether the camera has been successfully initialized.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsCameraReady { get; }
          VB: Public ReadOnly Property IsCameraReady As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: sl.ZEDCamera.IsCameraReady*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDCamera.CameraID
      commentId: F:sl.ZEDCamera.CameraID
      language: CSharp
      name:
        CSharp: CameraID
        VB: CameraID
      nameWithType:
        CSharp: ZEDCamera.CameraID
        VB: ZEDCamera.CameraID
      qualifiedName:
        CSharp: sl.ZEDCamera.CameraID
        VB: sl.ZEDCamera.CameraID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CameraID
        path: ''
        startLine: 190
      summary: "\nCamera ID (for multiple cameras)\n"
      example: []
      syntax:
        content:
          CSharp: public int CameraID
          VB: Public CameraID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.brightnessDefault
      commentId: F:sl.ZEDCamera.brightnessDefault
      language: CSharp
      name:
        CSharp: brightnessDefault
        VB: brightnessDefault
      nameWithType:
        CSharp: ZEDCamera.brightnessDefault
        VB: ZEDCamera.brightnessDefault
      qualifiedName:
        CSharp: sl.ZEDCamera.brightnessDefault
        VB: sl.ZEDCamera.brightnessDefault
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: brightnessDefault
        path: ''
        startLine: 192
      syntax:
        content:
          CSharp: public const int brightnessDefault = 4
          VB: Public Const brightnessDefault As Integer = 4
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.contrastDefault
      commentId: F:sl.ZEDCamera.contrastDefault
      language: CSharp
      name:
        CSharp: contrastDefault
        VB: contrastDefault
      nameWithType:
        CSharp: ZEDCamera.contrastDefault
        VB: ZEDCamera.contrastDefault
      qualifiedName:
        CSharp: sl.ZEDCamera.contrastDefault
        VB: sl.ZEDCamera.contrastDefault
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: contrastDefault
        path: ''
        startLine: 193
      syntax:
        content:
          CSharp: public const int contrastDefault = 4
          VB: Public Const contrastDefault As Integer = 4
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.hueDefault
      commentId: F:sl.ZEDCamera.hueDefault
      language: CSharp
      name:
        CSharp: hueDefault
        VB: hueDefault
      nameWithType:
        CSharp: ZEDCamera.hueDefault
        VB: ZEDCamera.hueDefault
      qualifiedName:
        CSharp: sl.ZEDCamera.hueDefault
        VB: sl.ZEDCamera.hueDefault
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: hueDefault
        path: ''
        startLine: 194
      syntax:
        content:
          CSharp: public const int hueDefault = 0
          VB: Public Const hueDefault As Integer = 0
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.saturationDefault
      commentId: F:sl.ZEDCamera.saturationDefault
      language: CSharp
      name:
        CSharp: saturationDefault
        VB: saturationDefault
      nameWithType:
        CSharp: ZEDCamera.saturationDefault
        VB: ZEDCamera.saturationDefault
      qualifiedName:
        CSharp: sl.ZEDCamera.saturationDefault
        VB: sl.ZEDCamera.saturationDefault
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: saturationDefault
        path: ''
        startLine: 195
      syntax:
        content:
          CSharp: public const int saturationDefault = 4
          VB: Public Const saturationDefault As Integer = 4
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.sharpnessDefault
      commentId: F:sl.ZEDCamera.sharpnessDefault
      language: CSharp
      name:
        CSharp: sharpnessDefault
        VB: sharpnessDefault
      nameWithType:
        CSharp: ZEDCamera.sharpnessDefault
        VB: ZEDCamera.sharpnessDefault
      qualifiedName:
        CSharp: sl.ZEDCamera.sharpnessDefault
        VB: sl.ZEDCamera.sharpnessDefault
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sharpnessDefault
        path: ''
        startLine: 196
      syntax:
        content:
          CSharp: public const int sharpnessDefault = 3
          VB: Public Const sharpnessDefault As Integer = 3
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.gammaDefault
      commentId: F:sl.ZEDCamera.gammaDefault
      language: CSharp
      name:
        CSharp: gammaDefault
        VB: gammaDefault
      nameWithType:
        CSharp: ZEDCamera.gammaDefault
        VB: ZEDCamera.gammaDefault
      qualifiedName:
        CSharp: sl.ZEDCamera.gammaDefault
        VB: sl.ZEDCamera.gammaDefault
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: gammaDefault
        path: ''
        startLine: 197
      syntax:
        content:
          CSharp: public const int gammaDefault = 5
          VB: Public Const gammaDefault As Integer = 5
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.whitebalanceDefault
      commentId: F:sl.ZEDCamera.whitebalanceDefault
      language: CSharp
      name:
        CSharp: whitebalanceDefault
        VB: whitebalanceDefault
      nameWithType:
        CSharp: ZEDCamera.whitebalanceDefault
        VB: ZEDCamera.whitebalanceDefault
      qualifiedName:
        CSharp: sl.ZEDCamera.whitebalanceDefault
        VB: sl.ZEDCamera.whitebalanceDefault
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: whitebalanceDefault
        path: ''
        startLine: 198
      syntax:
        content:
          CSharp: public const int whitebalanceDefault = 2600
          VB: Public Const whitebalanceDefault As Integer = 2600
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.UnloadPlugin
      commentId: M:sl.ZEDCamera.UnloadPlugin
      language: CSharp
      name:
        CSharp: UnloadPlugin()
        VB: UnloadPlugin()
      nameWithType:
        CSharp: ZEDCamera.UnloadPlugin()
        VB: ZEDCamera.UnloadPlugin()
      qualifiedName:
        CSharp: sl.ZEDCamera.UnloadPlugin()
        VB: sl.ZEDCamera.UnloadPlugin()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: UnloadPlugin
        path: ''
        startLine: 574
      syntax:
        content:
          CSharp: public static void UnloadPlugin()
          VB: Public Shared Sub UnloadPlugin
      overload: sl.ZEDCamera.UnloadPlugin*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: sl.ZEDCamera.UnloadInstance(System.Int32)
      commentId: M:sl.ZEDCamera.UnloadInstance(System.Int32)
      language: CSharp
      name:
        CSharp: UnloadInstance(Int32)
        VB: UnloadInstance(Int32)
      nameWithType:
        CSharp: ZEDCamera.UnloadInstance(Int32)
        VB: ZEDCamera.UnloadInstance(Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.UnloadInstance(System.Int32)
        VB: sl.ZEDCamera.UnloadInstance(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: UnloadInstance
        path: ''
        startLine: 579
      syntax:
        content:
          CSharp: public static void UnloadInstance(int id)
          VB: Public Shared Sub UnloadInstance(id As Integer)
        parameters:
        - id: id
          type: System.Int32
      overload: sl.ZEDCamera.UnloadInstance*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: sl.ZEDCamera.TransformPose(Quaternion@,Vector3@,Quaternion@,Vector3@)
      commentId: M:sl.ZEDCamera.TransformPose(Quaternion@,Vector3@,Quaternion@,Vector3@)
      language: CSharp
      name:
        CSharp: TransformPose(ref Quaternion, ref Vector3, ref Quaternion, ref Vector3)
        VB: TransformPose(ByRef Quaternion, ByRef Vector3, ByRef Quaternion, ByRef Vector3)
      nameWithType:
        CSharp: ZEDCamera.TransformPose(ref Quaternion, ref Vector3, ref Quaternion, ref Vector3)
        VB: ZEDCamera.TransformPose(ByRef Quaternion, ByRef Vector3, ByRef Quaternion, ByRef Vector3)
      qualifiedName:
        CSharp: sl.ZEDCamera.TransformPose(ref Quaternion, ref Vector3, ref Quaternion, ref Vector3)
        VB: sl.ZEDCamera.TransformPose(ByRef Quaternion, ByRef Vector3, ByRef Quaternion, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: TransformPose
        path: ''
        startLine: 640
      summary: "\nPerforms a rigid transform.\n"
      example: []
      syntax:
        content:
          CSharp: public static void TransformPose(ref Quaternion quaternion, ref Vector3 translation, ref Quaternion targetQuaternion, ref Vector3 targetTranslation)
          VB: Public Shared Sub TransformPose(ByRef quaternion As Quaternion, ByRef translation As Vector3, ByRef targetQuaternion As Quaternion, ByRef targetTranslation As Vector3)
        parameters:
        - id: quaternion
          type: Quaternion
          description: ''
        - id: translation
          type: Vector3
          description: ''
        - id: targetQuaternion
          type: Quaternion
          description: ''
        - id: targetTranslation
          type: Vector3
          description: ''
      overload: sl.ZEDCamera.TransformPose*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: sl.ZEDCamera.Close
      commentId: M:sl.ZEDCamera.Close
      language: CSharp
      name:
        CSharp: Close()
        VB: Close()
      nameWithType:
        CSharp: ZEDCamera.Close()
        VB: ZEDCamera.Close()
      qualifiedName:
        CSharp: sl.ZEDCamera.Close()
        VB: sl.ZEDCamera.Close()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Close
        path: ''
        startLine: 649
      summary: "\nCloses the camera.\nOnce destroyed, you need to recreate a camera instance to restart again.\n"
      example: []
      syntax:
        content:
          CSharp: public void Close()
          VB: Public Sub Close
      overload: sl.ZEDCamera.Close*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.#ctor
      commentId: M:sl.ZEDCamera.#ctor
      language: CSharp
      name:
        CSharp: ZEDCamera()
        VB: ZEDCamera()
      nameWithType:
        CSharp: ZEDCamera.ZEDCamera()
        VB: ZEDCamera.ZEDCamera()
      qualifiedName:
        CSharp: sl.ZEDCamera.ZEDCamera()
        VB: sl.ZEDCamera.ZEDCamera()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 809
      syntax:
        content:
          CSharp: public ZEDCamera()
          VB: Public Sub New
      overload: sl.ZEDCamera.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.Init(sl.InitParameters@)
      commentId: M:sl.ZEDCamera.Init(sl.InitParameters@)
      language: CSharp
      name:
        CSharp: Init(ref InitParameters)
        VB: Init(ByRef InitParameters)
      nameWithType:
        CSharp: ZEDCamera.Init(ref InitParameters)
        VB: ZEDCamera.Init(ByRef InitParameters)
      qualifiedName:
        CSharp: sl.ZEDCamera.Init(ref sl.InitParameters)
        VB: sl.ZEDCamera.Init(ByRef sl.InitParameters)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Init
        path: ''
        startLine: 819
      summary: "\nChecks if the ZED camera is plugged in and  opens it.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE Init(ref InitParameters initParameters)
          VB: Public Function Init(ByRef initParameters As InitParameters) As ERROR_CODE
        parameters:
        - id: initParameters
          type: sl.InitParameters
          description: >-
            Class with all initialization settings.

            A newly-instantiated InitParameters will have recommended default values.
        return:
          type: sl.ERROR_CODE
          description: >-
            ERROR_CODE: The error code gives information about the internal connection process.

            If SUCCESS is returned, the camera is ready to use. Every other code indicates an error.
      overload: sl.ZEDCamera.Init*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.Grab(sl.RuntimeParameters@)
      commentId: M:sl.ZEDCamera.Grab(sl.RuntimeParameters@)
      language: CSharp
      name:
        CSharp: Grab(ref RuntimeParameters)
        VB: Grab(ByRef RuntimeParameters)
      nameWithType:
        CSharp: ZEDCamera.Grab(ref RuntimeParameters)
        VB: ZEDCamera.Grab(ByRef RuntimeParameters)
      qualifiedName:
        CSharp: sl.ZEDCamera.Grab(ref sl.RuntimeParameters)
        VB: sl.ZEDCamera.Grab(ByRef sl.RuntimeParameters)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Grab
        path: ''
        startLine: 867
      summary: "\nGrabs a new image, rectifies it, and computes the disparity map and (optionally) the depth map.\nThe grabbing function is typically called in the main loop in a separate thread.\n"
      remarks: "For more info, read about the SDK function it calls:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/classsl_1_1Camera.html#afa3678a18dd574e162977e97d7cbf67b "
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE Grab(ref RuntimeParameters runtimeParameters)
          VB: Public Function Grab(ByRef runtimeParameters As RuntimeParameters) As ERROR_CODE
        parameters:
        - id: runtimeParameters
          type: sl.RuntimeParameters
          description: 'Struct holding all grab parameters. '
        return:
          type: sl.ERROR_CODE
          description: >-
            the function returns false if no problem was encountered,

            true otherwise.
      overload: sl.ZEDCamera.Grab*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetInputType
      commentId: M:sl.ZEDCamera.GetInputType
      language: CSharp
      name:
        CSharp: GetInputType()
        VB: GetInputType()
      nameWithType:
        CSharp: ZEDCamera.GetInputType()
        VB: ZEDCamera.GetInputType()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetInputType()
        VB: sl.ZEDCamera.GetInputType()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetInputType
        path: ''
        startLine: 877
      summary: "\nReturn the INPUT_TYPE currently used\n"
      example: []
      syntax:
        content:
          CSharp: public INPUT_TYPE GetInputType()
          VB: Public Function GetInputType As INPUT_TYPE
        return:
          type: sl.INPUT_TYPE
          description: ''
      overload: sl.ZEDCamera.GetInputType*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.EnableRecording(System.String,sl.SVO_COMPRESSION_MODE)
      commentId: M:sl.ZEDCamera.EnableRecording(System.String,sl.SVO_COMPRESSION_MODE)
      language: CSharp
      name:
        CSharp: EnableRecording(String, SVO_COMPRESSION_MODE)
        VB: EnableRecording(String, SVO_COMPRESSION_MODE)
      nameWithType:
        CSharp: ZEDCamera.EnableRecording(String, SVO_COMPRESSION_MODE)
        VB: ZEDCamera.EnableRecording(String, SVO_COMPRESSION_MODE)
      qualifiedName:
        CSharp: sl.ZEDCamera.EnableRecording(System.String, sl.SVO_COMPRESSION_MODE)
        VB: sl.ZEDCamera.EnableRecording(System.String, sl.SVO_COMPRESSION_MODE)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: EnableRecording
        path: ''
        startLine: 889
      summary: "\nCreates a file for recording the ZED&apos;s output into a .SVO or .AVI video.\n"
      remarks: >-
        An SVO is Stereolabs&apos; own format designed for the ZED. It holds the video feed with timestamps

        as well as info about the camera used to record it.
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE EnableRecording(string videoFileName, SVO_COMPRESSION_MODE compressionMode = SVO_COMPRESSION_MODE.H264_BASED)
          VB: Public Function EnableRecording(videoFileName As String, compressionMode As SVO_COMPRESSION_MODE = SVO_COMPRESSION_MODE.H264_BASED) As ERROR_CODE
        parameters:
        - id: videoFileName
          type: System.String
          description: Filename. Whether it ends with .svo or .avi defines its file type.
        - id: compressionMode
          type: sl.SVO_COMPRESSION_MODE
          description: How much compression to use
        return:
          type: sl.ERROR_CODE
          description: An ERROR_CODE that defines if the file was successfully created and can be filled with images.
      overload: sl.ZEDCamera.EnableRecording*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.DisableRecording
      commentId: M:sl.ZEDCamera.DisableRecording
      language: CSharp
      name:
        CSharp: DisableRecording()
        VB: DisableRecording()
      nameWithType:
        CSharp: ZEDCamera.DisableRecording()
        VB: ZEDCamera.DisableRecording()
      qualifiedName:
        CSharp: sl.ZEDCamera.DisableRecording()
        VB: sl.ZEDCamera.DisableRecording()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DisableRecording
        path: ''
        startLine: 899
      summary: "\nStops recording to an SVO/AVI, if applicable, and closes the file.\n"
      example: []
      syntax:
        content:
          CSharp: public bool DisableRecording()
          VB: Public Function DisableRecording As Boolean
        return:
          type: System.Boolean
      overload: sl.ZEDCamera.DisableRecording*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SetCameraFPS(System.Int32)
      commentId: M:sl.ZEDCamera.SetCameraFPS(System.Int32)
      language: CSharp
      name:
        CSharp: SetCameraFPS(Int32)
        VB: SetCameraFPS(Int32)
      nameWithType:
        CSharp: ZEDCamera.SetCameraFPS(Int32)
        VB: ZEDCamera.SetCameraFPS(Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.SetCameraFPS(System.Int32)
        VB: sl.ZEDCamera.SetCameraFPS(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetCameraFPS
        path: ''
        startLine: 909
      summary: "\nSets a new target frame rate for the camera. If it&apos;s not possible with the current resolution,\nthe SDK will target the closest possible frame rate instead.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetCameraFPS(int fps)
          VB: Public Sub SetCameraFPS(fps As Integer)
        parameters:
        - id: fps
          type: System.Int32
          description: New target FPS.
      overload: sl.ZEDCamera.SetCameraFPS*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SetSVOPosition(System.Int32)
      commentId: M:sl.ZEDCamera.SetSVOPosition(System.Int32)
      language: CSharp
      name:
        CSharp: SetSVOPosition(Int32)
        VB: SetSVOPosition(Int32)
      nameWithType:
        CSharp: ZEDCamera.SetSVOPosition(Int32)
        VB: ZEDCamera.SetSVOPosition(Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.SetSVOPosition(System.Int32)
        VB: sl.ZEDCamera.SetSVOPosition(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetSVOPosition
        path: ''
        startLine: 923
      summary: "\nSets the position of the SVO file currently being read to a desired frame.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetSVOPosition(int frame)
          VB: Public Sub SetSVOPosition(frame As Integer)
        parameters:
        - id: frame
          type: System.Int32
          description: Index of the desired frame to be decoded.
      overload: sl.ZEDCamera.SetSVOPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetConfidenceThreshold
      commentId: M:sl.ZEDCamera.GetConfidenceThreshold
      language: CSharp
      name:
        CSharp: GetConfidenceThreshold()
        VB: GetConfidenceThreshold()
      nameWithType:
        CSharp: ZEDCamera.GetConfidenceThreshold()
        VB: ZEDCamera.GetConfidenceThreshold()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetConfidenceThreshold()
        VB: sl.ZEDCamera.GetConfidenceThreshold()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetConfidenceThreshold
        path: ''
        startLine: 933
      summary: "\nGets the current confidence threshold value for the disparity map (and by extension the depth map).\nValues below the given threshold are removed from the depth map.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetConfidenceThreshold()
          VB: Public Function GetConfidenceThreshold As Integer
        return:
          type: System.Int32
          description: Filtering value between 0 and 100.
      overload: sl.ZEDCamera.GetConfidenceThreshold*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCameraTimeStamp
      commentId: M:sl.ZEDCamera.GetCameraTimeStamp
      language: CSharp
      name:
        CSharp: GetCameraTimeStamp()
        VB: GetCameraTimeStamp()
      nameWithType:
        CSharp: ZEDCamera.GetCameraTimeStamp()
        VB: ZEDCamera.GetCameraTimeStamp()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCameraTimeStamp()
        VB: sl.ZEDCamera.GetCameraTimeStamp()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCameraTimeStamp
        path: ''
        startLine: 943
      summary: "\nGets the timestamp at the time the latest grabbed frame was extracted from the USB stream.\nThis is the closest timestamp you can get from when the image was taken. Must be called after calling grab().\n"
      example: []
      syntax:
        content:
          CSharp: public ulong GetCameraTimeStamp()
          VB: Public Function GetCameraTimeStamp As ULong
        return:
          type: System.UInt64
          description: Current timestamp in nanoseconds. -1 means it&apos;s is not available, such as with an .SVO file without compression.
      overload: sl.ZEDCamera.GetCameraTimeStamp*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCurrentTimeStamp
      commentId: M:sl.ZEDCamera.GetCurrentTimeStamp
      language: CSharp
      name:
        CSharp: GetCurrentTimeStamp()
        VB: GetCurrentTimeStamp()
      nameWithType:
        CSharp: ZEDCamera.GetCurrentTimeStamp()
        VB: ZEDCamera.GetCurrentTimeStamp()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCurrentTimeStamp()
        VB: sl.ZEDCamera.GetCurrentTimeStamp()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCurrentTimeStamp
        path: ''
        startLine: 953
      summary: "\nGets the current timestamp at the time the function is called. Can be compared to the camera timestamp\nfor synchronization, since they have the same reference (the computer&apos;s start time).\n"
      example: []
      syntax:
        content:
          CSharp: public ulong GetCurrentTimeStamp()
          VB: Public Function GetCurrentTimeStamp As ULong
        return:
          type: System.UInt64
          description: The timestamp in nanoseconds.
      overload: sl.ZEDCamera.GetCurrentTimeStamp*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetImageUpdaterTimeStamp
      commentId: M:sl.ZEDCamera.GetImageUpdaterTimeStamp
      language: CSharp
      name:
        CSharp: GetImageUpdaterTimeStamp()
        VB: GetImageUpdaterTimeStamp()
      nameWithType:
        CSharp: ZEDCamera.GetImageUpdaterTimeStamp()
        VB: ZEDCamera.GetImageUpdaterTimeStamp()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetImageUpdaterTimeStamp()
        VB: sl.ZEDCamera.GetImageUpdaterTimeStamp()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetImageUpdaterTimeStamp
        path: ''
        startLine: 962
      summary: "\nTimestamp from the most recent image update. Based on the computer&apos;s start time.\n"
      example: []
      syntax:
        content:
          CSharp: public ulong GetImageUpdaterTimeStamp()
          VB: Public Function GetImageUpdaterTimeStamp As ULong
        return:
          type: System.UInt64
          description: The timestamp in nanoseconds.
      overload: sl.ZEDCamera.GetImageUpdaterTimeStamp*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetSVOPosition
      commentId: M:sl.ZEDCamera.GetSVOPosition
      language: CSharp
      name:
        CSharp: GetSVOPosition()
        VB: GetSVOPosition()
      nameWithType:
        CSharp: ZEDCamera.GetSVOPosition()
        VB: ZEDCamera.GetSVOPosition()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetSVOPosition()
        VB: sl.ZEDCamera.GetSVOPosition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetSVOPosition
        path: ''
        startLine: 971
      summary: "\nGet the current position of the SVO being recorded to.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetSVOPosition()
          VB: Public Function GetSVOPosition As Integer
        return:
          type: System.Int32
          description: Index of the frame being recorded to.
      overload: sl.ZEDCamera.GetSVOPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetSVONumberOfFrames
      commentId: M:sl.ZEDCamera.GetSVONumberOfFrames
      language: CSharp
      name:
        CSharp: GetSVONumberOfFrames()
        VB: GetSVONumberOfFrames()
      nameWithType:
        CSharp: ZEDCamera.GetSVONumberOfFrames()
        VB: ZEDCamera.GetSVONumberOfFrames()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetSVONumberOfFrames()
        VB: sl.ZEDCamera.GetSVONumberOfFrames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetSVONumberOfFrames
        path: ''
        startLine: 980
      summary: "\nGets the total number of frames in the loaded SVO file.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetSVONumberOfFrames()
          VB: Public Function GetSVONumberOfFrames As Integer
        return:
          type: System.Int32
          description: Total frames in the SVO file. Returns -1 if the SDK is not reading an SVO.
      overload: sl.ZEDCamera.GetSVONumberOfFrames*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetDepthMinRangeValue
      commentId: M:sl.ZEDCamera.GetDepthMinRangeValue
      language: CSharp
      name:
        CSharp: GetDepthMinRangeValue()
        VB: GetDepthMinRangeValue()
      nameWithType:
        CSharp: ZEDCamera.GetDepthMinRangeValue()
        VB: ZEDCamera.GetDepthMinRangeValue()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetDepthMinRangeValue()
        VB: sl.ZEDCamera.GetDepthMinRangeValue()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetDepthMinRangeValue
        path: ''
        startLine: 989
      summary: "\nGets the closest measurable distance by the camera, according to the camera type and depth map parameters.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetDepthMinRangeValue()
          VB: Public Function GetDepthMinRangeValue As Single
        return:
          type: System.Single
          description: The nearest possible depth value.
      overload: sl.ZEDCamera.GetDepthMinRangeValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetDepthMaxRangeValue
      commentId: M:sl.ZEDCamera.GetDepthMaxRangeValue
      language: CSharp
      name:
        CSharp: GetDepthMaxRangeValue()
        VB: GetDepthMaxRangeValue()
      nameWithType:
        CSharp: ZEDCamera.GetDepthMaxRangeValue()
        VB: ZEDCamera.GetDepthMaxRangeValue()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetDepthMaxRangeValue()
        VB: sl.ZEDCamera.GetDepthMaxRangeValue()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetDepthMaxRangeValue
        path: ''
        startLine: 998
      summary: "\nReturns the current maximum distance of depth/disparity estimation.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetDepthMaxRangeValue()
          VB: Public Function GetDepthMaxRangeValue As Single
        return:
          type: System.Single
          description: The closest depth
      overload: sl.ZEDCamera.GetDepthMaxRangeValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.EnableTracking(Quaternion@,Vector3@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)
      commentId: M:sl.ZEDCamera.EnableTracking(Quaternion@,Vector3@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)
      language: CSharp
      name:
        CSharp: EnableTracking(ref Quaternion, ref Vector3, Boolean, Boolean, Boolean, Boolean, Boolean, String)
        VB: EnableTracking(ByRef Quaternion, ByRef Vector3, Boolean, Boolean, Boolean, Boolean, Boolean, String)
      nameWithType:
        CSharp: ZEDCamera.EnableTracking(ref Quaternion, ref Vector3, Boolean, Boolean, Boolean, Boolean, Boolean, String)
        VB: ZEDCamera.EnableTracking(ByRef Quaternion, ByRef Vector3, Boolean, Boolean, Boolean, Boolean, Boolean, String)
      qualifiedName:
        CSharp: sl.ZEDCamera.EnableTracking(ref Quaternion, ref Vector3, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.String)
        VB: sl.ZEDCamera.EnableTracking(ByRef Quaternion, ByRef Vector3, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: EnableTracking
        path: ''
        startLine: 1011
      summary: "\nInitialize and Start the tracking functions\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE EnableTracking(ref Quaternion quat, ref Vector3 vec, bool enableSpatialMemory = true, bool enablePoseSmoothing = false, bool enableFloorAlignment = false, bool trackingIsStatic = false, bool enableIMUFusion = true, string areaFilePath = "")
          VB: Public Function EnableTracking(ByRef quat As Quaternion, ByRef vec As Vector3, enableSpatialMemory As Boolean = True, enablePoseSmoothing As Boolean = False, enableFloorAlignment As Boolean = False, trackingIsStatic As Boolean = False, enableIMUFusion As Boolean = True, areaFilePath As String = "") As ERROR_CODE
        parameters:
        - id: quat
          type: Quaternion
          description: rotation used as initial world transform. By default it should be identity.
        - id: vec
          type: Vector3
          description: translation used as initial world transform. By default it should be identity.
        - id: enableSpatialMemory
          type: System.Boolean
          description: (optional) define if spatial memory is enable or not.
        - id: enablePoseSmoothing
          type: System.Boolean
        - id: enableFloorAlignment
          type: System.Boolean
        - id: trackingIsStatic
          type: System.Boolean
        - id: enableIMUFusion
          type: System.Boolean
        - id: areaFilePath
          type: System.String
          description: (optional) file of spatial memory file that has to be loaded to relocate in the scene.
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDCamera.EnableTracking*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.DisableTracking(System.String)
      commentId: M:sl.ZEDCamera.DisableTracking(System.String)
      language: CSharp
      name:
        CSharp: DisableTracking(String)
        VB: DisableTracking(String)
      nameWithType:
        CSharp: ZEDCamera.DisableTracking(String)
        VB: ZEDCamera.DisableTracking(String)
      qualifiedName:
        CSharp: sl.ZEDCamera.DisableTracking(System.String)
        VB: sl.ZEDCamera.DisableTracking(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DisableTracking
        path: ''
        startLine: 1024
      summary: "\nStop the motion tracking, if you want to restart, call enableTracking().\n"
      example: []
      syntax:
        content:
          CSharp: public void DisableTracking(string path = "")
          VB: Public Sub DisableTracking(path As String = "")
        parameters:
        - id: path
          type: System.String
          description: The path to save the area file
      overload: sl.ZEDCamera.DisableTracking*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.ResetTracking(Quaternion,Vector3)
      commentId: M:sl.ZEDCamera.ResetTracking(Quaternion,Vector3)
      language: CSharp
      name:
        CSharp: ResetTracking(Quaternion, Vector3)
        VB: ResetTracking(Quaternion, Vector3)
      nameWithType:
        CSharp: ZEDCamera.ResetTracking(Quaternion, Vector3)
        VB: ZEDCamera.ResetTracking(Quaternion, Vector3)
      qualifiedName:
        CSharp: sl.ZEDCamera.ResetTracking(Quaternion, Vector3)
        VB: sl.ZEDCamera.ResetTracking(Quaternion, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ResetTracking
        path: ''
        startLine: 1035
      summary: "\nReset tracking\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE ResetTracking(Quaternion rotation, Vector3 translation)
          VB: Public Function ResetTracking(rotation As Quaternion, translation As Vector3) As ERROR_CODE
        parameters:
        - id: rotation
          type: Quaternion
          description: ''
        - id: translation
          type: Vector3
          description: ''
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDCamera.ResetTracking*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCameraFPS
      commentId: M:sl.ZEDCamera.GetCameraFPS
      language: CSharp
      name:
        CSharp: GetCameraFPS()
        VB: GetCameraFPS()
      nameWithType:
        CSharp: ZEDCamera.GetCameraFPS()
        VB: ZEDCamera.GetCameraFPS()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCameraFPS()
        VB: sl.ZEDCamera.GetCameraFPS()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCameraFPS
        path: ''
        startLine: 1048
      summary: "\nReturns the current camera FPS. This is limited primarily by resolution but can also be lower due to\nsetting a lower desired resolution in Init() or from USB connection/bandwidth issues.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetCameraFPS()
          VB: Public Function GetCameraFPS As Single
        return:
          type: System.Single
          description: The current fps
      overload: sl.ZEDCamera.GetCameraFPS*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCalibrationParameters(System.Boolean)
      commentId: M:sl.ZEDCamera.GetCalibrationParameters(System.Boolean)
      language: CSharp
      name:
        CSharp: GetCalibrationParameters(Boolean)
        VB: GetCalibrationParameters(Boolean)
      nameWithType:
        CSharp: ZEDCamera.GetCalibrationParameters(Boolean)
        VB: ZEDCamera.GetCalibrationParameters(Boolean)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCalibrationParameters(System.Boolean)
        VB: sl.ZEDCamera.GetCalibrationParameters(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCalibrationParameters
        path: ''
        startLine: 1053
      syntax:
        content:
          CSharp: public CalibrationParameters GetCalibrationParameters(bool raw = false)
          VB: Public Function GetCalibrationParameters(raw As Boolean = False) As CalibrationParameters
        parameters:
        - id: raw
          type: System.Boolean
        return:
          type: sl.CalibrationParameters
      overload: sl.ZEDCamera.GetCalibrationParameters*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCameraModel
      commentId: M:sl.ZEDCamera.GetCameraModel
      language: CSharp
      name:
        CSharp: GetCameraModel()
        VB: GetCameraModel()
      nameWithType:
        CSharp: ZEDCamera.GetCameraModel()
        VB: ZEDCamera.GetCameraModel()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCameraModel()
        VB: sl.ZEDCamera.GetCameraModel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCameraModel
        path: ''
        startLine: 1078
      summary: "\nGets the ZED camera model (ZED or ZED Mini).\n"
      example: []
      syntax:
        content:
          CSharp: public MODEL GetCameraModel()
          VB: Public Function GetCameraModel As MODEL
        return:
          type: sl.MODEL
          description: Model of the ZED as sl.MODEL.
      overload: sl.ZEDCamera.GetCameraModel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCameraFirmwareVersion
      commentId: M:sl.ZEDCamera.GetCameraFirmwareVersion
      language: CSharp
      name:
        CSharp: GetCameraFirmwareVersion()
        VB: GetCameraFirmwareVersion()
      nameWithType:
        CSharp: ZEDCamera.GetCameraFirmwareVersion()
        VB: ZEDCamera.GetCameraFirmwareVersion()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCameraFirmwareVersion()
        VB: sl.ZEDCamera.GetCameraFirmwareVersion()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCameraFirmwareVersion
        path: ''
        startLine: 1087
      summary: "\nGets the ZED&apos;s camera firmware version.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetCameraFirmwareVersion()
          VB: Public Function GetCameraFirmwareVersion As Integer
        return:
          type: System.Int32
          description: Firmware version.
      overload: sl.ZEDCamera.GetCameraFirmwareVersion*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetSensorsFirmwareVersion
      commentId: M:sl.ZEDCamera.GetSensorsFirmwareVersion
      language: CSharp
      name:
        CSharp: GetSensorsFirmwareVersion()
        VB: GetSensorsFirmwareVersion()
      nameWithType:
        CSharp: ZEDCamera.GetSensorsFirmwareVersion()
        VB: ZEDCamera.GetSensorsFirmwareVersion()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetSensorsFirmwareVersion()
        VB: sl.ZEDCamera.GetSensorsFirmwareVersion()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetSensorsFirmwareVersion
        path: ''
        startLine: 1096
      summary: "\nGets the ZED&apos;s sensors firmware version.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetSensorsFirmwareVersion()
          VB: Public Function GetSensorsFirmwareVersion As Integer
        return:
          type: System.Int32
          description: Firmware version.
      overload: sl.ZEDCamera.GetSensorsFirmwareVersion*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetZEDSerialNumber
      commentId: M:sl.ZEDCamera.GetZEDSerialNumber
      language: CSharp
      name:
        CSharp: GetZEDSerialNumber()
        VB: GetZEDSerialNumber()
      nameWithType:
        CSharp: ZEDCamera.GetZEDSerialNumber()
        VB: ZEDCamera.GetZEDSerialNumber()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetZEDSerialNumber()
        VB: sl.ZEDCamera.GetZEDSerialNumber()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetZEDSerialNumber
        path: ''
        startLine: 1105
      summary: "\nGets the ZED&apos;s serial number.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetZEDSerialNumber()
          VB: Public Function GetZEDSerialNumber As Integer
        return:
          type: System.Int32
          description: Serial number
      overload: sl.ZEDCamera.GetZEDSerialNumber*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetFOV
      commentId: M:sl.ZEDCamera.GetFOV
      language: CSharp
      name:
        CSharp: GetFOV()
        VB: GetFOV()
      nameWithType:
        CSharp: ZEDCamera.GetFOV()
        VB: ZEDCamera.GetFOV()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetFOV()
        VB: sl.ZEDCamera.GetFOV()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetFOV
        path: ''
        startLine: 1114
      summary: "\nReturns the ZED&apos;s vertical field of view in radians.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetFOV()
          VB: Public Function GetFOV As Single
        return:
          type: System.Single
          description: Vertical field of view.
      overload: sl.ZEDCamera.GetFOV*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetFrameDroppedCount
      commentId: M:sl.ZEDCamera.GetFrameDroppedCount
      language: CSharp
      name:
        CSharp: GetFrameDroppedCount()
        VB: GetFrameDroppedCount()
      nameWithType:
        CSharp: ZEDCamera.GetFrameDroppedCount()
        VB: ZEDCamera.GetFrameDroppedCount()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetFrameDroppedCount()
        VB: sl.ZEDCamera.GetFrameDroppedCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetFrameDroppedCount
        path: ''
        startLine: 1151
      summary: "\nGets the number of frames dropped since Grab() was called for the first time.\nBased on camera timestamps and an FPS comparison.\n"
      remarks: Similar to the Frame Drop display in the ZED Explorer app.
      example: []
      syntax:
        content:
          CSharp: public uint GetFrameDroppedCount()
          VB: Public Function GetFrameDroppedCount As UInteger
        return:
          type: System.UInt32
          description: Frames dropped since first Grab() call.
      overload: sl.ZEDCamera.GetFrameDroppedCount*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetFrameDroppedPercent
      commentId: M:sl.ZEDCamera.GetFrameDroppedPercent
      language: CSharp
      name:
        CSharp: GetFrameDroppedPercent()
        VB: GetFrameDroppedPercent()
      nameWithType:
        CSharp: ZEDCamera.GetFrameDroppedPercent()
        VB: ZEDCamera.GetFrameDroppedPercent()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetFrameDroppedPercent()
        VB: sl.ZEDCamera.GetFrameDroppedPercent()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetFrameDroppedPercent
        path: ''
        startLine: 1160
      summary: "\nGets the percentage of frames dropped since Grab() was called for the first time.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetFrameDroppedPercent()
          VB: Public Function GetFrameDroppedPercent As Single
        return:
          type: System.Single
          description: Percentage of frames dropped.
      overload: sl.ZEDCamera.GetFrameDroppedPercent*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetPosition(Quaternion@,Vector3@,sl.REFERENCE_FRAME)
      commentId: M:sl.ZEDCamera.GetPosition(Quaternion@,Vector3@,sl.REFERENCE_FRAME)
      language: CSharp
      name:
        CSharp: GetPosition(ref Quaternion, ref Vector3, REFERENCE_FRAME)
        VB: GetPosition(ByRef Quaternion, ByRef Vector3, REFERENCE_FRAME)
      nameWithType:
        CSharp: ZEDCamera.GetPosition(ref Quaternion, ref Vector3, REFERENCE_FRAME)
        VB: ZEDCamera.GetPosition(ByRef Quaternion, ByRef Vector3, REFERENCE_FRAME)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetPosition(ref Quaternion, ref Vector3, sl.REFERENCE_FRAME)
        VB: sl.ZEDCamera.GetPosition(ByRef Quaternion, ByRef Vector3, sl.REFERENCE_FRAME)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetPosition
        path: ''
        startLine: 1173
      summary: "\nGets the position of the camera and the current state of the ZED Tracking.\n"
      example: []
      syntax:
        content:
          CSharp: public TRACKING_STATE GetPosition(ref Quaternion rotation, ref Vector3 position, REFERENCE_FRAME referenceType = REFERENCE_FRAME.WORLD)
          VB: Public Function GetPosition(ByRef rotation As Quaternion, ByRef position As Vector3, referenceType As REFERENCE_FRAME = REFERENCE_FRAME.WORLD) As TRACKING_STATE
        parameters:
        - id: rotation
          type: Quaternion
          description: Quaternion filled with the current rotation of the camera depending on its reference frame.
        - id: position
          type: Vector3
          description: Vector filled with the current position of the camera depending on its reference frame.
        - id: referenceType
          type: sl.REFERENCE_FRAME
          description: >-
            Reference frame for setting the rotation/position. CAMERA gives movement relative to the last pose.

            WORLD gives cumulative movements since tracking started.
        return:
          type: sl.TRACKING_STATE
          description: State of ZED&apos;s Tracking system (off, searching, ok).
      overload: sl.ZEDCamera.GetPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetPosition(Quaternion@,Vector3@,Quaternion@,Vector3@,sl.REFERENCE_FRAME)
      commentId: M:sl.ZEDCamera.GetPosition(Quaternion@,Vector3@,Quaternion@,Vector3@,sl.REFERENCE_FRAME)
      language: CSharp
      name:
        CSharp: GetPosition(ref Quaternion, ref Vector3, ref Quaternion, ref Vector3, REFERENCE_FRAME)
        VB: GetPosition(ByRef Quaternion, ByRef Vector3, ByRef Quaternion, ByRef Vector3, REFERENCE_FRAME)
      nameWithType:
        CSharp: ZEDCamera.GetPosition(ref Quaternion, ref Vector3, ref Quaternion, ref Vector3, REFERENCE_FRAME)
        VB: ZEDCamera.GetPosition(ByRef Quaternion, ByRef Vector3, ByRef Quaternion, ByRef Vector3, REFERENCE_FRAME)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetPosition(ref Quaternion, ref Vector3, ref Quaternion, ref Vector3, sl.REFERENCE_FRAME)
        VB: sl.ZEDCamera.GetPosition(ByRef Quaternion, ByRef Vector3, ByRef Quaternion, ByRef Vector3, sl.REFERENCE_FRAME)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetPosition
        path: ''
        startLine: 1188
      summary: "\nGets the current position of the camera and state of the tracking, with an optional offset to the tracking frame.\n"
      example: []
      syntax:
        content:
          CSharp: public TRACKING_STATE GetPosition(ref Quaternion rotation, ref Vector3 translation, ref Quaternion targetQuaternion, ref Vector3 targetTranslation, REFERENCE_FRAME referenceFrame = REFERENCE_FRAME.WORLD)
          VB: Public Function GetPosition(ByRef rotation As Quaternion, ByRef translation As Vector3, ByRef targetQuaternion As Quaternion, ByRef targetTranslation As Vector3, referenceFrame As REFERENCE_FRAME = REFERENCE_FRAME.WORLD) As TRACKING_STATE
        parameters:
        - id: rotation
          type: Quaternion
          description: Quaternion filled with the current rotation of the camera depending on its reference frame.
        - id: translation
          type: Vector3
        - id: targetQuaternion
          type: Quaternion
          description: Rotational offset applied to the tracking frame.
        - id: targetTranslation
          type: Vector3
          description: Positional offset applied to the tracking frame.
        - id: referenceFrame
          type: sl.REFERENCE_FRAME
          description: >-
            Reference frame for setting the rotation/position. CAMERA gives movement relative to the last pose.

            WORLD gives cumulative movements since tracking started.
        return:
          type: sl.TRACKING_STATE
          description: State of ZED&apos;s Tracking system (off, searching, ok).
      overload: sl.ZEDCamera.GetPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetPosition(Quaternion@,Vector3@,sl.TRACKING_FRAME,sl.REFERENCE_FRAME)
      commentId: M:sl.ZEDCamera.GetPosition(Quaternion@,Vector3@,sl.TRACKING_FRAME,sl.REFERENCE_FRAME)
      language: CSharp
      name:
        CSharp: GetPosition(ref Quaternion, ref Vector3, TRACKING_FRAME, REFERENCE_FRAME)
        VB: GetPosition(ByRef Quaternion, ByRef Vector3, TRACKING_FRAME, REFERENCE_FRAME)
      nameWithType:
        CSharp: ZEDCamera.GetPosition(ref Quaternion, ref Vector3, TRACKING_FRAME, REFERENCE_FRAME)
        VB: ZEDCamera.GetPosition(ByRef Quaternion, ByRef Vector3, TRACKING_FRAME, REFERENCE_FRAME)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetPosition(ref Quaternion, ref Vector3, sl.TRACKING_FRAME, sl.REFERENCE_FRAME)
        VB: sl.ZEDCamera.GetPosition(ByRef Quaternion, ByRef Vector3, sl.TRACKING_FRAME, sl.REFERENCE_FRAME)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetPosition
        path: ''
        startLine: 1204
      summary: "\nGets the current position of the camera and state of the tracking, with a defined tracking frame.\nA tracking frame defines what part of the ZED is its center for tracking purposes. See ZEDCommon.TRACKING_FRAME.\n"
      example: []
      syntax:
        content:
          CSharp: public TRACKING_STATE GetPosition(ref Quaternion rotation, ref Vector3 translation, TRACKING_FRAME trackingFrame, REFERENCE_FRAME referenceFrame = REFERENCE_FRAME.WORLD)
          VB: Public Function GetPosition(ByRef rotation As Quaternion, ByRef translation As Vector3, trackingFrame As TRACKING_FRAME, referenceFrame As REFERENCE_FRAME = REFERENCE_FRAME.WORLD) As TRACKING_STATE
        parameters:
        - id: rotation
          type: Quaternion
          description: Quaternion filled with the current rotation of the camera depending on its reference frame.
        - id: translation
          type: Vector3
        - id: trackingFrame
          type: sl.TRACKING_FRAME
          description: Center of the ZED for tracking purposes (left eye, center, right eye).
        - id: referenceFrame
          type: sl.REFERENCE_FRAME
          description: >-
            Reference frame for setting the rotation/position. CAMERA gives movement relative to the last pose.

            WORLD gives cumulative movements since tracking started.
        return:
          type: sl.TRACKING_STATE
          description: State of ZED&apos;s Tracking system (off, searching, ok).
      overload: sl.ZEDCamera.GetPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetPosition(sl.Pose@,sl.REFERENCE_FRAME)
      commentId: M:sl.ZEDCamera.GetPosition(sl.Pose@,sl.REFERENCE_FRAME)
      language: CSharp
      name:
        CSharp: GetPosition(ref Pose, REFERENCE_FRAME)
        VB: GetPosition(ByRef Pose, REFERENCE_FRAME)
      nameWithType:
        CSharp: ZEDCamera.GetPosition(ref Pose, REFERENCE_FRAME)
        VB: ZEDCamera.GetPosition(ByRef Pose, REFERENCE_FRAME)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetPosition(ref sl.Pose, sl.REFERENCE_FRAME)
        VB: sl.ZEDCamera.GetPosition(ByRef sl.Pose, sl.REFERENCE_FRAME)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetPosition
        path: ''
        startLine: 1231
      summary: "\nGets the current position of the camera and state of the tracking, filling a Pose struct useful for AR pass-through.\n"
      example: []
      syntax:
        content:
          CSharp: public TRACKING_STATE GetPosition(ref Pose pose, REFERENCE_FRAME referenceType = REFERENCE_FRAME.WORLD)
          VB: Public Function GetPosition(ByRef pose As Pose, referenceType As REFERENCE_FRAME = REFERENCE_FRAME.WORLD) As TRACKING_STATE
        parameters:
        - id: pose
          type: sl.Pose
          description: Current pose.
        - id: referenceType
          type: sl.REFERENCE_FRAME
          description: >-
            Reference frame for setting the rotation/position. CAMERA gives movement relative to the last pose.

            WORLD gives cumulative movements since tracking started.
        return:
          type: sl.TRACKING_STATE
          description: State of ZED&apos;s Tracking system (off, searching, ok).
      overload: sl.ZEDCamera.GetPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SetIMUOrientationPrior(Quaternion@)
      commentId: M:sl.ZEDCamera.SetIMUOrientationPrior(Quaternion@)
      language: CSharp
      name:
        CSharp: SetIMUOrientationPrior(ref Quaternion)
        VB: SetIMUOrientationPrior(ByRef Quaternion)
      nameWithType:
        CSharp: ZEDCamera.SetIMUOrientationPrior(ref Quaternion)
        VB: ZEDCamera.SetIMUOrientationPrior(ByRef Quaternion)
      qualifiedName:
        CSharp: sl.ZEDCamera.SetIMUOrientationPrior(ref Quaternion)
        VB: sl.ZEDCamera.SetIMUOrientationPrior(ByRef Quaternion)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetIMUOrientationPrior
        path: ''
        startLine: 1244
      summary: "\nSets a prior to the IMU orientation (only for ZED-M).\nPrior must come from a external IMU, such as the HMD orientation and should be in a time frame\nthat&apos;s as close as possible to the camera.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetIMUOrientationPrior(ref Quaternion rotation)
          VB: Public Function SetIMUOrientationPrior(ByRef rotation As Quaternion) As ERROR_CODE
        parameters:
        - id: rotation
          type: Quaternion
          description: Prior rotation.
        return:
          type: sl.ERROR_CODE
          description: Error code status.
      overload: sl.ZEDCamera.SetIMUOrientationPrior*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetInternalIMUOrientation(Quaternion@,sl.TIME_REFERENCE)
      commentId: M:sl.ZEDCamera.GetInternalIMUOrientation(Quaternion@,sl.TIME_REFERENCE)
      language: CSharp
      name:
        CSharp: GetInternalIMUOrientation(ref Quaternion, TIME_REFERENCE)
        VB: GetInternalIMUOrientation(ByRef Quaternion, TIME_REFERENCE)
      nameWithType:
        CSharp: ZEDCamera.GetInternalIMUOrientation(ref Quaternion, TIME_REFERENCE)
        VB: ZEDCamera.GetInternalIMUOrientation(ByRef Quaternion, TIME_REFERENCE)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetInternalIMUOrientation(ref Quaternion, sl.TIME_REFERENCE)
        VB: sl.ZEDCamera.GetInternalIMUOrientation(ByRef Quaternion, sl.TIME_REFERENCE)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetInternalIMUOrientation
        path: ''
        startLine: 1256
      summary: "\nGets the rotation given by the ZED-M/ZED2 IMU. Return an error if using ZED (v1) which does not contains internal sensors\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetInternalIMUOrientation(ref Quaternion rotation, TIME_REFERENCE referenceTime = TIME_REFERENCE.IMAGE)
          VB: Public Function GetInternalIMUOrientation(ByRef rotation As Quaternion, referenceTime As TIME_REFERENCE = TIME_REFERENCE.IMAGE) As ERROR_CODE
        parameters:
        - id: rotation
          type: Quaternion
          description: Rotation from the IMU.
        - id: referenceTime
          type: sl.TIME_REFERENCE
        return:
          type: sl.ERROR_CODE
          description: Error code status.
      overload: sl.ZEDCamera.GetInternalIMUOrientation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetInternalSensorsData(sl.SensorsData@,sl.TIME_REFERENCE)
      commentId: M:sl.ZEDCamera.GetInternalSensorsData(sl.SensorsData@,sl.TIME_REFERENCE)
      language: CSharp
      name:
        CSharp: GetInternalSensorsData(ref SensorsData, TIME_REFERENCE)
        VB: GetInternalSensorsData(ByRef SensorsData, TIME_REFERENCE)
      nameWithType:
        CSharp: ZEDCamera.GetInternalSensorsData(ref SensorsData, TIME_REFERENCE)
        VB: ZEDCamera.GetInternalSensorsData(ByRef SensorsData, TIME_REFERENCE)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetInternalSensorsData(ref sl.SensorsData, sl.TIME_REFERENCE)
        VB: sl.ZEDCamera.GetInternalSensorsData(ByRef sl.SensorsData, sl.TIME_REFERENCE)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetInternalSensorsData
        path: ''
        startLine: 1268
      summary: "\nGets the full Sensor data from the ZED-M or ZED2 . Return an error if using ZED (v1) which does not contains internal sensors\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetInternalSensorsData(ref SensorsData data, TIME_REFERENCE referenceTime = TIME_REFERENCE.IMAGE)
          VB: Public Function GetInternalSensorsData(ByRef data As SensorsData, referenceTime As TIME_REFERENCE = TIME_REFERENCE.IMAGE) As ERROR_CODE
        parameters:
        - id: data
          type: sl.SensorsData
        - id: referenceTime
          type: sl.TIME_REFERENCE
        return:
          type: sl.ERROR_CODE
          description: Error code status.
      overload: sl.ZEDCamera.GetInternalSensorsData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS,System.Int32)
      commentId: M:sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS,System.Int32)
      language: CSharp
      name:
        CSharp: SetCameraSettings(CAMERA_SETTINGS, Int32)
        VB: SetCameraSettings(CAMERA_SETTINGS, Int32)
      nameWithType:
        CSharp: ZEDCamera.SetCameraSettings(CAMERA_SETTINGS, Int32)
        VB: ZEDCamera.SetCameraSettings(CAMERA_SETTINGS, Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS, System.Int32)
        VB: sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetCameraSettings
        path: ''
        startLine: 1281
      summary: "\nSets a value in the ZED&apos;s camera settings.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetCameraSettings(CAMERA_SETTINGS settings, int value)
          VB: Public Sub SetCameraSettings(settings As CAMERA_SETTINGS, value As Integer)
        parameters:
        - id: settings
          type: sl.CAMERA_SETTINGS
          description: Setting to be changed (brightness, contrast, gain, exposure, etc.)
        - id: value
          type: System.Int32
          description: New value.
      overload: sl.ZEDCamera.SetCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS)
      commentId: M:sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS)
      language: CSharp
      name:
        CSharp: GetCameraSettings(CAMERA_SETTINGS)
        VB: GetCameraSettings(CAMERA_SETTINGS)
      nameWithType:
        CSharp: ZEDCamera.GetCameraSettings(CAMERA_SETTINGS)
        VB: ZEDCamera.GetCameraSettings(CAMERA_SETTINGS)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS)
        VB: sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCameraSettings
        path: ''
        startLine: 1292
      summary: "\nGets the value of a given setting from the ZED camera.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetCameraSettings(CAMERA_SETTINGS settings)
          VB: Public Function GetCameraSettings(settings As CAMERA_SETTINGS) As Integer
        parameters:
        - id: settings
          type: sl.CAMERA_SETTINGS
          description: Setting to be retrieved (brightness, contrast, gain, exposure, etc.)
        return:
          type: System.Int32
      overload: sl.ZEDCamera.GetCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS,System.Int32,sl.iRect,System.Boolean)
      commentId: M:sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS,System.Int32,sl.iRect,System.Boolean)
      language: CSharp
      name:
        CSharp: SetCameraSettings(CAMERA_SETTINGS, Int32, iRect, Boolean)
        VB: SetCameraSettings(CAMERA_SETTINGS, Int32, iRect, Boolean)
      nameWithType:
        CSharp: ZEDCamera.SetCameraSettings(CAMERA_SETTINGS, Int32, iRect, Boolean)
        VB: ZEDCamera.SetCameraSettings(CAMERA_SETTINGS, Int32, iRect, Boolean)
      qualifiedName:
        CSharp: sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS, System.Int32, sl.iRect, System.Boolean)
        VB: sl.ZEDCamera.SetCameraSettings(sl.CAMERA_SETTINGS, System.Int32, sl.iRect, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetCameraSettings
        path: ''
        startLine: 1307
      summary: "\nOverloaded function for CAMERA_SETTINGS.AEC_AGC_ROI (requires iRect as input)\n"
      example: []
      syntax:
        content:
          CSharp: public int SetCameraSettings(CAMERA_SETTINGS settings, int side, iRect roi, bool reset)
          VB: Public Function SetCameraSettings(settings As CAMERA_SETTINGS, side As Integer, roi As iRect, reset As Boolean) As Integer
        parameters:
        - id: settings
          type: sl.CAMERA_SETTINGS
          description: Must be set to CAMERA_SETTINGS.AEC_AGC_ROI. Otherwise will return -1.
        - id: side
          type: System.Int32
          description: defines left=0 or right=1 or both=2 sensor target
        - id: roi
          type: sl.iRect
          description: the roi defined as a sl.Rect
        - id: reset
          type: System.Boolean
          description: Defines if the target must be reset to full sensor
        return:
          type: System.Int32
          description: ''
      overload: sl.ZEDCamera.SetCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS,System.Int32,sl.iRect@)
      commentId: M:sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS,System.Int32,sl.iRect@)
      language: CSharp
      name:
        CSharp: GetCameraSettings(CAMERA_SETTINGS, Int32, ref iRect)
        VB: GetCameraSettings(CAMERA_SETTINGS, Int32, ByRef iRect)
      nameWithType:
        CSharp: ZEDCamera.GetCameraSettings(CAMERA_SETTINGS, Int32, ref iRect)
        VB: ZEDCamera.GetCameraSettings(CAMERA_SETTINGS, Int32, ByRef iRect)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS, System.Int32, ref sl.iRect)
        VB: sl.ZEDCamera.GetCameraSettings(sl.CAMERA_SETTINGS, System.Int32, ByRef sl.iRect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetCameraSettings
        path: ''
        startLine: 1323
      summary: "\nOverloaded function for CAMERA_SETTINGS.AEC_AGC_ROI (requires iRect as input)\n"
      example: []
      syntax:
        content:
          CSharp: public int GetCameraSettings(CAMERA_SETTINGS settings, int side, ref iRect roi)
          VB: Public Function GetCameraSettings(settings As CAMERA_SETTINGS, side As Integer, ByRef roi As iRect) As Integer
        parameters:
        - id: settings
          type: sl.CAMERA_SETTINGS
          description: Must be set to CAMERA_SETTINGS.AEC_AGC_ROI. Otherwise will return -1.
        - id: side
          type: System.Int32
          description: defines left=0 or right=1 or both=2 sensor target.
        - id: roi
          type: sl.iRect
          description: Roi that will be filled.
        return:
          type: System.Int32
          description: ''
      overload: sl.ZEDCamera.GetCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.ResetCameraSettings
      commentId: M:sl.ZEDCamera.ResetCameraSettings
      language: CSharp
      name:
        CSharp: ResetCameraSettings()
        VB: ResetCameraSettings()
      nameWithType:
        CSharp: ZEDCamera.ResetCameraSettings()
        VB: ZEDCamera.ResetCameraSettings()
      qualifiedName:
        CSharp: sl.ZEDCamera.ResetCameraSettings()
        VB: sl.ZEDCamera.ResetCameraSettings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ResetCameraSettings
        path: ''
        startLine: 1335
      summary: "\nReset camera settings to default\n"
      example: []
      syntax:
        content:
          CSharp: public void ResetCameraSettings()
          VB: Public Sub ResetCameraSettings
      overload: sl.ZEDCamera.ResetCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.LoadCameraSettings(System.String)
      commentId: M:sl.ZEDCamera.LoadCameraSettings(System.String)
      language: CSharp
      name:
        CSharp: LoadCameraSettings(String)
        VB: LoadCameraSettings(String)
      nameWithType:
        CSharp: ZEDCamera.LoadCameraSettings(String)
        VB: ZEDCamera.LoadCameraSettings(String)
      qualifiedName:
        CSharp: sl.ZEDCamera.LoadCameraSettings(System.String)
        VB: sl.ZEDCamera.LoadCameraSettings(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LoadCameraSettings
        path: ''
        startLine: 1358
      summary: "\nLoads camera settings (brightness, contrast, hue, saturation, gain, exposure) from a file in the\nproject&apos;s root directory.\n"
      example: []
      syntax:
        content:
          CSharp: public void LoadCameraSettings(string path)
          VB: Public Sub LoadCameraSettings(path As String)
        parameters:
        - id: path
          type: System.String
          description: Filename.
      overload: sl.ZEDCamera.LoadCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SaveCameraSettings(System.String)
      commentId: M:sl.ZEDCamera.SaveCameraSettings(System.String)
      language: CSharp
      name:
        CSharp: SaveCameraSettings(String)
        VB: SaveCameraSettings(String)
      nameWithType:
        CSharp: ZEDCamera.SaveCameraSettings(String)
        VB: ZEDCamera.SaveCameraSettings(String)
      qualifiedName:
        CSharp: sl.ZEDCamera.SaveCameraSettings(System.String)
        VB: sl.ZEDCamera.SaveCameraSettings(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SaveCameraSettings
        path: ''
        startLine: 1368
      summary: "\nSave the camera settings (brightness, contrast, hue, saturation, gain, exposure) to a file\nrelative to the project&apos;s root directory.\n"
      example: []
      syntax:
        content:
          CSharp: public void SaveCameraSettings(string path)
          VB: Public Sub SaveCameraSettings(path As String)
        parameters:
        - id: path
          type: System.String
          description: Filename.
      overload: sl.ZEDCamera.SaveCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.RetrieveCameraSettings
      commentId: M:sl.ZEDCamera.RetrieveCameraSettings
      language: CSharp
      name:
        CSharp: RetrieveCameraSettings()
        VB: RetrieveCameraSettings()
      nameWithType:
        CSharp: ZEDCamera.RetrieveCameraSettings()
        VB: ZEDCamera.RetrieveCameraSettings()
      qualifiedName:
        CSharp: sl.ZEDCamera.RetrieveCameraSettings()
        VB: sl.ZEDCamera.RetrieveCameraSettings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RetrieveCameraSettings
        path: ''
        startLine: 1377
      summary: "\nRetrieves camera settings from the ZED camera and loads them into a CameraSettings instance\nhandled by ZEDCameraSettingsManager.\n"
      example: []
      syntax:
        content:
          CSharp: public void RetrieveCameraSettings()
          VB: Public Sub RetrieveCameraSettings
      overload: sl.ZEDCamera.RetrieveCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetExposureUpdateType
      commentId: M:sl.ZEDCamera.GetExposureUpdateType
      language: CSharp
      name:
        CSharp: GetExposureUpdateType()
        VB: GetExposureUpdateType()
      nameWithType:
        CSharp: ZEDCamera.GetExposureUpdateType()
        VB: ZEDCamera.GetExposureUpdateType()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetExposureUpdateType()
        VB: sl.ZEDCamera.GetExposureUpdateType()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetExposureUpdateType
        path: ''
        startLine: 1386
      summary: "\nReturns if the camera&apos;s exposure mode is set to automatic.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetExposureUpdateType()
          VB: Public Function GetExposureUpdateType As Boolean
        return:
          type: System.Boolean
          description: <code>True</code> if automatic, <code>false</code> if manual.
      overload: sl.ZEDCamera.GetExposureUpdateType*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetWhiteBalanceUpdateType
      commentId: M:sl.ZEDCamera.GetWhiteBalanceUpdateType
      language: CSharp
      name:
        CSharp: GetWhiteBalanceUpdateType()
        VB: GetWhiteBalanceUpdateType()
      nameWithType:
        CSharp: ZEDCamera.GetWhiteBalanceUpdateType()
        VB: ZEDCamera.GetWhiteBalanceUpdateType()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetWhiteBalanceUpdateType()
        VB: sl.ZEDCamera.GetWhiteBalanceUpdateType()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetWhiteBalanceUpdateType
        path: ''
        startLine: 1395
      summary: "\nReturns if the camera&apos;s white balance  is set to automatic.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetWhiteBalanceUpdateType()
          VB: Public Function GetWhiteBalanceUpdateType As Boolean
        return:
          type: System.Boolean
          description: <code>True</code> if automatic, <code>false</code> if manual.
      overload: sl.ZEDCamera.GetWhiteBalanceUpdateType*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SetCameraSettings
      commentId: M:sl.ZEDCamera.SetCameraSettings
      language: CSharp
      name:
        CSharp: SetCameraSettings()
        VB: SetCameraSettings()
      nameWithType:
        CSharp: ZEDCamera.SetCameraSettings()
        VB: ZEDCamera.SetCameraSettings()
      qualifiedName:
        CSharp: sl.ZEDCamera.SetCameraSettings()
        VB: sl.ZEDCamera.SetCameraSettings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetCameraSettings
        path: ''
        startLine: 1403
      summary: "\nApplies all the settings registered in the ZEDCameraSettingsManager instance to the actual ZED camera.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetCameraSettings()
          VB: Public Sub SetCameraSettings
      overload: sl.ZEDCamera.SetCameraSettings*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.IsZedConnected
      commentId: M:sl.ZEDCamera.IsZedConnected
      language: CSharp
      name:
        CSharp: IsZedConnected()
        VB: IsZedConnected()
      nameWithType:
        CSharp: ZEDCamera.IsZedConnected()
        VB: ZEDCamera.IsZedConnected()
      qualifiedName:
        CSharp: sl.ZEDCamera.IsZedConnected()
        VB: sl.ZEDCamera.IsZedConnected()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: IsZedConnected
        path: ''
        startLine: 1413
      summary: "\nChecks if the ZED camera is connected.\n"
      remarks: The C++ SDK version of this call returns the number of connected ZEDs.
      example: []
      syntax:
        content:
          CSharp: public static bool IsZedConnected()
          VB: Public Shared Function IsZedConnected As Boolean
        return:
          type: System.Boolean
          description: True if ZED is connected.
      overload: sl.ZEDCamera.IsZedConnected*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: sl.ZEDCamera.GetSDKVersion
      commentId: M:sl.ZEDCamera.GetSDKVersion
      language: CSharp
      name:
        CSharp: GetSDKVersion()
        VB: GetSDKVersion()
      nameWithType:
        CSharp: ZEDCamera.GetSDKVersion()
        VB: ZEDCamera.GetSDKVersion()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetSDKVersion()
        VB: sl.ZEDCamera.GetSDKVersion()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetSDKVersion
        path: ''
        startLine: 1422
      summary: "\nGets the version of the currently installed ZED SDK.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetSDKVersion()
          VB: Public Shared Function GetSDKVersion As String
        return:
          type: System.String
          description: ZED SDK version as a string in the format MAJOR.MINOR.PATCH.
      overload: sl.ZEDCamera.GetSDKVersion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: sl.ZEDCamera.GetDepthValue(System.Int32,System.Int32)
      commentId: M:sl.ZEDCamera.GetDepthValue(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GetDepthValue(Int32, Int32)
        VB: GetDepthValue(Int32, Int32)
      nameWithType:
        CSharp: ZEDCamera.GetDepthValue(Int32, Int32)
        VB: ZEDCamera.GetDepthValue(Int32, Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetDepthValue(System.Int32, System.Int32)
        VB: sl.ZEDCamera.GetDepthValue(System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetDepthValue
        path: ''
        startLine: 1452
      summary: "\nDeploys an event that causes the textures to be updated with images received from the ZED.\nShould be called after RetrieveTextures() so there are new images available.\n"
      example: []
      syntax:
        content:
          CSharp: public float GetDepthValue(int posX, int posY)
          VB: Public Function GetDepthValue(posX As Integer, posY As Integer) As Single
        parameters:
        - id: posX
          type: System.Int32
        - id: posY
          type: System.Int32
        return:
          type: System.Single
      overload: sl.ZEDCamera.GetDepthValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetDistanceValue(System.Int32,System.Int32)
      commentId: M:sl.ZEDCamera.GetDistanceValue(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GetDistanceValue(Int32, Int32)
        VB: GetDistanceValue(Int32, Int32)
      nameWithType:
        CSharp: ZEDCamera.GetDistanceValue(Int32, Int32)
        VB: ZEDCamera.GetDistanceValue(Int32, Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetDistanceValue(System.Int32, System.Int32)
        VB: sl.ZEDCamera.GetDistanceValue(System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetDistanceValue
        path: ''
        startLine: 1463
      syntax:
        content:
          CSharp: public float GetDistanceValue(int posX, int posY)
          VB: Public Function GetDistanceValue(posX As Integer, posY As Integer) As Single
        parameters:
        - id: posX
          type: System.Int32
        - id: posY
          type: System.Int32
        return:
          type: System.Single
      overload: sl.ZEDCamera.GetDistanceValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetXYZValue(System.Int32,System.Int32,Vector4@)
      commentId: M:sl.ZEDCamera.GetXYZValue(System.Int32,System.Int32,Vector4@)
      language: CSharp
      name:
        CSharp: GetXYZValue(Int32, Int32, out Vector4)
        VB: GetXYZValue(Int32, Int32, ByRef Vector4)
      nameWithType:
        CSharp: ZEDCamera.GetXYZValue(Int32, Int32, out Vector4)
        VB: ZEDCamera.GetXYZValue(Int32, Int32, ByRef Vector4)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetXYZValue(System.Int32, System.Int32, out Vector4)
        VB: sl.ZEDCamera.GetXYZValue(System.Int32, System.Int32, ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetXYZValue
        path: ''
        startLine: 1473
      syntax:
        content:
          CSharp: public bool GetXYZValue(int posX, int posY, out Vector4 xyz)
          VB: Public Function GetXYZValue(posX As Integer, posY As Integer, ByRef xyz As Vector4) As Boolean
        parameters:
        - id: posX
          type: System.Int32
        - id: posY
          type: System.Int32
        - id: xyz
          type: Vector4
        return:
          type: System.Boolean
      overload: sl.ZEDCamera.GetXYZValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetNormalValue(System.Int32,System.Int32,Vector4@)
      commentId: M:sl.ZEDCamera.GetNormalValue(System.Int32,System.Int32,Vector4@)
      language: CSharp
      name:
        CSharp: GetNormalValue(Int32, Int32, out Vector4)
        VB: GetNormalValue(Int32, Int32, ByRef Vector4)
      nameWithType:
        CSharp: ZEDCamera.GetNormalValue(Int32, Int32, out Vector4)
        VB: ZEDCamera.GetNormalValue(Int32, Int32, ByRef Vector4)
      qualifiedName:
        CSharp: sl.ZEDCamera.GetNormalValue(System.Int32, System.Int32, out Vector4)
        VB: sl.ZEDCamera.GetNormalValue(System.Int32, System.Int32, ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetNormalValue
        path: ''
        startLine: 1485
      syntax:
        content:
          CSharp: public bool GetNormalValue(int posX, int posY, out Vector4 normal)
          VB: Public Function GetNormalValue(posX As Integer, posY As Integer, ByRef normal As Vector4) As Boolean
        parameters:
        - id: posX
          type: System.Int32
        - id: posY
          type: System.Int32
        - id: normal
          type: Vector4
        return:
          type: System.Boolean
      overload: sl.ZEDCamera.GetNormalValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.EnableSpatialMapping(System.Single,System.Single,System.Boolean)
      commentId: M:sl.ZEDCamera.EnableSpatialMapping(System.Single,System.Single,System.Boolean)
      language: CSharp
      name:
        CSharp: EnableSpatialMapping(Single, Single, Boolean)
        VB: EnableSpatialMapping(Single, Single, Boolean)
      nameWithType:
        CSharp: ZEDCamera.EnableSpatialMapping(Single, Single, Boolean)
        VB: ZEDCamera.EnableSpatialMapping(Single, Single, Boolean)
      qualifiedName:
        CSharp: sl.ZEDCamera.EnableSpatialMapping(System.Single, System.Single, System.Boolean)
        VB: sl.ZEDCamera.EnableSpatialMapping(System.Single, System.Single, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: EnableSpatialMapping
        path: ''
        startLine: 1504
      summary: "\nInitializes and begins the spatial mapping processes.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE EnableSpatialMapping(float resolution_meter, float max_range_meter, bool saveTexture = false)
          VB: Public Function EnableSpatialMapping(resolution_meter As Single, max_range_meter As Single, saveTexture As Boolean = False) As ERROR_CODE
        parameters:
        - id: resolution_meter
          type: System.Single
          description: Spatial mapping resolution in meters.
        - id: max_range_meter
          type: System.Single
          description: Maximum scanning range in meters.
        - id: saveTexture
          type: System.Boolean
          description: True to scan surface textures in addition to geometry.
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDCamera.EnableSpatialMapping*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.DisableSpatialMapping
      commentId: M:sl.ZEDCamera.DisableSpatialMapping
      language: CSharp
      name:
        CSharp: DisableSpatialMapping()
        VB: DisableSpatialMapping()
      nameWithType:
        CSharp: ZEDCamera.DisableSpatialMapping()
        VB: ZEDCamera.DisableSpatialMapping()
      qualifiedName:
        CSharp: sl.ZEDCamera.DisableSpatialMapping()
        VB: sl.ZEDCamera.DisableSpatialMapping()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DisableSpatialMapping
        path: ''
        startLine: 1517
      summary: "\nDisables the Spatial Mapping process.\n"
      example: []
      syntax:
        content:
          CSharp: public void DisableSpatialMapping()
          VB: Public Sub DisableSpatialMapping
      overload: sl.ZEDCamera.DisableSpatialMapping*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.UpdateMesh(System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)
      commentId: M:sl.ZEDCamera.UpdateMesh(System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)
      language: CSharp
      name:
        CSharp: UpdateMesh(Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32)
        VB: UpdateMesh(Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32)
      nameWithType:
        CSharp: ZEDCamera.UpdateMesh(Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32)
        VB: ZEDCamera.UpdateMesh(Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.UpdateMesh(System.Int32[], System.Int32[], ref System.Int32, System.Int32[], ref System.Int32, ref System.Int32, System.Int32)
        VB: sl.ZEDCamera.UpdateMesh(System.Int32(), System.Int32(), ByRef System.Int32, System.Int32(), ByRef System.Int32, ByRef System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: UpdateMesh
        path: ''
        startLine: 1536
      summary: "\nUpdates the internal version of the mesh and returns the sizes of the meshes.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE UpdateMesh(int[] nbVerticesInSubmeshes, int[] nbTrianglesInSubmeshes, ref int nbSubmeshes, int[] updatedIndices, ref int nbVertices, ref int nbTriangles, int nbSubmeshMax)
          VB: Public Function UpdateMesh(nbVerticesInSubmeshes As Integer(), nbTrianglesInSubmeshes As Integer(), ByRef nbSubmeshes As Integer, updatedIndices As Integer(), ByRef nbVertices As Integer, ByRef nbTriangles As Integer, nbSubmeshMax As Integer) As ERROR_CODE
        parameters:
        - id: nbVerticesInSubmeshes
          type: System.Int32[]
          description: Array of the number of vertices in each submesh.
        - id: nbTrianglesInSubmeshes
          type: System.Int32[]
          description: Array of the number of triangles in each submesh.
        - id: nbSubmeshes
          type: System.Int32
          description: Number of submeshes.
        - id: updatedIndices
          type: System.Int32[]
          description: List of all submeshes updated since the last update.
        - id: nbVertices
          type: System.Int32
          description: Total number of updated vertices in all submeshes.
        - id: nbTriangles
          type: System.Int32
          description: Total number of updated triangles in all submeshes.
        - id: nbSubmeshMax
          type: System.Int32
          description: Maximum number of submeshes that can be handled.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the update was successful, and why it wasn&apos;t otherwise.
      overload: sl.ZEDCamera.UpdateMesh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.extractWholeSpatialMap
      commentId: M:sl.ZEDCamera.extractWholeSpatialMap
      language: CSharp
      name:
        CSharp: extractWholeSpatialMap()
        VB: extractWholeSpatialMap()
      nameWithType:
        CSharp: ZEDCamera.extractWholeSpatialMap()
        VB: ZEDCamera.extractWholeSpatialMap()
      qualifiedName:
        CSharp: sl.ZEDCamera.extractWholeSpatialMap()
        VB: sl.ZEDCamera.extractWholeSpatialMap()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: extractWholeSpatialMap
        path: ''
        startLine: 1560
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE extractWholeSpatialMap()
          VB: Public Function extractWholeSpatialMap As ERROR_CODE
        return:
          type: sl.ERROR_CODE
      overload: sl.ZEDCamera.extractWholeSpatialMap*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.RequestMesh
      commentId: M:sl.ZEDCamera.RequestMesh
      language: CSharp
      name:
        CSharp: RequestMesh()
        VB: RequestMesh()
      nameWithType:
        CSharp: ZEDCamera.RequestMesh()
        VB: ZEDCamera.RequestMesh()
      qualifiedName:
        CSharp: sl.ZEDCamera.RequestMesh()
        VB: sl.ZEDCamera.RequestMesh()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RequestMesh
        path: ''
        startLine: 1570
      summary: "\nStarts the mesh generation process in a thread that doesn&apos;t block the spatial mapping process.\nZEDSpatialMappingHelper calls this each time it has finished applying the last mesh update.\n"
      example: []
      syntax:
        content:
          CSharp: public void RequestMesh()
          VB: Public Sub RequestMesh
      overload: sl.ZEDCamera.RequestMesh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.PauseSpatialMapping(System.Boolean)
      commentId: M:sl.ZEDCamera.PauseSpatialMapping(System.Boolean)
      language: CSharp
      name:
        CSharp: PauseSpatialMapping(Boolean)
        VB: PauseSpatialMapping(Boolean)
      nameWithType:
        CSharp: ZEDCamera.PauseSpatialMapping(Boolean)
        VB: ZEDCamera.PauseSpatialMapping(Boolean)
      qualifiedName:
        CSharp: sl.ZEDCamera.PauseSpatialMapping(System.Boolean)
        VB: sl.ZEDCamera.PauseSpatialMapping(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: PauseSpatialMapping
        path: ''
        startLine: 1579
      summary: "\nSets the pause state of the data integration mechanism for the ZED&apos;s spatial mapping.\n"
      example: []
      syntax:
        content:
          CSharp: public void PauseSpatialMapping(bool status)
          VB: Public Sub PauseSpatialMapping(status As Boolean)
        parameters:
        - id: status
          type: System.Boolean
          description: If true, the integration is paused. If false, the spatial mapping is resumed.
      overload: sl.ZEDCamera.PauseSpatialMapping*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetMeshRequestStatus
      commentId: M:sl.ZEDCamera.GetMeshRequestStatus
      language: CSharp
      name:
        CSharp: GetMeshRequestStatus()
        VB: GetMeshRequestStatus()
      nameWithType:
        CSharp: ZEDCamera.GetMeshRequestStatus()
        VB: ZEDCamera.GetMeshRequestStatus()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetMeshRequestStatus()
        VB: sl.ZEDCamera.GetMeshRequestStatus()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetMeshRequestStatus
        path: ''
        startLine: 1587
      summary: "\nReturns the mesh generation status. Useful for knowing when to update and retrieve the mesh.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetMeshRequestStatus()
          VB: Public Function GetMeshRequestStatus As ERROR_CODE
        return:
          type: sl.ERROR_CODE
      overload: sl.ZEDCamera.GetMeshRequestStatus*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SaveMesh(System.String,sl.MESH_FILE_FORMAT)
      commentId: M:sl.ZEDCamera.SaveMesh(System.String,sl.MESH_FILE_FORMAT)
      language: CSharp
      name:
        CSharp: SaveMesh(String, MESH_FILE_FORMAT)
        VB: SaveMesh(String, MESH_FILE_FORMAT)
      nameWithType:
        CSharp: ZEDCamera.SaveMesh(String, MESH_FILE_FORMAT)
        VB: ZEDCamera.SaveMesh(String, MESH_FILE_FORMAT)
      qualifiedName:
        CSharp: sl.ZEDCamera.SaveMesh(System.String, sl.MESH_FILE_FORMAT)
        VB: sl.ZEDCamera.SaveMesh(System.String, sl.MESH_FILE_FORMAT)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SaveMesh
        path: ''
        startLine: 1597
      summary: "\nSaves the scanned mesh in a specific file format.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SaveMesh(string filename, MESH_FILE_FORMAT format)
          VB: Public Function SaveMesh(filename As String, format As MESH_FILE_FORMAT) As Boolean
        parameters:
        - id: filename
          type: System.String
          description: Path and filename of the mesh.
        - id: format
          type: sl.MESH_FILE_FORMAT
          description: File format (extension). Can be .obj, .ply or .bin.
        return:
          type: System.Boolean
      overload: sl.ZEDCamera.SaveMesh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.LoadMesh(System.String,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32,System.Int32[])
      commentId: M:sl.ZEDCamera.LoadMesh(System.String,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32,System.Int32[])
      language: CSharp
      name:
        CSharp: LoadMesh(String, Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32, Int32[])
        VB: LoadMesh(String, Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32, Int32())
      nameWithType:
        CSharp: ZEDCamera.LoadMesh(String, Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32, Int32[])
        VB: ZEDCamera.LoadMesh(String, Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32, Int32())
      qualifiedName:
        CSharp: sl.ZEDCamera.LoadMesh(System.String, System.Int32[], System.Int32[], ref System.Int32, System.Int32[], ref System.Int32, ref System.Int32, System.Int32, System.Int32[])
        VB: sl.ZEDCamera.LoadMesh(System.String, System.Int32(), System.Int32(), ByRef System.Int32, System.Int32(), ByRef System.Int32, ByRef System.Int32, System.Int32, System.Int32())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LoadMesh
        path: ''
        startLine: 1614
      summary: "\nLoads a saved mesh file. ZEDSpatialMapping then configures itself as if the loaded mesh was just scanned.\n"
      example: []
      syntax:
        content:
          CSharp: public bool LoadMesh(string filename, int[] nbVerticesInSubmeshes, int[] nbTrianglesInSubmeshes, ref int nbSubmeshes, int[] updatedIndices, ref int nbVertices, ref int nbTriangles, int nbSubmeshMax, int[] textureSize = null)
          VB: Public Function LoadMesh(filename As String, nbVerticesInSubmeshes As Integer(), nbTrianglesInSubmeshes As Integer(), ByRef nbSubmeshes As Integer, updatedIndices As Integer(), ByRef nbVertices As Integer, ByRef nbTriangles As Integer, nbSubmeshMax As Integer, textureSize As Integer() = Nothing) As Boolean
        parameters:
        - id: filename
          type: System.String
          description: Path and filename of the mesh. Should include the extension (.obj, .ply or .bin).
        - id: nbVerticesInSubmeshes
          type: System.Int32[]
          description: Array of the number of vertices in each submesh.
        - id: nbTrianglesInSubmeshes
          type: System.Int32[]
          description: Array of the number of triangles in each submesh.
        - id: nbSubmeshes
          type: System.Int32
          description: Number of submeshes.
        - id: updatedIndices
          type: System.Int32[]
          description: List of all submeshes updated since the last update.
        - id: nbVertices
          type: System.Int32
          description: Total number of updated vertices in all submeshes.
        - id: nbTriangles
          type: System.Int32
          description: Total number of updated triangles in all submeshes.
        - id: nbSubmeshMax
          type: System.Int32
          description: Maximum number of submeshes that can be handled.
        - id: textureSize
          type: System.Int32[]
          description: Array containing the sizes of all the textures (width, height) if applicable.
        return:
          type: System.Boolean
      overload: sl.ZEDCamera.LoadMesh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.FilterMesh(sl.FILTER,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)
      commentId: M:sl.ZEDCamera.FilterMesh(sl.FILTER,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)
      language: CSharp
      name:
        CSharp: FilterMesh(FILTER, Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32)
        VB: FilterMesh(FILTER, Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32)
      nameWithType:
        CSharp: ZEDCamera.FilterMesh(FILTER, Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32)
        VB: ZEDCamera.FilterMesh(FILTER, Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.FilterMesh(sl.FILTER, System.Int32[], System.Int32[], ref System.Int32, System.Int32[], ref System.Int32, ref System.Int32, System.Int32)
        VB: sl.ZEDCamera.FilterMesh(sl.FILTER, System.Int32(), System.Int32(), ByRef System.Int32, System.Int32(), ByRef System.Int32, ByRef System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: FilterMesh
        path: ''
        startLine: 1632
      summary: "\nFilters a mesh to remove triangles while still preserving its overall shape (though less accurate).\n"
      example: []
      syntax:
        content:
          CSharp: public bool FilterMesh(FILTER filterParameters, int[] nbVerticesInSubemeshes, int[] nbTrianglesInSubemeshes, ref int nbSubmeshes, int[] updatedIndices, ref int nbVertices, ref int nbTriangles, int nbSubmeshMax)
          VB: Public Function FilterMesh(filterParameters As FILTER, nbVerticesInSubemeshes As Integer(), nbTrianglesInSubemeshes As Integer(), ByRef nbSubmeshes As Integer, updatedIndices As Integer(), ByRef nbVertices As Integer, ByRef nbTriangles As Integer, nbSubmeshMax As Integer) As Boolean
        parameters:
        - id: filterParameters
          type: sl.FILTER
          description: Filter level. Higher settings remove more triangles.
        - id: nbVerticesInSubemeshes
          type: System.Int32[]
        - id: nbTrianglesInSubemeshes
          type: System.Int32[]
        - id: nbSubmeshes
          type: System.Int32
          description: Number of submeshes.
        - id: updatedIndices
          type: System.Int32[]
          description: List of all submeshes updated since the last update.
        - id: nbVertices
          type: System.Int32
          description: Total number of updated vertices in all submeshes.
        - id: nbTriangles
          type: System.Int32
          description: Total number of updated triangles in all submeshes.
        - id: nbSubmeshMax
          type: System.Int32
          description: Maximum number of submeshes that can be handled.
        return:
          type: System.Boolean
      overload: sl.ZEDCamera.FilterMesh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.ApplyTexture(System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32[],System.Int32)
      commentId: M:sl.ZEDCamera.ApplyTexture(System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32[],System.Int32)
      language: CSharp
      name:
        CSharp: ApplyTexture(Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32[], Int32)
        VB: ApplyTexture(Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32(), Int32)
      nameWithType:
        CSharp: ZEDCamera.ApplyTexture(Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32[], Int32)
        VB: ZEDCamera.ApplyTexture(Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32(), Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.ApplyTexture(System.Int32[], System.Int32[], ref System.Int32, System.Int32[], ref System.Int32, ref System.Int32, System.Int32[], System.Int32)
        VB: sl.ZEDCamera.ApplyTexture(System.Int32(), System.Int32(), ByRef System.Int32, System.Int32(), ByRef System.Int32, ByRef System.Int32, System.Int32(), System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ApplyTexture
        path: ''
        startLine: 1649
      summary: "\nApplies the scanned texture onto the internal scanned mesh.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ApplyTexture(int[] nbVerticesInSubmeshes, int[] nbTrianglesInSubmeshes, ref int nbSubmeshes, int[] updatedIndices, ref int nbVertices, ref int nbTriangles, int[] textureSize, int nbSubmeshMax)
          VB: Public Function ApplyTexture(nbVerticesInSubmeshes As Integer(), nbTrianglesInSubmeshes As Integer(), ByRef nbSubmeshes As Integer, updatedIndices As Integer(), ByRef nbVertices As Integer, ByRef nbTriangles As Integer, textureSize As Integer(), nbSubmeshMax As Integer) As Boolean
        parameters:
        - id: nbVerticesInSubmeshes
          type: System.Int32[]
          description: Array of the number of vertices in each submesh.
        - id: nbTrianglesInSubmeshes
          type: System.Int32[]
          description: Array of the number of triangles in each submesh.
        - id: nbSubmeshes
          type: System.Int32
          description: Number of submeshes.
        - id: updatedIndices
          type: System.Int32[]
          description: List of all submeshes updated since the last update.
        - id: nbVertices
          type: System.Int32
          description: Total number of updated vertices in all submeshes.
        - id: nbTriangles
          type: System.Int32
          description: Total number of updated triangles in all submeshes.
        - id: textureSize
          type: System.Int32[]
          description: 'Vector containing the size of all the texture (width, height). '
        - id: nbSubmeshMax
          type: System.Int32
          description: Maximum number of submeshes that can be handled.
        return:
          type: System.Boolean
          description: ''
      overload: sl.ZEDCamera.ApplyTexture*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetSpatialMappingState
      commentId: M:sl.ZEDCamera.GetSpatialMappingState
      language: CSharp
      name:
        CSharp: GetSpatialMappingState()
        VB: GetSpatialMappingState()
      nameWithType:
        CSharp: ZEDCamera.GetSpatialMappingState()
        VB: ZEDCamera.GetSpatialMappingState()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetSpatialMappingState()
        VB: sl.ZEDCamera.GetSpatialMappingState()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetSpatialMappingState
        path: ''
        startLine: 1658
      summary: "\nGets the current state of spatial mapping.\n"
      example: []
      syntax:
        content:
          CSharp: public SPATIAL_MAPPING_STATE GetSpatialMappingState()
          VB: Public Function GetSpatialMappingState As SPATIAL_MAPPING_STATE
        return:
          type: sl.SPATIAL_MAPPING_STATE
          description: ''
      overload: sl.ZEDCamera.GetSpatialMappingState*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.GetGravityEstimate
      commentId: M:sl.ZEDCamera.GetGravityEstimate
      language: CSharp
      name:
        CSharp: GetGravityEstimate()
        VB: GetGravityEstimate()
      nameWithType:
        CSharp: ZEDCamera.GetGravityEstimate()
        VB: ZEDCamera.GetGravityEstimate()
      qualifiedName:
        CSharp: sl.ZEDCamera.GetGravityEstimate()
        VB: sl.ZEDCamera.GetGravityEstimate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetGravityEstimate
        path: ''
        startLine: 1669
      summary: "\nGets a vector pointing toward the direction of gravity. This is estimated from a 3D scan of the environment,\nand as such, a scan must be started/finished for this value to be calculated.\nIf using the ZED Mini, this isn&apos;t required thanks to its IMU.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 GetGravityEstimate()
          VB: Public Function GetGravityEstimate As Vector3
        return:
          type: Vector3
          description: Vector3 pointing downward.
      overload: sl.ZEDCamera.GetGravityEstimate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.MergeChunks(System.Int32,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)
      commentId: M:sl.ZEDCamera.MergeChunks(System.Int32,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)
      language: CSharp
      name:
        CSharp: MergeChunks(Int32, Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32)
        VB: MergeChunks(Int32, Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32)
      nameWithType:
        CSharp: ZEDCamera.MergeChunks(Int32, Int32[], Int32[], ref Int32, Int32[], ref Int32, ref Int32, Int32)
        VB: ZEDCamera.MergeChunks(Int32, Int32(), Int32(), ByRef Int32, Int32(), ByRef Int32, ByRef Int32, Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.MergeChunks(System.Int32, System.Int32[], System.Int32[], ref System.Int32, System.Int32[], ref System.Int32, ref System.Int32, System.Int32)
        VB: sl.ZEDCamera.MergeChunks(System.Int32, System.Int32(), System.Int32(), ByRef System.Int32, System.Int32(), ByRef System.Int32, ByRef System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MergeChunks
        path: ''
        startLine: 1687
      summary: "\nConsolidates the chunks from a scan. This is used to turn lots of small meshes (which are efficient for\nthe scanning process) into several large meshes (which are more convenient to work with).\n"
      example: []
      syntax:
        content:
          CSharp: public void MergeChunks(int numberFaces, int[] nbVerticesInSubmeshes, int[] nbTrianglesInSubmeshes, ref int nbSubmeshes, int[] updatedIndices, ref int nbVertices, ref int nbTriangles, int nbSubmesh)
          VB: Public Sub MergeChunks(numberFaces As Integer, nbVerticesInSubmeshes As Integer(), nbTrianglesInSubmeshes As Integer(), ByRef nbSubmeshes As Integer, updatedIndices As Integer(), ByRef nbVertices As Integer, ByRef nbTriangles As Integer, nbSubmesh As Integer)
        parameters:
        - id: numberFaces
          type: System.Int32
          description: ''
        - id: nbVerticesInSubmeshes
          type: System.Int32[]
          description: Array of the number of vertices in each submesh.
        - id: nbTrianglesInSubmeshes
          type: System.Int32[]
          description: Array of the number of triangles in each submesh.
        - id: nbSubmeshes
          type: System.Int32
          description: Number of submeshes.
        - id: updatedIndices
          type: System.Int32[]
          description: List of all submeshes updated since the last update.
        - id: nbVertices
          type: System.Int32
          description: Total number of updated vertices in all submeshes.
        - id: nbTriangles
          type: System.Int32
          description: Total number of updated triangles in all submeshes.
        - id: nbSubmesh
          type: System.Int32
      overload: sl.ZEDCamera.MergeChunks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.RetrieveMeasure(sl.ZEDMat,sl.MEASURE,sl.MEM,sl.Resolution)
      commentId: M:sl.ZEDCamera.RetrieveMeasure(sl.ZEDMat,sl.MEASURE,sl.MEM,sl.Resolution)
      language: CSharp
      name:
        CSharp: RetrieveMeasure(ZEDMat, MEASURE, MEM, Resolution)
        VB: RetrieveMeasure(ZEDMat, MEASURE, MEM, Resolution)
      nameWithType:
        CSharp: ZEDCamera.RetrieveMeasure(ZEDMat, MEASURE, MEM, Resolution)
        VB: ZEDCamera.RetrieveMeasure(ZEDMat, MEASURE, MEM, Resolution)
      qualifiedName:
        CSharp: sl.ZEDCamera.RetrieveMeasure(sl.ZEDMat, sl.MEASURE, sl.MEM, sl.Resolution)
        VB: sl.ZEDCamera.RetrieveMeasure(sl.ZEDMat, sl.MEASURE, sl.MEM, sl.Resolution)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RetrieveMeasure
        path: ''
        startLine: 1707
      summary: "\nRetrieves a measure texture from the ZED SDK and loads it into a ZEDMat. Use this to get an individual\ntexture from the last grabbed frame with measurements in every pixel - such as a depth map, confidence map, etc.\nMeasure textures are not human-viewable but don&apos;t lose accuracy, unlike image textures.\n"
      remarks: "\nIf you want to access the texture via script, you&apos;ll usually want to specify CPU memory. Then you can use\nMarshal.Copy to move them into a new byte array, which you can load into a Texture2D.\nRetrieveMeasure() calls Camera::retrieveMeasure() in the C++ SDK. For more info, read:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/classsl_1_1Camera.html#af799d12342a7b884242fffdef5588a7f\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE RetrieveMeasure(ZEDMat mat, MEASURE measure, MEM mem = MEM.MEM_CPU, Resolution resolution = default(Resolution))
          VB: Public Function RetrieveMeasure(mat As ZEDMat, measure As MEASURE, mem As MEM = MEM.MEM_CPU, resolution As Resolution = Nothing) As ERROR_CODE
        parameters:
        - id: mat
          type: sl.ZEDMat
          description: ZEDMat to fill with the new texture.
        - id: measure
          type: sl.MEASURE
          description: Measure type (depth, confidence, xyz, etc.)
        - id: mem
          type: sl.MEM
          description: Whether the image should be on CPU or GPU memory.
        - id: resolution
          type: sl.Resolution
          description: Resolution of the texture.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the retrieval was successful, and why it wasn&apos;t otherwise.
      overload: sl.ZEDCamera.RetrieveMeasure*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.RetrieveImage(sl.ZEDMat,sl.VIEW,sl.MEM,sl.Resolution)
      commentId: M:sl.ZEDCamera.RetrieveImage(sl.ZEDMat,sl.VIEW,sl.MEM,sl.Resolution)
      language: CSharp
      name:
        CSharp: RetrieveImage(ZEDMat, VIEW, MEM, Resolution)
        VB: RetrieveImage(ZEDMat, VIEW, MEM, Resolution)
      nameWithType:
        CSharp: ZEDCamera.RetrieveImage(ZEDMat, VIEW, MEM, Resolution)
        VB: ZEDCamera.RetrieveImage(ZEDMat, VIEW, MEM, Resolution)
      qualifiedName:
        CSharp: sl.ZEDCamera.RetrieveImage(sl.ZEDMat, sl.VIEW, sl.MEM, sl.Resolution)
        VB: sl.ZEDCamera.RetrieveImage(sl.ZEDMat, sl.VIEW, sl.MEM, sl.Resolution)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RetrieveImage
        path: ''
        startLine: 1729
      summary: "\nRetrieves an image texture from the ZED SDK and loads it into a ZEDMat. Use this to get an individual\ntexture from the last grabbed frame in a human-viewable format. Image textures work for when you want the result to be visible,\nsuch as the direct RGB image from the camera, or a greyscale image of the depth. However it will lose accuracy if used\nto show measurements like depth or confidence, unlike measure textures.\n"
      remarks: "\nIf you want to access the texture via script, you&apos;ll usually want to specify CPU memory. Then you can use\nMarshal.Copy to move them into a new byte array, which you can load into a Texture2D. Note that you may need to\nchange the color space and/or flip the image.\nRetrieveMeasure() calls Camera::retrieveMeasure() in the C++ SDK. For more info, read:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/classsl_1_1Camera.html#ac40f337ccc76cacd3412b93f7f4638e2\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE RetrieveImage(ZEDMat mat, VIEW view, MEM mem = MEM.MEM_CPU, Resolution resolution = default(Resolution))
          VB: Public Function RetrieveImage(mat As ZEDMat, view As VIEW, mem As MEM = MEM.MEM_CPU, resolution As Resolution = Nothing) As ERROR_CODE
        parameters:
        - id: mat
          type: sl.ZEDMat
          description: ZEDMat to fill with the new texture.
        - id: view
          type: sl.VIEW
          description: Image type (left RGB, right depth map, etc.)
        - id: mem
          type: sl.MEM
          description: Whether the image should be on CPU or GPU memory.
        - id: resolution
          type: sl.Resolution
          description: Resolution of the texture.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the retrieval was successful, and why it wasn&apos;t otherwise.
      overload: sl.ZEDCamera.RetrieveImage*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.EnableStreaming(sl.STREAMING_CODEC,System.UInt32,System.UInt16,System.Int32,System.Boolean,System.Int32)
      commentId: M:sl.ZEDCamera.EnableStreaming(sl.STREAMING_CODEC,System.UInt32,System.UInt16,System.Int32,System.Boolean,System.Int32)
      language: CSharp
      name:
        CSharp: EnableStreaming(STREAMING_CODEC, UInt32, UInt16, Int32, Boolean, Int32)
        VB: EnableStreaming(STREAMING_CODEC, UInt32, UInt16, Int32, Boolean, Int32)
      nameWithType:
        CSharp: ZEDCamera.EnableStreaming(STREAMING_CODEC, UInt32, UInt16, Int32, Boolean, Int32)
        VB: ZEDCamera.EnableStreaming(STREAMING_CODEC, UInt32, UInt16, Int32, Boolean, Int32)
      qualifiedName:
        CSharp: sl.ZEDCamera.EnableStreaming(sl.STREAMING_CODEC, System.UInt32, System.UInt16, System.Int32, System.Boolean, System.Int32)
        VB: sl.ZEDCamera.EnableStreaming(sl.STREAMING_CODEC, System.UInt32, System.UInt16, System.Int32, System.Boolean, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: EnableStreaming
        path: ''
        startLine: 1745
      summary: "\nCreates an streaming pipeline.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE EnableStreaming(STREAMING_CODEC codec = STREAMING_CODEC.AVCHD_BASED, uint bitrate = 8000U, ushort port = 30000, int gopSize = -1, bool adaptativeBitrate = false, int chunk_size = 32768)
          VB: Public Function EnableStreaming(codec As STREAMING_CODEC = STREAMING_CODEC.AVCHD_BASED, bitrate As UInteger = 8000UI, port As UShort = 30000, gopSize As Integer = -1, adaptativeBitrate As Boolean = False, chunk_size As Integer = 32768) As ERROR_CODE
        parameters:
        - id: codec
          type: sl.STREAMING_CODEC
        - id: bitrate
          type: System.UInt32
        - id: port
          type: System.UInt16
        - id: gopSize
          type: System.Int32
        - id: adaptativeBitrate
          type: System.Boolean
        - id: chunk_size
          type: System.Int32
        return:
          type: sl.ERROR_CODE
          description: An ERROR_CODE that defines if the streaming pipe was successfully created
      overload: sl.ZEDCamera.EnableStreaming*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.IsStreamingEnabled
      commentId: M:sl.ZEDCamera.IsStreamingEnabled
      language: CSharp
      name:
        CSharp: IsStreamingEnabled()
        VB: IsStreamingEnabled()
      nameWithType:
        CSharp: ZEDCamera.IsStreamingEnabled()
        VB: ZEDCamera.IsStreamingEnabled()
      qualifiedName:
        CSharp: sl.ZEDCamera.IsStreamingEnabled()
        VB: sl.ZEDCamera.IsStreamingEnabled()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: IsStreamingEnabled
        path: ''
        startLine: 1755
      summary: "\nTells if streaming is running or not.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsStreamingEnabled()
          VB: Public Function IsStreamingEnabled As Boolean
        return:
          type: System.Boolean
          description: false if streaming is not enabled, true if streaming is on
      overload: sl.ZEDCamera.IsStreamingEnabled*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.DisableStreaming
      commentId: M:sl.ZEDCamera.DisableStreaming
      language: CSharp
      name:
        CSharp: DisableStreaming()
        VB: DisableStreaming()
      nameWithType:
        CSharp: ZEDCamera.DisableStreaming()
        VB: ZEDCamera.DisableStreaming()
      qualifiedName:
        CSharp: sl.ZEDCamera.DisableStreaming()
        VB: sl.ZEDCamera.DisableStreaming()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DisableStreaming
        path: ''
        startLine: 1767
      summary: "\nStops the streaming pipeline.\n"
      example: []
      syntax:
        content:
          CSharp: public void DisableStreaming()
          VB: Public Sub DisableStreaming
      overload: sl.ZEDCamera.DisableStreaming*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SaveCurrentImageInFile(sl.VIEW,System.String)
      commentId: M:sl.ZEDCamera.SaveCurrentImageInFile(sl.VIEW,System.String)
      language: CSharp
      name:
        CSharp: SaveCurrentImageInFile(VIEW, String)
        VB: SaveCurrentImageInFile(VIEW, String)
      nameWithType:
        CSharp: ZEDCamera.SaveCurrentImageInFile(VIEW, String)
        VB: ZEDCamera.SaveCurrentImageInFile(VIEW, String)
      qualifiedName:
        CSharp: sl.ZEDCamera.SaveCurrentImageInFile(sl.VIEW, System.String)
        VB: sl.ZEDCamera.SaveCurrentImageInFile(sl.VIEW, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SaveCurrentImageInFile
        path: ''
        startLine: 1781
      summary: "\nSave current image (specified by view) in a file defined by filename\nSupported formats are jpeg and png. Filename must end with either .jpg or .png\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SaveCurrentImageInFile(VIEW view, string filename)
          VB: Public Function SaveCurrentImageInFile(view As VIEW, filename As String) As ERROR_CODE
        parameters:
        - id: view
          type: sl.VIEW
        - id: filename
          type: System.String
        return:
          type: sl.ERROR_CODE
      overload: sl.ZEDCamera.SaveCurrentImageInFile*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SaveCurrentDepthInFile(System.Int32,System.String)
      commentId: M:sl.ZEDCamera.SaveCurrentDepthInFile(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: SaveCurrentDepthInFile(Int32, String)
        VB: SaveCurrentDepthInFile(Int32, String)
      nameWithType:
        CSharp: ZEDCamera.SaveCurrentDepthInFile(Int32, String)
        VB: ZEDCamera.SaveCurrentDepthInFile(Int32, String)
      qualifiedName:
        CSharp: sl.ZEDCamera.SaveCurrentDepthInFile(System.Int32, System.String)
        VB: sl.ZEDCamera.SaveCurrentDepthInFile(System.Int32, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SaveCurrentDepthInFile
        path: ''
        startLine: 1794
      summary: "\nSave the current depth in a file defined by filename.\nSupported formats are PNG,PFM and PGM\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SaveCurrentDepthInFile(int side, string filename)
          VB: Public Function SaveCurrentDepthInFile(side As Integer, filename As String) As ERROR_CODE
        parameters:
        - id: side
          type: System.Int32
          description: defines left (0) or right (1) depth
        - id: filename
          type: System.String
          description: filename must end with .png, .pfm or .pgm
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDCamera.SaveCurrentDepthInFile*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.SaveCurrentPointCloudInFile(System.Int32,System.String)
      commentId: M:sl.ZEDCamera.SaveCurrentPointCloudInFile(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: SaveCurrentPointCloudInFile(Int32, String)
        VB: SaveCurrentPointCloudInFile(Int32, String)
      nameWithType:
        CSharp: ZEDCamera.SaveCurrentPointCloudInFile(Int32, String)
        VB: ZEDCamera.SaveCurrentPointCloudInFile(Int32, String)
      qualifiedName:
        CSharp: sl.ZEDCamera.SaveCurrentPointCloudInFile(System.Int32, System.String)
        VB: sl.ZEDCamera.SaveCurrentPointCloudInFile(System.Int32, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SaveCurrentPointCloudInFile
        path: ''
        startLine: 1807
      summary: "\nSave the current point cloud in a file defined by filename.\nSupported formats are PLY,VTK,XYZ and PCD \n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SaveCurrentPointCloudInFile(int side, string filename)
          VB: Public Function SaveCurrentPointCloudInFile(side As Integer, filename As String) As ERROR_CODE
        parameters:
        - id: side
          type: System.Int32
          description: defines left (0) or right (1) point cloud
        - id: filename
          type: System.String
          description: 'filename must end with .ply, .xyz , .vtk or .pcd '
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDCamera.SaveCurrentPointCloudInFile*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.EnableObjectsDetection(sl.dll_ObjectDetectionParameters@)
      commentId: M:sl.ZEDCamera.EnableObjectsDetection(sl.dll_ObjectDetectionParameters@)
      language: CSharp
      name:
        CSharp: EnableObjectsDetection(ref dll_ObjectDetectionParameters)
        VB: EnableObjectsDetection(ByRef dll_ObjectDetectionParameters)
      nameWithType:
        CSharp: ZEDCamera.EnableObjectsDetection(ref dll_ObjectDetectionParameters)
        VB: ZEDCamera.EnableObjectsDetection(ByRef dll_ObjectDetectionParameters)
      qualifiedName:
        CSharp: sl.ZEDCamera.EnableObjectsDetection(ref sl.dll_ObjectDetectionParameters)
        VB: sl.ZEDCamera.EnableObjectsDetection(ByRef sl.dll_ObjectDetectionParameters)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: EnableObjectsDetection
        path: ''
        startLine: 1820
      summary: "\nEnable object detection module\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE EnableObjectsDetection(ref dll_ObjectDetectionParameters od_params)
          VB: Public Function EnableObjectsDetection(ByRef od_params As dll_ObjectDetectionParameters) As ERROR_CODE
        parameters:
        - id: od_params
          type: sl.dll_ObjectDetectionParameters
        return:
          type: sl.ERROR_CODE
      overload: sl.ZEDCamera.EnableObjectsDetection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.DisableObjectsDetection
      commentId: M:sl.ZEDCamera.DisableObjectsDetection
      language: CSharp
      name:
        CSharp: DisableObjectsDetection()
        VB: DisableObjectsDetection()
      nameWithType:
        CSharp: ZEDCamera.DisableObjectsDetection()
        VB: ZEDCamera.DisableObjectsDetection()
      qualifiedName:
        CSharp: sl.ZEDCamera.DisableObjectsDetection()
        VB: sl.ZEDCamera.DisableObjectsDetection()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DisableObjectsDetection
        path: ''
        startLine: 1834
      summary: "\nDisable object detection module and release the resources.\n"
      example: []
      syntax:
        content:
          CSharp: public void DisableObjectsDetection()
          VB: Public Sub DisableObjectsDetection
      overload: sl.ZEDCamera.DisableObjectsDetection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.PauseObjectsDetection(System.Boolean)
      commentId: M:sl.ZEDCamera.PauseObjectsDetection(System.Boolean)
      language: CSharp
      name:
        CSharp: PauseObjectsDetection(Boolean)
        VB: PauseObjectsDetection(Boolean)
      nameWithType:
        CSharp: ZEDCamera.PauseObjectsDetection(Boolean)
        VB: ZEDCamera.PauseObjectsDetection(Boolean)
      qualifiedName:
        CSharp: sl.ZEDCamera.PauseObjectsDetection(System.Boolean)
        VB: sl.ZEDCamera.PauseObjectsDetection(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: PauseObjectsDetection
        path: ''
        startLine: 1846
      summary: "\nPause or Unpause the object detection\n"
      example: []
      syntax:
        content:
          CSharp: public void PauseObjectsDetection(bool status)
          VB: Public Sub PauseObjectsDetection(status As Boolean)
        parameters:
        - id: status
          type: System.Boolean
          description: ''
      overload: sl.ZEDCamera.PauseObjectsDetection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.RetrieveObjectsDetectionData(sl.dll_ObjectDetectionRuntimeParameters@,sl.ObjectsFrameSDK@)
      commentId: M:sl.ZEDCamera.RetrieveObjectsDetectionData(sl.dll_ObjectDetectionRuntimeParameters@,sl.ObjectsFrameSDK@)
      language: CSharp
      name:
        CSharp: RetrieveObjectsDetectionData(ref dll_ObjectDetectionRuntimeParameters, ref ObjectsFrameSDK)
        VB: RetrieveObjectsDetectionData(ByRef dll_ObjectDetectionRuntimeParameters, ByRef ObjectsFrameSDK)
      nameWithType:
        CSharp: ZEDCamera.RetrieveObjectsDetectionData(ref dll_ObjectDetectionRuntimeParameters, ref ObjectsFrameSDK)
        VB: ZEDCamera.RetrieveObjectsDetectionData(ByRef dll_ObjectDetectionRuntimeParameters, ByRef ObjectsFrameSDK)
      qualifiedName:
        CSharp: sl.ZEDCamera.RetrieveObjectsDetectionData(ref sl.dll_ObjectDetectionRuntimeParameters, ref sl.ObjectsFrameSDK)
        VB: sl.ZEDCamera.RetrieveObjectsDetectionData(ByRef sl.dll_ObjectDetectionRuntimeParameters, ByRef sl.ObjectsFrameSDK)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RetrieveObjectsDetectionData
        path: ''
        startLine: 1860
      summary: "\nRetrieve object detection data \n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE RetrieveObjectsDetectionData(ref dll_ObjectDetectionRuntimeParameters od_params, ref ObjectsFrameSDK objFrame)
          VB: Public Function RetrieveObjectsDetectionData(ByRef od_params As dll_ObjectDetectionRuntimeParameters, ByRef objFrame As ObjectsFrameSDK) As ERROR_CODE
        parameters:
        - id: od_params
          type: sl.dll_ObjectDetectionRuntimeParameters
          description: Object detection runtime parameters
        - id: objFrame
          type: sl.ObjectsFrameSDK
          description: ObjectsFrameSDK that contains all the detection data
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDCamera.RetrieveObjectsDetectionData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.ZEDCamera.TYPE_VIEW
    commentId: T:sl.ZEDCamera.TYPE_VIEW
    language: CSharp
    name:
      CSharp: ZEDCamera.TYPE_VIEW
      VB: ZEDCamera.TYPE_VIEW
    nameWithType:
      CSharp: ZEDCamera.TYPE_VIEW
      VB: ZEDCamera.TYPE_VIEW
    qualifiedName:
      CSharp: sl.ZEDCamera.TYPE_VIEW
      VB: sl.ZEDCamera.TYPE_VIEW
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: TYPE_VIEW
      path: ''
      startLine: 15
    summary: "\nType of textures requested.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TYPE_VIEW
        VB: Public Enum TYPE_VIEW
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.ZEDCamera.TYPE_VIEW.RETRIEVE_IMAGE
      commentId: F:sl.ZEDCamera.TYPE_VIEW.RETRIEVE_IMAGE
      language: CSharp
      name:
        CSharp: RETRIEVE_IMAGE
        VB: RETRIEVE_IMAGE
      nameWithType:
        CSharp: ZEDCamera.TYPE_VIEW.RETRIEVE_IMAGE
        VB: ZEDCamera.TYPE_VIEW.RETRIEVE_IMAGE
      qualifiedName:
        CSharp: sl.ZEDCamera.TYPE_VIEW.RETRIEVE_IMAGE
        VB: sl.ZEDCamera.TYPE_VIEW.RETRIEVE_IMAGE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RETRIEVE_IMAGE
        path: ''
        startLine: 20
      summary: "\nImage-type texture. Human-viewable but loses measurement accuracy.\n"
      example: []
      syntax:
        content:
          CSharp: RETRIEVE_IMAGE = 0
          VB: RETRIEVE_IMAGE = 0
        return:
          type: sl.ZEDCamera.TYPE_VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZEDCamera.TYPE_VIEW.RETRIEVE_MEASURE
      commentId: F:sl.ZEDCamera.TYPE_VIEW.RETRIEVE_MEASURE
      language: CSharp
      name:
        CSharp: RETRIEVE_MEASURE
        VB: RETRIEVE_MEASURE
      nameWithType:
        CSharp: ZEDCamera.TYPE_VIEW.RETRIEVE_MEASURE
        VB: ZEDCamera.TYPE_VIEW.RETRIEVE_MEASURE
      qualifiedName:
        CSharp: sl.ZEDCamera.TYPE_VIEW.RETRIEVE_MEASURE
        VB: sl.ZEDCamera.TYPE_VIEW.RETRIEVE_MEASURE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RETRIEVE_MEASURE
        path: ''
        startLine: 24
      summary: "\nMeasure-type texture. Preserves measurement accuracy but isn&apos;t human-viewable.\n"
      example: []
      syntax:
        content:
          CSharp: RETRIEVE_MEASURE = 1
          VB: RETRIEVE_MEASURE = 1
        return:
          type: sl.ZEDCamera.TYPE_VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.ZEDCamera.dll_initParameters
    commentId: T:sl.ZEDCamera.dll_initParameters
    language: CSharp
    name:
      CSharp: ZEDCamera.dll_initParameters
      VB: ZEDCamera.dll_initParameters
    nameWithType:
      CSharp: ZEDCamera.dll_initParameters
      VB: ZEDCamera.dll_initParameters
    qualifiedName:
      CSharp: sl.ZEDCamera.dll_initParameters
      VB: sl.ZEDCamera.dll_initParameters
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: dll_initParameters
      path: ''
      startLine: 658
    summary: "\nDLL-friendly version of InitParameters (found in ZEDCommon.cs).\n"
    example: []
    syntax:
      content:
        CSharp: public struct dll_initParameters
        VB: Public Structure dll_initParameters
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.ZEDCamera.dll_initParameters.inputType
      commentId: F:sl.ZEDCamera.dll_initParameters.inputType
      language: CSharp
      name:
        CSharp: inputType
        VB: inputType
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.inputType
        VB: ZEDCamera.dll_initParameters.inputType
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.inputType
        VB: sl.ZEDCamera.dll_initParameters.inputType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: inputType
        path: ''
        startLine: 661
      syntax:
        content:
          CSharp: public INPUT_TYPE inputType
          VB: Public inputType As INPUT_TYPE
        return:
          type: sl.INPUT_TYPE
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.resolution
      commentId: F:sl.ZEDCamera.dll_initParameters.resolution
      language: CSharp
      name:
        CSharp: resolution
        VB: resolution
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.resolution
        VB: ZEDCamera.dll_initParameters.resolution
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.resolution
        VB: sl.ZEDCamera.dll_initParameters.resolution
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: resolution
        path: ''
        startLine: 665
      summary: "\nResolution the ZED will be set to.\n"
      example: []
      syntax:
        content:
          CSharp: public RESOLUTION resolution
          VB: Public resolution As RESOLUTION
        return:
          type: sl.RESOLUTION
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.cameraFps
      commentId: F:sl.ZEDCamera.dll_initParameters.cameraFps
      language: CSharp
      name:
        CSharp: cameraFps
        VB: cameraFps
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.cameraFps
        VB: ZEDCamera.dll_initParameters.cameraFps
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.cameraFps
        VB: sl.ZEDCamera.dll_initParameters.cameraFps
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraFps
        path: ''
        startLine: 669
      summary: "\nDesired camera FPS. Max is set by resolution.\n"
      example: []
      syntax:
        content:
          CSharp: public int cameraFps
          VB: Public cameraFps As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.cameraDeviceID
      commentId: F:sl.ZEDCamera.dll_initParameters.cameraDeviceID
      language: CSharp
      name:
        CSharp: cameraDeviceID
        VB: cameraDeviceID
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.cameraDeviceID
        VB: ZEDCamera.dll_initParameters.cameraDeviceID
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.cameraDeviceID
        VB: sl.ZEDCamera.dll_initParameters.cameraDeviceID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraDeviceID
        path: ''
        startLine: 673
      summary: "\nID for identifying which of multiple connected ZEDs to use.\n"
      example: []
      syntax:
        content:
          CSharp: public int cameraDeviceID
          VB: Public cameraDeviceID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.cameraImageFlip
      commentId: F:sl.ZEDCamera.dll_initParameters.cameraImageFlip
      language: CSharp
      name:
        CSharp: cameraImageFlip
        VB: cameraImageFlip
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.cameraImageFlip
        VB: ZEDCamera.dll_initParameters.cameraImageFlip
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.cameraImageFlip
        VB: sl.ZEDCamera.dll_initParameters.cameraImageFlip
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraImageFlip
        path: ''
        startLine: 678
      summary: "\nTrue to flip images horizontally.\n"
      example: []
      syntax:
        content:
          CSharp: public bool cameraImageFlip
          VB: Public cameraImageFlip As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.cameraDisableSelfCalib
      commentId: F:sl.ZEDCamera.dll_initParameters.cameraDisableSelfCalib
      language: CSharp
      name:
        CSharp: cameraDisableSelfCalib
        VB: cameraDisableSelfCalib
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.cameraDisableSelfCalib
        VB: ZEDCamera.dll_initParameters.cameraDisableSelfCalib
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.cameraDisableSelfCalib
        VB: sl.ZEDCamera.dll_initParameters.cameraDisableSelfCalib
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraDisableSelfCalib
        path: ''
        startLine: 684
      summary: "\nTrue to disable self-calibration, using unoptimized optional calibration parameters.\nFalse is recommended for optimized calibration.\n"
      example: []
      syntax:
        content:
          CSharp: public bool cameraDisableSelfCalib
          VB: Public cameraDisableSelfCalib As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.enableRightSideMeasure
      commentId: F:sl.ZEDCamera.dll_initParameters.enableRightSideMeasure
      language: CSharp
      name:
        CSharp: enableRightSideMeasure
        VB: enableRightSideMeasure
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.enableRightSideMeasure
        VB: ZEDCamera.dll_initParameters.enableRightSideMeasure
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.enableRightSideMeasure
        VB: sl.ZEDCamera.dll_initParameters.enableRightSideMeasure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enableRightSideMeasure
        path: ''
        startLine: 689
      summary: "\nTrue if depth relative to the right sensor should be computed.\n"
      example: []
      syntax:
        content:
          CSharp: public bool enableRightSideMeasure
          VB: Public enableRightSideMeasure As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.svoRealTimeMode
      commentId: F:sl.ZEDCamera.dll_initParameters.svoRealTimeMode
      language: CSharp
      name:
        CSharp: svoRealTimeMode
        VB: svoRealTimeMode
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.svoRealTimeMode
        VB: ZEDCamera.dll_initParameters.svoRealTimeMode
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.svoRealTimeMode
        VB: sl.ZEDCamera.dll_initParameters.svoRealTimeMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: svoRealTimeMode
        path: ''
        startLine: 694
      summary: "\nTrue to skip dropped frames during SVO playback.\n"
      example: []
      syntax:
        content:
          CSharp: public bool svoRealTimeMode
          VB: Public svoRealTimeMode As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.depthMode
      commentId: F:sl.ZEDCamera.dll_initParameters.depthMode
      language: CSharp
      name:
        CSharp: depthMode
        VB: depthMode
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.depthMode
        VB: ZEDCamera.dll_initParameters.depthMode
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.depthMode
        VB: sl.ZEDCamera.dll_initParameters.depthMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthMode
        path: ''
        startLine: 698
      summary: "\nQuality level of depth calculations. Higher settings improve accuracy but cost performance.\n"
      example: []
      syntax:
        content:
          CSharp: public DEPTH_MODE depthMode
          VB: Public depthMode As DEPTH_MODE
        return:
          type: sl.DEPTH_MODE
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.depthStabilization
      commentId: F:sl.ZEDCamera.dll_initParameters.depthStabilization
      language: CSharp
      name:
        CSharp: depthStabilization
        VB: depthStabilization
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.depthStabilization
        VB: ZEDCamera.dll_initParameters.depthStabilization
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.depthStabilization
        VB: sl.ZEDCamera.dll_initParameters.depthStabilization
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthStabilization
        path: ''
        startLine: 703
      summary: "\nTrue to stabilize the depth map. Recommended.\n"
      example: []
      syntax:
        content:
          CSharp: public bool depthStabilization
          VB: Public depthStabilization As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.depthMinimumDistance
      commentId: F:sl.ZEDCamera.dll_initParameters.depthMinimumDistance
      language: CSharp
      name:
        CSharp: depthMinimumDistance
        VB: depthMinimumDistance
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.depthMinimumDistance
        VB: ZEDCamera.dll_initParameters.depthMinimumDistance
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.depthMinimumDistance
        VB: sl.ZEDCamera.dll_initParameters.depthMinimumDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthMinimumDistance
        path: ''
        startLine: 707
      summary: "\nMinimum distance from the camera from which depth will be computed, in the defined coordinateUnit.\n"
      example: []
      syntax:
        content:
          CSharp: public float depthMinimumDistance
          VB: Public depthMinimumDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.depthMaximumDistance
      commentId: F:sl.ZEDCamera.dll_initParameters.depthMaximumDistance
      language: CSharp
      name:
        CSharp: depthMaximumDistance
        VB: depthMaximumDistance
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.depthMaximumDistance
        VB: ZEDCamera.dll_initParameters.depthMaximumDistance
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.depthMaximumDistance
        VB: sl.ZEDCamera.dll_initParameters.depthMaximumDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthMaximumDistance
        path: ''
        startLine: 711
      summary: "\nMaximum distance that can be computed.\n"
      example: []
      syntax:
        content:
          CSharp: public float depthMaximumDistance
          VB: Public depthMaximumDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.coordinateUnit
      commentId: F:sl.ZEDCamera.dll_initParameters.coordinateUnit
      language: CSharp
      name:
        CSharp: coordinateUnit
        VB: coordinateUnit
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.coordinateUnit
        VB: ZEDCamera.dll_initParameters.coordinateUnit
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.coordinateUnit
        VB: sl.ZEDCamera.dll_initParameters.coordinateUnit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: coordinateUnit
        path: ''
        startLine: 715
      summary: "\nCoordinate unit for all measurements (depth, tracking, etc.).\n"
      example: []
      syntax:
        content:
          CSharp: public UNIT coordinateUnit
          VB: Public coordinateUnit As UNIT
        return:
          type: sl.UNIT
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.coordinateSystem
      commentId: F:sl.ZEDCamera.dll_initParameters.coordinateSystem
      language: CSharp
      name:
        CSharp: coordinateSystem
        VB: coordinateSystem
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.coordinateSystem
        VB: ZEDCamera.dll_initParameters.coordinateSystem
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.coordinateSystem
        VB: sl.ZEDCamera.dll_initParameters.coordinateSystem
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: coordinateSystem
        path: ''
        startLine: 719
      summary: "\nDefines order and direction of coordinate system axes.\n"
      example: []
      syntax:
        content:
          CSharp: public COORDINATE_SYSTEM coordinateSystem
          VB: Public coordinateSystem As COORDINATE_SYSTEM
        return:
          type: sl.COORDINATE_SYSTEM
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.sdkGPUId
      commentId: F:sl.ZEDCamera.dll_initParameters.sdkGPUId
      language: CSharp
      name:
        CSharp: sdkGPUId
        VB: sdkGPUId
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.sdkGPUId
        VB: ZEDCamera.dll_initParameters.sdkGPUId
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.sdkGPUId
        VB: sl.ZEDCamera.dll_initParameters.sdkGPUId
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sdkGPUId
        path: ''
        startLine: 723
      summary: "\nID of the graphics card on which the ZED&apos;s computations will be performed.\n"
      example: []
      syntax:
        content:
          CSharp: public int sdkGPUId
          VB: Public sdkGPUId As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.sdkVerbose
      commentId: F:sl.ZEDCamera.dll_initParameters.sdkVerbose
      language: CSharp
      name:
        CSharp: sdkVerbose
        VB: sdkVerbose
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.sdkVerbose
        VB: ZEDCamera.dll_initParameters.sdkVerbose
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.sdkVerbose
        VB: sl.ZEDCamera.dll_initParameters.sdkVerbose
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sdkVerbose
        path: ''
        startLine: 728
      summary: "\nTrue for the SDK to provide text feedback.\n"
      example: []
      syntax:
        content:
          CSharp: public bool sdkVerbose
          VB: Public sdkVerbose As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.sensorsRequired
      commentId: F:sl.ZEDCamera.dll_initParameters.sensorsRequired
      language: CSharp
      name:
        CSharp: sensorsRequired
        VB: sensorsRequired
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.sensorsRequired
        VB: ZEDCamera.dll_initParameters.sensorsRequired
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.sensorsRequired
        VB: sl.ZEDCamera.dll_initParameters.sensorsRequired
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sensorsRequired
        path: ''
        startLine: 733
      summary: "\nTrue if sensors are required, false will not trigger an error if sensors are missing.\n"
      example: []
      syntax:
        content:
          CSharp: public bool sensorsRequired
          VB: Public sensorsRequired As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.enableImageEnhancement
      commentId: F:sl.ZEDCamera.dll_initParameters.enableImageEnhancement
      language: CSharp
      name:
        CSharp: enableImageEnhancement
        VB: enableImageEnhancement
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.enableImageEnhancement
        VB: ZEDCamera.dll_initParameters.enableImageEnhancement
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.enableImageEnhancement
        VB: sl.ZEDCamera.dll_initParameters.enableImageEnhancement
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enableImageEnhancement
        path: ''
        startLine: 738
      summary: "\nWhether to enable improved color/gamma curves added in ZED SDK 3.0. \n"
      example: []
      syntax:
        content:
          CSharp: public bool enableImageEnhancement
          VB: Public enableImageEnhancement As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_initParameters.#ctor(sl.InitParameters)
      commentId: M:sl.ZEDCamera.dll_initParameters.#ctor(sl.InitParameters)
      language: CSharp
      name:
        CSharp: dll_initParameters(InitParameters)
        VB: dll_initParameters(InitParameters)
      nameWithType:
        CSharp: ZEDCamera.dll_initParameters.dll_initParameters(InitParameters)
        VB: ZEDCamera.dll_initParameters.dll_initParameters(InitParameters)
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_initParameters.dll_initParameters(sl.InitParameters)
        VB: sl.ZEDCamera.dll_initParameters.dll_initParameters(sl.InitParameters)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 744
      summary: "\nCopy constructor.\n"
      example: []
      syntax:
        content:
          CSharp: public dll_initParameters(InitParameters init)
          VB: Public Sub New(init As InitParameters)
        parameters:
        - id: init
          type: sl.InitParameters
          description: ''
      overload: sl.ZEDCamera.dll_initParameters.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.ZEDCamera.dll_RuntimeParameters
    commentId: T:sl.ZEDCamera.dll_RuntimeParameters
    language: CSharp
    name:
      CSharp: ZEDCamera.dll_RuntimeParameters
      VB: ZEDCamera.dll_RuntimeParameters
    nameWithType:
      CSharp: ZEDCamera.dll_RuntimeParameters
      VB: ZEDCamera.dll_RuntimeParameters
    qualifiedName:
      CSharp: sl.ZEDCamera.dll_RuntimeParameters
      VB: sl.ZEDCamera.dll_RuntimeParameters
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: dll_RuntimeParameters
      path: ''
      startLine: 770
    summary: "\nDLL-friendly version of RuntimeParameters (found in ZEDCommon.cs).\n"
    example: []
    syntax:
      content:
        CSharp: public struct dll_RuntimeParameters
        VB: Public Structure dll_RuntimeParameters
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.ZEDCamera.dll_RuntimeParameters.sensingMode
      commentId: F:sl.ZEDCamera.dll_RuntimeParameters.sensingMode
      language: CSharp
      name:
        CSharp: sensingMode
        VB: sensingMode
      nameWithType:
        CSharp: ZEDCamera.dll_RuntimeParameters.sensingMode
        VB: ZEDCamera.dll_RuntimeParameters.sensingMode
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_RuntimeParameters.sensingMode
        VB: sl.ZEDCamera.dll_RuntimeParameters.sensingMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sensingMode
        path: ''
        startLine: 776
      summary: "\nDefines the algorithm used for depth map computation, more info : \\ref SENSING_MODE definition.\n"
      example: []
      syntax:
        content:
          CSharp: public SENSING_MODE sensingMode
          VB: Public sensingMode As SENSING_MODE
        return:
          type: sl.SENSING_MODE
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_RuntimeParameters.measure3DReferenceFrame
      commentId: F:sl.ZEDCamera.dll_RuntimeParameters.measure3DReferenceFrame
      language: CSharp
      name:
        CSharp: measure3DReferenceFrame
        VB: measure3DReferenceFrame
      nameWithType:
        CSharp: ZEDCamera.dll_RuntimeParameters.measure3DReferenceFrame
        VB: ZEDCamera.dll_RuntimeParameters.measure3DReferenceFrame
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_RuntimeParameters.measure3DReferenceFrame
        VB: sl.ZEDCamera.dll_RuntimeParameters.measure3DReferenceFrame
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: measure3DReferenceFrame
        path: ''
        startLine: 780
      summary: "\nProvides 3D measures (point cloud and normals) in the desired reference frame (default is REFERENCE_FRAME_CAMERA).\n"
      example: []
      syntax:
        content:
          CSharp: public REFERENCE_FRAME measure3DReferenceFrame
          VB: Public measure3DReferenceFrame As REFERENCE_FRAME
        return:
          type: sl.REFERENCE_FRAME
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_RuntimeParameters.enableDepth
      commentId: F:sl.ZEDCamera.dll_RuntimeParameters.enableDepth
      language: CSharp
      name:
        CSharp: enableDepth
        VB: enableDepth
      nameWithType:
        CSharp: ZEDCamera.dll_RuntimeParameters.enableDepth
        VB: ZEDCamera.dll_RuntimeParameters.enableDepth
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_RuntimeParameters.enableDepth
        VB: sl.ZEDCamera.dll_RuntimeParameters.enableDepth
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enableDepth
        path: ''
        startLine: 785
      summary: "\nDefines whether the depth map should be computed.\n"
      example: []
      syntax:
        content:
          CSharp: public bool enableDepth
          VB: Public enableDepth As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_RuntimeParameters.confidenceThreshold
      commentId: F:sl.ZEDCamera.dll_RuntimeParameters.confidenceThreshold
      language: CSharp
      name:
        CSharp: confidenceThreshold
        VB: confidenceThreshold
      nameWithType:
        CSharp: ZEDCamera.dll_RuntimeParameters.confidenceThreshold
        VB: ZEDCamera.dll_RuntimeParameters.confidenceThreshold
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_RuntimeParameters.confidenceThreshold
        VB: sl.ZEDCamera.dll_RuntimeParameters.confidenceThreshold
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: confidenceThreshold
        path: ''
        startLine: 789
      summary: "\nDefines the confidence threshold for the depth. Based on stereo matching score.\n"
      example: []
      syntax:
        content:
          CSharp: public int confidenceThreshold
          VB: Public confidenceThreshold As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_RuntimeParameters.textureConfidenceThreshold
      commentId: F:sl.ZEDCamera.dll_RuntimeParameters.textureConfidenceThreshold
      language: CSharp
      name:
        CSharp: textureConfidenceThreshold
        VB: textureConfidenceThreshold
      nameWithType:
        CSharp: ZEDCamera.dll_RuntimeParameters.textureConfidenceThreshold
        VB: ZEDCamera.dll_RuntimeParameters.textureConfidenceThreshold
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_RuntimeParameters.textureConfidenceThreshold
        VB: sl.ZEDCamera.dll_RuntimeParameters.textureConfidenceThreshold
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: textureConfidenceThreshold
        path: ''
        startLine: 793
      summary: "\nDefines texture confidence threshold for the depth. Based on textureness confidence. \n"
      example: []
      syntax:
        content:
          CSharp: public int textureConfidenceThreshold
          VB: Public textureConfidenceThreshold As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDCamera.dll_RuntimeParameters.#ctor(sl.RuntimeParameters)
      commentId: M:sl.ZEDCamera.dll_RuntimeParameters.#ctor(sl.RuntimeParameters)
      language: CSharp
      name:
        CSharp: dll_RuntimeParameters(RuntimeParameters)
        VB: dll_RuntimeParameters(RuntimeParameters)
      nameWithType:
        CSharp: ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters(RuntimeParameters)
        VB: ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters(RuntimeParameters)
      qualifiedName:
        CSharp: sl.ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters(sl.RuntimeParameters)
        VB: sl.ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters(sl.RuntimeParameters)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 798
      summary: "\nCopy constructor.\n"
      example: []
      syntax:
        content:
          CSharp: public dll_RuntimeParameters(RuntimeParameters rt)
          VB: Public Sub New(rt As RuntimeParameters)
        parameters:
        - id: rt
          type: sl.RuntimeParameters
      overload: sl.ZEDCamera.dll_RuntimeParameters.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.ZEDCommon
    commentId: T:sl.ZEDCommon
    language: CSharp
    name:
      CSharp: ZEDCommon
      VB: ZEDCommon
    nameWithType:
      CSharp: ZEDCommon
      VB: ZEDCommon
    qualifiedName:
      CSharp: sl.ZEDCommon
      VB: sl.ZEDCommon
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ZEDCommon
      path: ''
      startLine: 2350
    syntax:
      content:
        CSharp: public class ZEDCommon
        VB: Public Class ZEDCommon
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: sl.ZEDCommon.NameDLL
      commentId: F:sl.ZEDCommon.NameDLL
      language: CSharp
      name:
        CSharp: NameDLL
        VB: NameDLL
      nameWithType:
        CSharp: ZEDCommon.NameDLL
        VB: ZEDCommon.NameDLL
      qualifiedName:
        CSharp: sl.ZEDCommon.NameDLL
        VB: sl.ZEDCommon.NameDLL
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NameDLL
        path: ''
        startLine: 2352
      syntax:
        content:
          CSharp: public const string NameDLL = "sl_zed_interface.dll"
          VB: Public Const NameDLL As String = "sl_zed_interface.dll"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.ZED_CAMERA_ID
    commentId: T:sl.ZED_CAMERA_ID
    language: CSharp
    name:
      CSharp: ZED_CAMERA_ID
      VB: ZED_CAMERA_ID
    nameWithType:
      CSharp: ZED_CAMERA_ID
      VB: ZED_CAMERA_ID
    qualifiedName:
      CSharp: sl.ZED_CAMERA_ID
      VB: sl.ZED_CAMERA_ID
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ZED_CAMERA_ID
      path: ''
      startLine: 2355
    syntax:
      content:
        CSharp: public enum ZED_CAMERA_ID
        VB: Public Enum ZED_CAMERA_ID
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.ZED_CAMERA_ID.CAMERA_ID_01
      commentId: F:sl.ZED_CAMERA_ID.CAMERA_ID_01
      language: CSharp
      name:
        CSharp: CAMERA_ID_01
        VB: CAMERA_ID_01
      nameWithType:
        CSharp: ZED_CAMERA_ID.CAMERA_ID_01
        VB: ZED_CAMERA_ID.CAMERA_ID_01
      qualifiedName:
        CSharp: sl.ZED_CAMERA_ID.CAMERA_ID_01
        VB: sl.ZED_CAMERA_ID.CAMERA_ID_01
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_ID_01
        path: ''
        startLine: 2357
      syntax:
        content:
          CSharp: CAMERA_ID_01 = 0
          VB: CAMERA_ID_01 = 0
        return:
          type: sl.ZED_CAMERA_ID
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZED_CAMERA_ID.CAMERA_ID_02
      commentId: F:sl.ZED_CAMERA_ID.CAMERA_ID_02
      language: CSharp
      name:
        CSharp: CAMERA_ID_02
        VB: CAMERA_ID_02
      nameWithType:
        CSharp: ZED_CAMERA_ID.CAMERA_ID_02
        VB: ZED_CAMERA_ID.CAMERA_ID_02
      qualifiedName:
        CSharp: sl.ZED_CAMERA_ID.CAMERA_ID_02
        VB: sl.ZED_CAMERA_ID.CAMERA_ID_02
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_ID_02
        path: ''
        startLine: 2358
      syntax:
        content:
          CSharp: CAMERA_ID_02 = 1
          VB: CAMERA_ID_02 = 1
        return:
          type: sl.ZED_CAMERA_ID
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZED_CAMERA_ID.CAMERA_ID_03
      commentId: F:sl.ZED_CAMERA_ID.CAMERA_ID_03
      language: CSharp
      name:
        CSharp: CAMERA_ID_03
        VB: CAMERA_ID_03
      nameWithType:
        CSharp: ZED_CAMERA_ID.CAMERA_ID_03
        VB: ZED_CAMERA_ID.CAMERA_ID_03
      qualifiedName:
        CSharp: sl.ZED_CAMERA_ID.CAMERA_ID_03
        VB: sl.ZED_CAMERA_ID.CAMERA_ID_03
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_ID_03
        path: ''
        startLine: 2359
      syntax:
        content:
          CSharp: CAMERA_ID_03 = 2
          VB: CAMERA_ID_03 = 2
        return:
          type: sl.ZED_CAMERA_ID
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZED_CAMERA_ID.CAMERA_ID_04
      commentId: F:sl.ZED_CAMERA_ID.CAMERA_ID_04
      language: CSharp
      name:
        CSharp: CAMERA_ID_04
        VB: CAMERA_ID_04
      nameWithType:
        CSharp: ZED_CAMERA_ID.CAMERA_ID_04
        VB: ZED_CAMERA_ID.CAMERA_ID_04
      qualifiedName:
        CSharp: sl.ZED_CAMERA_ID.CAMERA_ID_04
        VB: sl.ZED_CAMERA_ID.CAMERA_ID_04
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_ID_04
        path: ''
        startLine: 2360
      syntax:
        content:
          CSharp: CAMERA_ID_04 = 3
          VB: CAMERA_ID_04 = 3
        return:
          type: sl.ZED_CAMERA_ID
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.INPUT_TYPE
    commentId: T:sl.INPUT_TYPE
    language: CSharp
    name:
      CSharp: INPUT_TYPE
      VB: INPUT_TYPE
    nameWithType:
      CSharp: INPUT_TYPE
      VB: INPUT_TYPE
    qualifiedName:
      CSharp: sl.INPUT_TYPE
      VB: sl.INPUT_TYPE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: INPUT_TYPE
      path: ''
      startLine: 2364
    syntax:
      content:
        CSharp: public enum INPUT_TYPE
        VB: Public Enum INPUT_TYPE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.INPUT_TYPE.INPUT_TYPE_USB
      commentId: F:sl.INPUT_TYPE.INPUT_TYPE_USB
      language: CSharp
      name:
        CSharp: INPUT_TYPE_USB
        VB: INPUT_TYPE_USB
      nameWithType:
        CSharp: INPUT_TYPE.INPUT_TYPE_USB
        VB: INPUT_TYPE.INPUT_TYPE_USB
      qualifiedName:
        CSharp: sl.INPUT_TYPE.INPUT_TYPE_USB
        VB: sl.INPUT_TYPE.INPUT_TYPE_USB
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INPUT_TYPE_USB
        path: ''
        startLine: 2366
      syntax:
        content:
          CSharp: INPUT_TYPE_USB = 0
          VB: INPUT_TYPE_USB = 0
        return:
          type: sl.INPUT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.INPUT_TYPE.INPUT_TYPE_SVO
      commentId: F:sl.INPUT_TYPE.INPUT_TYPE_SVO
      language: CSharp
      name:
        CSharp: INPUT_TYPE_SVO
        VB: INPUT_TYPE_SVO
      nameWithType:
        CSharp: INPUT_TYPE.INPUT_TYPE_SVO
        VB: INPUT_TYPE.INPUT_TYPE_SVO
      qualifiedName:
        CSharp: sl.INPUT_TYPE.INPUT_TYPE_SVO
        VB: sl.INPUT_TYPE.INPUT_TYPE_SVO
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INPUT_TYPE_SVO
        path: ''
        startLine: 2367
      syntax:
        content:
          CSharp: INPUT_TYPE_SVO = 1
          VB: INPUT_TYPE_SVO = 1
        return:
          type: sl.INPUT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.INPUT_TYPE.INPUT_TYPE_STREAM
      commentId: F:sl.INPUT_TYPE.INPUT_TYPE_STREAM
      language: CSharp
      name:
        CSharp: INPUT_TYPE_STREAM
        VB: INPUT_TYPE_STREAM
      nameWithType:
        CSharp: INPUT_TYPE.INPUT_TYPE_STREAM
        VB: INPUT_TYPE.INPUT_TYPE_STREAM
      qualifiedName:
        CSharp: sl.INPUT_TYPE.INPUT_TYPE_STREAM
        VB: sl.INPUT_TYPE.INPUT_TYPE_STREAM
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INPUT_TYPE_STREAM
        path: ''
        startLine: 2368
      syntax:
        content:
          CSharp: INPUT_TYPE_STREAM = 2
          VB: INPUT_TYPE_STREAM = 2
        return:
          type: sl.INPUT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.Constant
    commentId: T:sl.Constant
    language: CSharp
    name:
      CSharp: Constant
      VB: Constant
    nameWithType:
      CSharp: Constant
      VB: Constant
    qualifiedName:
      CSharp: sl.Constant
      VB: sl.Constant
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: Constant
      path: ''
      startLine: 2374
    summary: "\nConstant for plugin. Should not be changed\n"
    example: []
    syntax:
      content:
        CSharp: public enum Constant
        VB: Public Enum Constant
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.Constant.MAX_CAMERA_PLUGIN
      commentId: F:sl.Constant.MAX_CAMERA_PLUGIN
      language: CSharp
      name:
        CSharp: MAX_CAMERA_PLUGIN
        VB: MAX_CAMERA_PLUGIN
      nameWithType:
        CSharp: Constant.MAX_CAMERA_PLUGIN
        VB: Constant.MAX_CAMERA_PLUGIN
      qualifiedName:
        CSharp: sl.Constant.MAX_CAMERA_PLUGIN
        VB: sl.Constant.MAX_CAMERA_PLUGIN
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAX_CAMERA_PLUGIN
        path: ''
        startLine: 2376
      syntax:
        content:
          CSharp: MAX_CAMERA_PLUGIN = 4
          VB: MAX_CAMERA_PLUGIN = 4
        return:
          type: sl.Constant
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.Constant.PLANE_DISTANCE
      commentId: F:sl.Constant.PLANE_DISTANCE
      language: CSharp
      name:
        CSharp: PLANE_DISTANCE
        VB: PLANE_DISTANCE
      nameWithType:
        CSharp: Constant.PLANE_DISTANCE
        VB: Constant.PLANE_DISTANCE
      qualifiedName:
        CSharp: sl.Constant.PLANE_DISTANCE
        VB: sl.Constant.PLANE_DISTANCE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: PLANE_DISTANCE
        path: ''
        startLine: 2377
      syntax:
        content:
          CSharp: PLANE_DISTANCE = 10
          VB: PLANE_DISTANCE = 10
        return:
          type: sl.Constant
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.Constant.MAX_OBJECTS
      commentId: F:sl.Constant.MAX_OBJECTS
      language: CSharp
      name:
        CSharp: MAX_OBJECTS
        VB: MAX_OBJECTS
      nameWithType:
        CSharp: Constant.MAX_OBJECTS
        VB: Constant.MAX_OBJECTS
      qualifiedName:
        CSharp: sl.Constant.MAX_OBJECTS
        VB: sl.Constant.MAX_OBJECTS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAX_OBJECTS
        path: ''
        startLine: 2378
      syntax:
        content:
          CSharp: MAX_OBJECTS = 200
          VB: MAX_OBJECTS = 200
        return:
          type: sl.Constant
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.Matrix3x3
    commentId: T:sl.Matrix3x3
    language: CSharp
    name:
      CSharp: Matrix3x3
      VB: Matrix3x3
    nameWithType:
      CSharp: Matrix3x3
      VB: Matrix3x3
    qualifiedName:
      CSharp: sl.Matrix3x3
      VB: sl.Matrix3x3
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: Matrix3x3
      path: ''
      startLine: 2385
    summary: "\nHolds a 3x3 matrix that can be marshaled between the ZED\nUnity wrapper and C# scripts.\n"
    example: []
    syntax:
      content:
        CSharp: public struct Matrix3x3
        VB: Public Structure Matrix3x3
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.Matrix3x3.m
      commentId: F:sl.Matrix3x3.m
      language: CSharp
      name:
        CSharp: m
        VB: m
      nameWithType:
        CSharp: Matrix3x3.m
        VB: Matrix3x3.m
      qualifiedName:
        CSharp: sl.Matrix3x3.m
        VB: sl.Matrix3x3.m
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: m
        path: ''
        startLine: 2388
      syntax:
        content:
          CSharp: public float[] m
          VB: Public m As Single()
        return:
          type: System.Single[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.Resolution
    commentId: T:sl.Resolution
    language: CSharp
    name:
      CSharp: Resolution
      VB: Resolution
    nameWithType:
      CSharp: Resolution
      VB: Resolution
    qualifiedName:
      CSharp: sl.Resolution
      VB: sl.Resolution
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: Resolution
      path: ''
      startLine: 2395
    summary: "\nHolds a camera resolution as two pointers (for height and width) for easy\npassing back and forth to the ZED Unity wrapper.\n"
    example: []
    syntax:
      content:
        CSharp: public struct Resolution
        VB: Public Structure Resolution
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.Resolution.#ctor(System.UInt32,System.UInt32)
      commentId: M:sl.Resolution.#ctor(System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: Resolution(UInt32, UInt32)
        VB: Resolution(UInt32, UInt32)
      nameWithType:
        CSharp: Resolution.Resolution(UInt32, UInt32)
        VB: Resolution.Resolution(UInt32, UInt32)
      qualifiedName:
        CSharp: sl.Resolution.Resolution(System.UInt32, System.UInt32)
        VB: sl.Resolution.Resolution(System.UInt32, System.UInt32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 2402
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public Resolution(uint width, uint height)
          VB: Public Sub New(width As UInteger, height As UInteger)
        parameters:
        - id: width
          type: System.UInt32
          description: ''
        - id: height
          type: System.UInt32
          description: ''
      overload: sl.Resolution.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Resolution.width
      commentId: F:sl.Resolution.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: Resolution.width
        VB: Resolution.width
      qualifiedName:
        CSharp: sl.Resolution.width
        VB: sl.Resolution.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: width
        path: ''
        startLine: 2408
      syntax:
        content:
          CSharp: public UIntPtr width
          VB: Public width As UIntPtr
        return:
          type: System.UIntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Resolution.height
      commentId: F:sl.Resolution.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: Resolution.height
        VB: Resolution.height
      qualifiedName:
        CSharp: sl.Resolution.height
        VB: sl.Resolution.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: height
        path: ''
        startLine: 2409
      syntax:
        content:
          CSharp: public UIntPtr height
          VB: Public height As UIntPtr
        return:
          type: System.UIntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.Pose
    commentId: T:sl.Pose
    language: CSharp
    name:
      CSharp: Pose
      VB: Pose
    nameWithType:
      CSharp: Pose
      VB: Pose
    qualifiedName:
      CSharp: sl.Pose
      VB: sl.Pose
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: Pose
      path: ''
      startLine: 2417
    summary: "\nPose structure with data on timing and validity in addition to\nposition and rotation.\n"
    example: []
    syntax:
      content:
        CSharp: public struct Pose
        VB: Public Structure Pose
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.Pose.valid
      commentId: F:sl.Pose.valid
      language: CSharp
      name:
        CSharp: valid
        VB: valid
      nameWithType:
        CSharp: Pose.valid
        VB: Pose.valid
      qualifiedName:
        CSharp: sl.Pose.valid
        VB: sl.Pose.valid
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: valid
        path: ''
        startLine: 2420
      syntax:
        content:
          CSharp: public bool valid
          VB: Public valid As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Pose.timestamp
      commentId: F:sl.Pose.timestamp
      language: CSharp
      name:
        CSharp: timestamp
        VB: timestamp
      nameWithType:
        CSharp: Pose.timestamp
        VB: Pose.timestamp
      qualifiedName:
        CSharp: sl.Pose.timestamp
        VB: sl.Pose.timestamp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: timestamp
        path: ''
        startLine: 2421
      syntax:
        content:
          CSharp: public ulong timestamp
          VB: Public timestamp As ULong
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Pose.rotation
      commentId: F:sl.Pose.rotation
      language: CSharp
      name:
        CSharp: rotation
        VB: rotation
      nameWithType:
        CSharp: Pose.rotation
        VB: Pose.rotation
      qualifiedName:
        CSharp: sl.Pose.rotation
        VB: sl.Pose.rotation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: rotation
        path: ''
        startLine: 2422
      syntax:
        content:
          CSharp: public Quaternion rotation
          VB: Public rotation As Quaternion
        return:
          type: Quaternion
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Pose.translation
      commentId: F:sl.Pose.translation
      language: CSharp
      name:
        CSharp: translation
        VB: translation
      nameWithType:
        CSharp: Pose.translation
        VB: Pose.translation
      qualifiedName:
        CSharp: sl.Pose.translation
        VB: sl.Pose.translation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: translation
        path: ''
        startLine: 2423
      syntax:
        content:
          CSharp: public Vector3 translation
          VB: Public translation As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Pose.pose_confidence
      commentId: F:sl.Pose.pose_confidence
      language: CSharp
      name:
        CSharp: pose_confidence
        VB: pose_confidence
      nameWithType:
        CSharp: Pose.pose_confidence
        VB: Pose.pose_confidence
      qualifiedName:
        CSharp: sl.Pose.pose_confidence
        VB: sl.Pose.pose_confidence
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: pose_confidence
        path: ''
        startLine: 2424
      syntax:
        content:
          CSharp: public int pose_confidence
          VB: Public pose_confidence As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.iRect
    commentId: T:sl.iRect
    language: CSharp
    name:
      CSharp: iRect
      VB: iRect
    nameWithType:
      CSharp: iRect
      VB: iRect
    qualifiedName:
      CSharp: sl.iRect
      VB: sl.iRect
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: iRect
      path: ''
      startLine: 2431
    summary: "\nRect structure to define a rectangle or a ROI in pixels\nUse to set ROI target for AEC/AGC\n"
    example: []
    syntax:
      content:
        CSharp: public struct iRect
        VB: Public Structure iRect
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.iRect.x
      commentId: F:sl.iRect.x
      language: CSharp
      name:
        CSharp: x
        VB: x
      nameWithType:
        CSharp: iRect.x
        VB: iRect.x
      qualifiedName:
        CSharp: sl.iRect.x
        VB: sl.iRect.x
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: x
        path: ''
        startLine: 2434
      syntax:
        content:
          CSharp: public int x
          VB: Public x As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.iRect.y
      commentId: F:sl.iRect.y
      language: CSharp
      name:
        CSharp: y
        VB: y
      nameWithType:
        CSharp: iRect.y
        VB: iRect.y
      qualifiedName:
        CSharp: sl.iRect.y
        VB: sl.iRect.y
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: y
        path: ''
        startLine: 2435
      syntax:
        content:
          CSharp: public int y
          VB: Public y As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.iRect.width
      commentId: F:sl.iRect.width
      language: CSharp
      name:
        CSharp: width
        VB: width
      nameWithType:
        CSharp: iRect.width
        VB: iRect.width
      qualifiedName:
        CSharp: sl.iRect.width
        VB: sl.iRect.width
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: width
        path: ''
        startLine: 2436
      syntax:
        content:
          CSharp: public int width
          VB: Public width As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.iRect.height
      commentId: F:sl.iRect.height
      language: CSharp
      name:
        CSharp: height
        VB: height
      nameWithType:
        CSharp: iRect.height
        VB: iRect.height
      qualifiedName:
        CSharp: sl.iRect.height
        VB: sl.iRect.height
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: height
        path: ''
        startLine: 2437
      syntax:
        content:
          CSharp: public int height
          VB: Public height As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.ImuData
    commentId: T:sl.ImuData
    language: CSharp
    name:
      CSharp: ImuData
      VB: ImuData
    nameWithType:
      CSharp: ImuData
      VB: ImuData
    qualifiedName:
      CSharp: sl.ImuData
      VB: sl.ImuData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ImuData
      path: ''
      startLine: 2443
    summary: "\nFull IMU data structure.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ImuData
        VB: Public Structure ImuData
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.ImuData.available
      commentId: F:sl.ImuData.available
      language: CSharp
      name:
        CSharp: available
        VB: available
      nameWithType:
        CSharp: ImuData.available
        VB: ImuData.available
      qualifiedName:
        CSharp: sl.ImuData.available
        VB: sl.ImuData.available
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: available
        path: ''
        startLine: 2449
      summary: "\nIndicates if imu data is available\n"
      example: []
      syntax:
        content:
          CSharp: public bool available
          VB: Public available As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.timestamp
      commentId: F:sl.ImuData.timestamp
      language: CSharp
      name:
        CSharp: timestamp
        VB: timestamp
      nameWithType:
        CSharp: ImuData.timestamp
        VB: ImuData.timestamp
      qualifiedName:
        CSharp: sl.ImuData.timestamp
        VB: sl.ImuData.timestamp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: timestamp
        path: ''
        startLine: 2453
      summary: "\nIMU Data timestamp in ns\n"
      example: []
      syntax:
        content:
          CSharp: public ulong timestamp
          VB: Public timestamp As ULong
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.angularVelocity
      commentId: F:sl.ImuData.angularVelocity
      language: CSharp
      name:
        CSharp: angularVelocity
        VB: angularVelocity
      nameWithType:
        CSharp: ImuData.angularVelocity
        VB: ImuData.angularVelocity
      qualifiedName:
        CSharp: sl.ImuData.angularVelocity
        VB: sl.ImuData.angularVelocity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: angularVelocity
        path: ''
        startLine: 2457
      summary: "\nGyroscope calibrated data in degrees/second.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 angularVelocity
          VB: Public angularVelocity As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.linearAcceleration
      commentId: F:sl.ImuData.linearAcceleration
      language: CSharp
      name:
        CSharp: linearAcceleration
        VB: linearAcceleration
      nameWithType:
        CSharp: ImuData.linearAcceleration
        VB: ImuData.linearAcceleration
      qualifiedName:
        CSharp: sl.ImuData.linearAcceleration
        VB: sl.ImuData.linearAcceleration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: linearAcceleration
        path: ''
        startLine: 2461
      summary: "\nAccelerometer calibrated data in m/s².\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 linearAcceleration
          VB: Public linearAcceleration As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.angularVelocityUncalibrated
      commentId: F:sl.ImuData.angularVelocityUncalibrated
      language: CSharp
      name:
        CSharp: angularVelocityUncalibrated
        VB: angularVelocityUncalibrated
      nameWithType:
        CSharp: ImuData.angularVelocityUncalibrated
        VB: ImuData.angularVelocityUncalibrated
      qualifiedName:
        CSharp: sl.ImuData.angularVelocityUncalibrated
        VB: sl.ImuData.angularVelocityUncalibrated
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: angularVelocityUncalibrated
        path: ''
        startLine: 2465
      summary: "\nGyroscope raw/uncalibrated data in degrees/second.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 angularVelocityUncalibrated
          VB: Public angularVelocityUncalibrated As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.linearAccelerationUncalibrated
      commentId: F:sl.ImuData.linearAccelerationUncalibrated
      language: CSharp
      name:
        CSharp: linearAccelerationUncalibrated
        VB: linearAccelerationUncalibrated
      nameWithType:
        CSharp: ImuData.linearAccelerationUncalibrated
        VB: ImuData.linearAccelerationUncalibrated
      qualifiedName:
        CSharp: sl.ImuData.linearAccelerationUncalibrated
        VB: sl.ImuData.linearAccelerationUncalibrated
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: linearAccelerationUncalibrated
        path: ''
        startLine: 2469
      summary: "\nAccelerometer raw/uncalibrated data in m/s².\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 linearAccelerationUncalibrated
          VB: Public linearAccelerationUncalibrated As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.fusedOrientation
      commentId: F:sl.ImuData.fusedOrientation
      language: CSharp
      name:
        CSharp: fusedOrientation
        VB: fusedOrientation
      nameWithType:
        CSharp: ImuData.fusedOrientation
        VB: ImuData.fusedOrientation
      qualifiedName:
        CSharp: sl.ImuData.fusedOrientation
        VB: sl.ImuData.fusedOrientation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: fusedOrientation
        path: ''
        startLine: 2473
      summary: "\nOrientation from gyro/accelerator fusion.\n"
      example: []
      syntax:
        content:
          CSharp: public Quaternion fusedOrientation
          VB: Public fusedOrientation As Quaternion
        return:
          type: Quaternion
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.orientationCovariance
      commentId: F:sl.ImuData.orientationCovariance
      language: CSharp
      name:
        CSharp: orientationCovariance
        VB: orientationCovariance
      nameWithType:
        CSharp: ImuData.orientationCovariance
        VB: ImuData.orientationCovariance
      qualifiedName:
        CSharp: sl.ImuData.orientationCovariance
        VB: sl.ImuData.orientationCovariance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: orientationCovariance
        path: ''
        startLine: 2477
      summary: "\nCovariance matrix of the quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public Matrix3x3 orientationCovariance
          VB: Public orientationCovariance As Matrix3x3
        return:
          type: sl.Matrix3x3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.angularVelocityCovariance
      commentId: F:sl.ImuData.angularVelocityCovariance
      language: CSharp
      name:
        CSharp: angularVelocityCovariance
        VB: angularVelocityCovariance
      nameWithType:
        CSharp: ImuData.angularVelocityCovariance
        VB: ImuData.angularVelocityCovariance
      qualifiedName:
        CSharp: sl.ImuData.angularVelocityCovariance
        VB: sl.ImuData.angularVelocityCovariance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: angularVelocityCovariance
        path: ''
        startLine: 2481
      summary: "\nGyroscope raw data covariance matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public Matrix3x3 angularVelocityCovariance
          VB: Public angularVelocityCovariance As Matrix3x3
        return:
          type: sl.Matrix3x3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ImuData.linearAccelerationCovariance
      commentId: F:sl.ImuData.linearAccelerationCovariance
      language: CSharp
      name:
        CSharp: linearAccelerationCovariance
        VB: linearAccelerationCovariance
      nameWithType:
        CSharp: ImuData.linearAccelerationCovariance
        VB: ImuData.linearAccelerationCovariance
      qualifiedName:
        CSharp: sl.ImuData.linearAccelerationCovariance
        VB: sl.ImuData.linearAccelerationCovariance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: linearAccelerationCovariance
        path: ''
        startLine: 2485
      summary: "\nAccelerometer raw data covariance matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public Matrix3x3 linearAccelerationCovariance
          VB: Public linearAccelerationCovariance As Matrix3x3
        return:
          type: sl.Matrix3x3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.BarometerData
    commentId: T:sl.BarometerData
    language: CSharp
    name:
      CSharp: BarometerData
      VB: BarometerData
    nameWithType:
      CSharp: BarometerData
      VB: BarometerData
    qualifiedName:
      CSharp: sl.BarometerData
      VB: sl.BarometerData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: BarometerData
      path: ''
      startLine: 2489
    syntax:
      content:
        CSharp: public struct BarometerData
        VB: Public Structure BarometerData
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.BarometerData.available
      commentId: F:sl.BarometerData.available
      language: CSharp
      name:
        CSharp: available
        VB: available
      nameWithType:
        CSharp: BarometerData.available
        VB: BarometerData.available
      qualifiedName:
        CSharp: sl.BarometerData.available
        VB: sl.BarometerData.available
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: available
        path: ''
        startLine: 2495
      summary: "\nIndicates if mag data is available\n"
      example: []
      syntax:
        content:
          CSharp: public bool available
          VB: Public available As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.BarometerData.timestamp
      commentId: F:sl.BarometerData.timestamp
      language: CSharp
      name:
        CSharp: timestamp
        VB: timestamp
      nameWithType:
        CSharp: BarometerData.timestamp
        VB: BarometerData.timestamp
      qualifiedName:
        CSharp: sl.BarometerData.timestamp
        VB: sl.BarometerData.timestamp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: timestamp
        path: ''
        startLine: 2499
      summary: "\nmag Data timestamp in ns\n"
      example: []
      syntax:
        content:
          CSharp: public ulong timestamp
          VB: Public timestamp As ULong
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.BarometerData.pressure
      commentId: F:sl.BarometerData.pressure
      language: CSharp
      name:
        CSharp: pressure
        VB: pressure
      nameWithType:
        CSharp: BarometerData.pressure
        VB: BarometerData.pressure
      qualifiedName:
        CSharp: sl.BarometerData.pressure
        VB: sl.BarometerData.pressure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: pressure
        path: ''
        startLine: 2503
      summary: "\nBarometer ambient air pressure in hPa\n"
      example: []
      syntax:
        content:
          CSharp: public float pressure
          VB: Public pressure As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.BarometerData.relativeAltitude
      commentId: F:sl.BarometerData.relativeAltitude
      language: CSharp
      name:
        CSharp: relativeAltitude
        VB: relativeAltitude
      nameWithType:
        CSharp: BarometerData.relativeAltitude
        VB: BarometerData.relativeAltitude
      qualifiedName:
        CSharp: sl.BarometerData.relativeAltitude
        VB: sl.BarometerData.relativeAltitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: relativeAltitude
        path: ''
        startLine: 2507
      summary: "\nRelative altitude from first camera position\n"
      example: []
      syntax:
        content:
          CSharp: public float relativeAltitude
          VB: Public relativeAltitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.MagnetometerData
    commentId: T:sl.MagnetometerData
    language: CSharp
    name:
      CSharp: MagnetometerData
      VB: MagnetometerData
    nameWithType:
      CSharp: MagnetometerData
      VB: MagnetometerData
    qualifiedName:
      CSharp: sl.MagnetometerData
      VB: sl.MagnetometerData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: MagnetometerData
      path: ''
      startLine: 2511
    syntax:
      content:
        CSharp: public struct MagnetometerData
        VB: Public Structure MagnetometerData
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.MagnetometerData.available
      commentId: F:sl.MagnetometerData.available
      language: CSharp
      name:
        CSharp: available
        VB: available
      nameWithType:
        CSharp: MagnetometerData.available
        VB: MagnetometerData.available
      qualifiedName:
        CSharp: sl.MagnetometerData.available
        VB: sl.MagnetometerData.available
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: available
        path: ''
        startLine: 2517
      summary: "\nIndicates if mag data is available\n"
      example: []
      syntax:
        content:
          CSharp: public bool available
          VB: Public available As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.MagnetometerData.timestamp
      commentId: F:sl.MagnetometerData.timestamp
      language: CSharp
      name:
        CSharp: timestamp
        VB: timestamp
      nameWithType:
        CSharp: MagnetometerData.timestamp
        VB: MagnetometerData.timestamp
      qualifiedName:
        CSharp: sl.MagnetometerData.timestamp
        VB: sl.MagnetometerData.timestamp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: timestamp
        path: ''
        startLine: 2521
      summary: "\nmag Data timestamp in ns\n"
      example: []
      syntax:
        content:
          CSharp: public ulong timestamp
          VB: Public timestamp As ULong
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.MagnetometerData.magneticField
      commentId: F:sl.MagnetometerData.magneticField
      language: CSharp
      name:
        CSharp: magneticField
        VB: magneticField
      nameWithType:
        CSharp: MagnetometerData.magneticField
        VB: MagnetometerData.magneticField
      qualifiedName:
        CSharp: sl.MagnetometerData.magneticField
        VB: sl.MagnetometerData.magneticField
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: magneticField
        path: ''
        startLine: 2526
      syntax:
        content:
          CSharp: public Vector3 magneticField
          VB: Public magneticField As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.MagnetometerData.magneticFieldUncalibrated
      commentId: F:sl.MagnetometerData.magneticFieldUncalibrated
      language: CSharp
      name:
        CSharp: magneticFieldUncalibrated
        VB: magneticFieldUncalibrated
      nameWithType:
        CSharp: MagnetometerData.magneticFieldUncalibrated
        VB: MagnetometerData.magneticFieldUncalibrated
      qualifiedName:
        CSharp: sl.MagnetometerData.magneticFieldUncalibrated
        VB: sl.MagnetometerData.magneticFieldUncalibrated
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: magneticFieldUncalibrated
        path: ''
        startLine: 2530
      summary: "\nMagnetic field raw values in uT\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 magneticFieldUncalibrated
          VB: Public magneticFieldUncalibrated As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.TemperatureSensorData
    commentId: T:sl.TemperatureSensorData
    language: CSharp
    name:
      CSharp: TemperatureSensorData
      VB: TemperatureSensorData
    nameWithType:
      CSharp: TemperatureSensorData
      VB: TemperatureSensorData
    qualifiedName:
      CSharp: sl.TemperatureSensorData
      VB: sl.TemperatureSensorData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: TemperatureSensorData
      path: ''
      startLine: 2534
    syntax:
      content:
        CSharp: public struct TemperatureSensorData
        VB: Public Structure TemperatureSensorData
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.TemperatureSensorData.imu_temp
      commentId: F:sl.TemperatureSensorData.imu_temp
      language: CSharp
      name:
        CSharp: imu_temp
        VB: imu_temp
      nameWithType:
        CSharp: TemperatureSensorData.imu_temp
        VB: TemperatureSensorData.imu_temp
      qualifiedName:
        CSharp: sl.TemperatureSensorData.imu_temp
        VB: sl.TemperatureSensorData.imu_temp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: imu_temp
        path: ''
        startLine: 2540
      summary: "\nTemperature from IMU device ( -100 if not available)\n"
      example: []
      syntax:
        content:
          CSharp: public float imu_temp
          VB: Public imu_temp As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.TemperatureSensorData.barometer_temp
      commentId: F:sl.TemperatureSensorData.barometer_temp
      language: CSharp
      name:
        CSharp: barometer_temp
        VB: barometer_temp
      nameWithType:
        CSharp: TemperatureSensorData.barometer_temp
        VB: TemperatureSensorData.barometer_temp
      qualifiedName:
        CSharp: sl.TemperatureSensorData.barometer_temp
        VB: sl.TemperatureSensorData.barometer_temp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: barometer_temp
        path: ''
        startLine: 2544
      summary: "\nTemperature from Barometer device ( -100 if not available)\n"
      example: []
      syntax:
        content:
          CSharp: public float barometer_temp
          VB: Public barometer_temp As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.TemperatureSensorData.onboard_left_temp
      commentId: F:sl.TemperatureSensorData.onboard_left_temp
      language: CSharp
      name:
        CSharp: onboard_left_temp
        VB: onboard_left_temp
      nameWithType:
        CSharp: TemperatureSensorData.onboard_left_temp
        VB: TemperatureSensorData.onboard_left_temp
      qualifiedName:
        CSharp: sl.TemperatureSensorData.onboard_left_temp
        VB: sl.TemperatureSensorData.onboard_left_temp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: onboard_left_temp
        path: ''
        startLine: 2548
      summary: "\nTemperature from Onboard left analog temperature sensor ( -100 if not available)\n"
      example: []
      syntax:
        content:
          CSharp: public float onboard_left_temp
          VB: Public onboard_left_temp As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.TemperatureSensorData.onboard_right_temp
      commentId: F:sl.TemperatureSensorData.onboard_right_temp
      language: CSharp
      name:
        CSharp: onboard_right_temp
        VB: onboard_right_temp
      nameWithType:
        CSharp: TemperatureSensorData.onboard_right_temp
        VB: TemperatureSensorData.onboard_right_temp
      qualifiedName:
        CSharp: sl.TemperatureSensorData.onboard_right_temp
        VB: sl.TemperatureSensorData.onboard_right_temp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: onboard_right_temp
        path: ''
        startLine: 2552
      summary: "\nTemperature from Onboard right analog temperature sensor ( -100 if not available)\n"
      example: []
      syntax:
        content:
          CSharp: public float onboard_right_temp
          VB: Public onboard_right_temp As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.SensorsData
    commentId: T:sl.SensorsData
    language: CSharp
    name:
      CSharp: SensorsData
      VB: SensorsData
    nameWithType:
      CSharp: SensorsData
      VB: SensorsData
    qualifiedName:
      CSharp: sl.SensorsData
      VB: sl.SensorsData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: SensorsData
      path: ''
      startLine: 2555
    syntax:
      content:
        CSharp: public struct SensorsData
        VB: Public Structure SensorsData
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.SensorsData.imu
      commentId: F:sl.SensorsData.imu
      language: CSharp
      name:
        CSharp: imu
        VB: imu
      nameWithType:
        CSharp: SensorsData.imu
        VB: SensorsData.imu
      qualifiedName:
        CSharp: sl.SensorsData.imu
        VB: sl.SensorsData.imu
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: imu
        path: ''
        startLine: 2561
      summary: "\nContains Imu Data\n"
      example: []
      syntax:
        content:
          CSharp: public ImuData imu
          VB: Public imu As ImuData
        return:
          type: sl.ImuData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.SensorsData.barometer
      commentId: F:sl.SensorsData.barometer
      language: CSharp
      name:
        CSharp: barometer
        VB: barometer
      nameWithType:
        CSharp: SensorsData.barometer
        VB: SensorsData.barometer
      qualifiedName:
        CSharp: sl.SensorsData.barometer
        VB: sl.SensorsData.barometer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: barometer
        path: ''
        startLine: 2565
      summary: "\nContains Barometer Data\n"
      example: []
      syntax:
        content:
          CSharp: public BarometerData barometer
          VB: Public barometer As BarometerData
        return:
          type: sl.BarometerData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.SensorsData.magnetometer
      commentId: F:sl.SensorsData.magnetometer
      language: CSharp
      name:
        CSharp: magnetometer
        VB: magnetometer
      nameWithType:
        CSharp: SensorsData.magnetometer
        VB: SensorsData.magnetometer
      qualifiedName:
        CSharp: sl.SensorsData.magnetometer
        VB: sl.SensorsData.magnetometer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: magnetometer
        path: ''
        startLine: 2569
      summary: "\nContains Mag Data\n"
      example: []
      syntax:
        content:
          CSharp: public MagnetometerData magnetometer
          VB: Public magnetometer As MagnetometerData
        return:
          type: sl.MagnetometerData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.SensorsData.temperatureSensor
      commentId: F:sl.SensorsData.temperatureSensor
      language: CSharp
      name:
        CSharp: temperatureSensor
        VB: temperatureSensor
      nameWithType:
        CSharp: SensorsData.temperatureSensor
        VB: SensorsData.temperatureSensor
      qualifiedName:
        CSharp: sl.SensorsData.temperatureSensor
        VB: sl.SensorsData.temperatureSensor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: temperatureSensor
        path: ''
        startLine: 2573
      summary: "\nContains Temperature Data\n"
      example: []
      syntax:
        content:
          CSharp: public TemperatureSensorData temperatureSensor
          VB: Public temperatureSensor As TemperatureSensorData
        return:
          type: sl.TemperatureSensorData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.SensorsData.camera_moving_state
      commentId: F:sl.SensorsData.camera_moving_state
      language: CSharp
      name:
        CSharp: camera_moving_state
        VB: camera_moving_state
      nameWithType:
        CSharp: SensorsData.camera_moving_state
        VB: SensorsData.camera_moving_state
      qualifiedName:
        CSharp: sl.SensorsData.camera_moving_state
        VB: sl.SensorsData.camera_moving_state
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: camera_moving_state
        path: ''
        startLine: 2580
      summary: "\nIndicated if camera is :\n-> Static : 0\n-> Moving : 1\n-> Falling : 2\n"
      example: []
      syntax:
        content:
          CSharp: public int camera_moving_state
          VB: Public camera_moving_state As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.SensorsData.image_sync_val
      commentId: F:sl.SensorsData.image_sync_val
      language: CSharp
      name:
        CSharp: image_sync_val
        VB: image_sync_val
      nameWithType:
        CSharp: SensorsData.image_sync_val
        VB: SensorsData.image_sync_val
      qualifiedName:
        CSharp: sl.SensorsData.image_sync_val
        VB: sl.SensorsData.image_sync_val
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: image_sync_val
        path: ''
        startLine: 2584
      summary: "\nIndicates if the current sensors data is sync to the current image (>=1). Otherwise, value will be 0.\n"
      example: []
      syntax:
        content:
          CSharp: public int image_sync_val
          VB: Public image_sync_val As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.CameraParameters
    commentId: T:sl.CameraParameters
    language: CSharp
    name:
      CSharp: CameraParameters
      VB: CameraParameters
    nameWithType:
      CSharp: CameraParameters
      VB: CameraParameters
    qualifiedName:
      CSharp: sl.CameraParameters
      VB: sl.CameraParameters
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: CameraParameters
      path: ''
      startLine: 2594
    summary: "\nCalibration information for an individual sensor on the ZED (left or right). "
    remarks: "For more information, see:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/structsl_1_1CameraParameters.html "
    example: []
    syntax:
      content:
        CSharp: public struct CameraParameters
        VB: Public Structure CameraParameters
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.CameraParameters.fx
      commentId: F:sl.CameraParameters.fx
      language: CSharp
      name:
        CSharp: fx
        VB: fx
      nameWithType:
        CSharp: CameraParameters.fx
        VB: CameraParameters.fx
      qualifiedName:
        CSharp: sl.CameraParameters.fx
        VB: sl.CameraParameters.fx
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: fx
        path: ''
        startLine: 2600
      summary: "\nFocal X.\n"
      example: []
      syntax:
        content:
          CSharp: public float fx
          VB: Public fx As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.fy
      commentId: F:sl.CameraParameters.fy
      language: CSharp
      name:
        CSharp: fy
        VB: fy
      nameWithType:
        CSharp: CameraParameters.fy
        VB: CameraParameters.fy
      qualifiedName:
        CSharp: sl.CameraParameters.fy
        VB: sl.CameraParameters.fy
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: fy
        path: ''
        startLine: 2604
      summary: "\nFocal Y.\n"
      example: []
      syntax:
        content:
          CSharp: public float fy
          VB: Public fy As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.cx
      commentId: F:sl.CameraParameters.cx
      language: CSharp
      name:
        CSharp: cx
        VB: cx
      nameWithType:
        CSharp: CameraParameters.cx
        VB: CameraParameters.cx
      qualifiedName:
        CSharp: sl.CameraParameters.cx
        VB: sl.CameraParameters.cx
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cx
        path: ''
        startLine: 2608
      summary: "\nOptical center X.\n"
      example: []
      syntax:
        content:
          CSharp: public float cx
          VB: Public cx As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.cy
      commentId: F:sl.CameraParameters.cy
      language: CSharp
      name:
        CSharp: cy
        VB: cy
      nameWithType:
        CSharp: CameraParameters.cy
        VB: CameraParameters.cy
      qualifiedName:
        CSharp: sl.CameraParameters.cy
        VB: sl.CameraParameters.cy
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cy
        path: ''
        startLine: 2612
      summary: "\nOptical center Y.\n"
      example: []
      syntax:
        content:
          CSharp: public float cy
          VB: Public cy As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.disto
      commentId: F:sl.CameraParameters.disto
      language: CSharp
      name:
        CSharp: disto
        VB: disto
      nameWithType:
        CSharp: CameraParameters.disto
        VB: CameraParameters.disto
      qualifiedName:
        CSharp: sl.CameraParameters.disto
        VB: sl.CameraParameters.disto
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: disto
        path: ''
        startLine: 2618
      summary: "\nDistortion coefficients.\n"
      example: []
      syntax:
        content:
          CSharp: public double[] disto
          VB: Public disto As Double()
        return:
          type: System.Double[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.vFOV
      commentId: F:sl.CameraParameters.vFOV
      language: CSharp
      name:
        CSharp: vFOV
        VB: vFOV
      nameWithType:
        CSharp: CameraParameters.vFOV
        VB: CameraParameters.vFOV
      qualifiedName:
        CSharp: sl.CameraParameters.vFOV
        VB: sl.CameraParameters.vFOV
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: vFOV
        path: ''
        startLine: 2623
      summary: "\nVertical field of view after stereo rectification.\n"
      example: []
      syntax:
        content:
          CSharp: public float vFOV
          VB: Public vFOV As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.hFOV
      commentId: F:sl.CameraParameters.hFOV
      language: CSharp
      name:
        CSharp: hFOV
        VB: hFOV
      nameWithType:
        CSharp: CameraParameters.hFOV
        VB: CameraParameters.hFOV
      qualifiedName:
        CSharp: sl.CameraParameters.hFOV
        VB: sl.CameraParameters.hFOV
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: hFOV
        path: ''
        startLine: 2627
      summary: "\nHorizontal field of view after stereo rectification.\n"
      example: []
      syntax:
        content:
          CSharp: public float hFOV
          VB: Public hFOV As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.dFOV
      commentId: F:sl.CameraParameters.dFOV
      language: CSharp
      name:
        CSharp: dFOV
        VB: dFOV
      nameWithType:
        CSharp: CameraParameters.dFOV
        VB: CameraParameters.dFOV
      qualifiedName:
        CSharp: sl.CameraParameters.dFOV
        VB: sl.CameraParameters.dFOV
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: dFOV
        path: ''
        startLine: 2631
      summary: "\nDiagonal field of view after stereo rectification.\n"
      example: []
      syntax:
        content:
          CSharp: public float dFOV
          VB: Public dFOV As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CameraParameters.resolution
      commentId: F:sl.CameraParameters.resolution
      language: CSharp
      name:
        CSharp: resolution
        VB: resolution
      nameWithType:
        CSharp: CameraParameters.resolution
        VB: CameraParameters.resolution
      qualifiedName:
        CSharp: sl.CameraParameters.resolution
        VB: sl.CameraParameters.resolution
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: resolution
        path: ''
        startLine: 2635
      summary: "\nCamera&apos;s current resolution.\n"
      example: []
      syntax:
        content:
          CSharp: public Resolution resolution
          VB: Public resolution As Resolution
        return:
          type: sl.Resolution
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.CalibrationParameters
    commentId: T:sl.CalibrationParameters
    language: CSharp
    name:
      CSharp: CalibrationParameters
      VB: CalibrationParameters
    nameWithType:
      CSharp: CalibrationParameters
      VB: CalibrationParameters
    qualifiedName:
      CSharp: sl.CalibrationParameters
      VB: sl.CalibrationParameters
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: CalibrationParameters
      path: ''
      startLine: 2644
    summary: "\nHolds calibration information about the current ZED&apos;s hardware, including per-sensor\ncalibration and offsets between the two sensors.\n"
    remarks: "For more info, see:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/structsl_1_1CalibrationParameters.html "
    example: []
    syntax:
      content:
        CSharp: public struct CalibrationParameters
        VB: Public Structure CalibrationParameters
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.CalibrationParameters.leftCam
      commentId: F:sl.CalibrationParameters.leftCam
      language: CSharp
      name:
        CSharp: leftCam
        VB: leftCam
      nameWithType:
        CSharp: CalibrationParameters.leftCam
        VB: CalibrationParameters.leftCam
      qualifiedName:
        CSharp: sl.CalibrationParameters.leftCam
        VB: sl.CalibrationParameters.leftCam
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: leftCam
        path: ''
        startLine: 2650
      summary: "\nParameters of the left sensor.\n"
      example: []
      syntax:
        content:
          CSharp: public CameraParameters leftCam
          VB: Public leftCam As CameraParameters
        return:
          type: sl.CameraParameters
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CalibrationParameters.rightCam
      commentId: F:sl.CalibrationParameters.rightCam
      language: CSharp
      name:
        CSharp: rightCam
        VB: rightCam
      nameWithType:
        CSharp: CalibrationParameters.rightCam
        VB: CalibrationParameters.rightCam
      qualifiedName:
        CSharp: sl.CalibrationParameters.rightCam
        VB: sl.CalibrationParameters.rightCam
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: rightCam
        path: ''
        startLine: 2654
      summary: "\nParameters of the right sensor.\n"
      example: []
      syntax:
        content:
          CSharp: public CameraParameters rightCam
          VB: Public rightCam As CameraParameters
        return:
          type: sl.CameraParameters
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CalibrationParameters.Rot
      commentId: F:sl.CalibrationParameters.Rot
      language: CSharp
      name:
        CSharp: Rot
        VB: Rot
      nameWithType:
        CSharp: CalibrationParameters.Rot
        VB: CalibrationParameters.Rot
      qualifiedName:
        CSharp: sl.CalibrationParameters.Rot
        VB: sl.CalibrationParameters.Rot
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Rot
        path: ''
        startLine: 2658
      summary: "\nRotation (using Rodrigues&apos; transformation) between the two sensors. Defined as &apos;tilt&apos;, &apos;convergence&apos; and &apos;roll&apos;.\n"
      example: []
      syntax:
        content:
          CSharp: public Quaternion Rot
          VB: Public Rot As Quaternion
        return:
          type: Quaternion
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.CalibrationParameters.Trans
      commentId: F:sl.CalibrationParameters.Trans
      language: CSharp
      name:
        CSharp: Trans
        VB: Trans
      nameWithType:
        CSharp: CalibrationParameters.Trans
        VB: CalibrationParameters.Trans
      qualifiedName:
        CSharp: sl.CalibrationParameters.Trans
        VB: sl.CalibrationParameters.Trans
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Trans
        path: ''
        startLine: 2662
      summary: "\nTranslation between the two sensors. T[0] is the distance between the two cameras in meters.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 Trans
          VB: Public Trans As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.Recording_state
    commentId: T:sl.Recording_state
    language: CSharp
    name:
      CSharp: Recording_state
      VB: Recording_state
    nameWithType:
      CSharp: Recording_state
      VB: Recording_state
    qualifiedName:
      CSharp: sl.Recording_state
      VB: sl.Recording_state
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: Recording_state
      path: ''
      startLine: 2671
    summary: "\nContainer for information about the current SVO recording process.\n"
    remarks: "\nMirrors sl.RecordingState in the ZED C++ SDK. For more info, visit:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/structsl_1_1RecordingState.html\n"
    example: []
    syntax:
      content:
        CSharp: public struct Recording_state
        VB: Public Structure Recording_state
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.Recording_state.status
      commentId: F:sl.Recording_state.status
      language: CSharp
      name:
        CSharp: status
        VB: status
      nameWithType:
        CSharp: Recording_state.status
        VB: Recording_state.status
      qualifiedName:
        CSharp: sl.Recording_state.status
        VB: sl.Recording_state.status
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: status
        path: ''
        startLine: 2677
      summary: "\nStatus of the current frame. True if recording was successful, false if frame could not be written.\n"
      example: []
      syntax:
        content:
          CSharp: public bool status
          VB: Public status As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Recording_state.current_compression_time
      commentId: F:sl.Recording_state.current_compression_time
      language: CSharp
      name:
        CSharp: current_compression_time
        VB: current_compression_time
      nameWithType:
        CSharp: Recording_state.current_compression_time
        VB: Recording_state.current_compression_time
      qualifiedName:
        CSharp: sl.Recording_state.current_compression_time
        VB: sl.Recording_state.current_compression_time
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: current_compression_time
        path: ''
        startLine: 2681
      summary: "\nCompression time for the current frame in milliseconds.\n"
      example: []
      syntax:
        content:
          CSharp: public double current_compression_time
          VB: Public current_compression_time As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Recording_state.current_compression_ratio
      commentId: F:sl.Recording_state.current_compression_ratio
      language: CSharp
      name:
        CSharp: current_compression_ratio
        VB: current_compression_ratio
      nameWithType:
        CSharp: Recording_state.current_compression_ratio
        VB: Recording_state.current_compression_ratio
      qualifiedName:
        CSharp: sl.Recording_state.current_compression_ratio
        VB: sl.Recording_state.current_compression_ratio
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: current_compression_ratio
        path: ''
        startLine: 2685
      summary: "\nCompression ratio (% of raw size) for the current frame.\n"
      example: []
      syntax:
        content:
          CSharp: public double current_compression_ratio
          VB: Public current_compression_ratio As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Recording_state.average_compression_time
      commentId: F:sl.Recording_state.average_compression_time
      language: CSharp
      name:
        CSharp: average_compression_time
        VB: average_compression_time
      nameWithType:
        CSharp: Recording_state.average_compression_time
        VB: Recording_state.average_compression_time
      qualifiedName:
        CSharp: sl.Recording_state.average_compression_time
        VB: sl.Recording_state.average_compression_time
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: average_compression_time
        path: ''
        startLine: 2689
      summary: "\nAverage compression time in millisecond since beginning of recording.\n"
      example: []
      syntax:
        content:
          CSharp: public double average_compression_time
          VB: Public average_compression_time As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.Recording_state.average_compression_ratio
      commentId: F:sl.Recording_state.average_compression_ratio
      language: CSharp
      name:
        CSharp: average_compression_ratio
        VB: average_compression_ratio
      nameWithType:
        CSharp: Recording_state.average_compression_ratio
        VB: Recording_state.average_compression_ratio
      qualifiedName:
        CSharp: sl.Recording_state.average_compression_ratio
        VB: sl.Recording_state.average_compression_ratio
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: average_compression_ratio
        path: ''
        startLine: 2693
      summary: "\nCompression ratio (% of raw size) since recording was started.\n"
      example: []
      syntax:
        content:
          CSharp: public double average_compression_ratio
          VB: Public average_compression_ratio As Double
        return:
          type: System.Double
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.ZED_SELF_CALIBRATION_STATE
    commentId: T:sl.ZED_SELF_CALIBRATION_STATE
    language: CSharp
    name:
      CSharp: ZED_SELF_CALIBRATION_STATE
      VB: ZED_SELF_CALIBRATION_STATE
    nameWithType:
      CSharp: ZED_SELF_CALIBRATION_STATE
      VB: ZED_SELF_CALIBRATION_STATE
    qualifiedName:
      CSharp: sl.ZED_SELF_CALIBRATION_STATE
      VB: sl.ZED_SELF_CALIBRATION_STATE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ZED_SELF_CALIBRATION_STATE
      path: ''
      startLine: 2703
    summary: "\nStatus of the ZED&apos;s self-calibration. Since v0.9.3, self-calibration is done in the background and\nstarts in the sl.ZEDCamera.Init or Reset functions.\n"
    remarks: "\nMirrors SELF_CALIBRATION_STATE in the ZED C++ SDK. For more info, see:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/group__Video__group.html#gacce19db438a07075b7e5e22ee5845c95\n"
    example: []
    syntax:
      content:
        CSharp: public enum ZED_SELF_CALIBRATION_STATE
        VB: Public Enum ZED_SELF_CALIBRATION_STATE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_NOT_CALLED
      commentId: F:sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_NOT_CALLED
      language: CSharp
      name:
        CSharp: SELF_CALIBRATION_NOT_CALLED
        VB: SELF_CALIBRATION_NOT_CALLED
      nameWithType:
        CSharp: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_NOT_CALLED
        VB: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_NOT_CALLED
      qualifiedName:
        CSharp: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_NOT_CALLED
        VB: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_NOT_CALLED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SELF_CALIBRATION_NOT_CALLED
        path: ''
        startLine: 2708
      summary: "\nSelf-calibration has not yet been called (no Init() called).\n"
      example: []
      syntax:
        content:
          CSharp: SELF_CALIBRATION_NOT_CALLED = 0
          VB: SELF_CALIBRATION_NOT_CALLED = 0
        return:
          type: sl.ZED_SELF_CALIBRATION_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_RUNNING
      commentId: F:sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_RUNNING
      language: CSharp
      name:
        CSharp: SELF_CALIBRATION_RUNNING
        VB: SELF_CALIBRATION_RUNNING
      nameWithType:
        CSharp: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_RUNNING
        VB: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_RUNNING
      qualifiedName:
        CSharp: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_RUNNING
        VB: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_RUNNING
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SELF_CALIBRATION_RUNNING
        path: ''
        startLine: 2712
      summary: "\nSelf-calibration is currently running.\n"
      example: []
      syntax:
        content:
          CSharp: SELF_CALIBRATION_RUNNING = 1
          VB: SELF_CALIBRATION_RUNNING = 1
        return:
          type: sl.ZED_SELF_CALIBRATION_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_FAILED
      commentId: F:sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_FAILED
      language: CSharp
      name:
        CSharp: SELF_CALIBRATION_FAILED
        VB: SELF_CALIBRATION_FAILED
      nameWithType:
        CSharp: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_FAILED
        VB: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_FAILED
      qualifiedName:
        CSharp: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_FAILED
        VB: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_FAILED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SELF_CALIBRATION_FAILED
        path: ''
        startLine: 2716
      summary: "\nSelf-calibration has finished running but did not manage to get coherent values. Old Parameters are used instead.\n"
      example: []
      syntax:
        content:
          CSharp: SELF_CALIBRATION_FAILED = 2
          VB: SELF_CALIBRATION_FAILED = 2
        return:
          type: sl.ZED_SELF_CALIBRATION_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_SUCCESS
      commentId: F:sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_SUCCESS
      language: CSharp
      name:
        CSharp: SELF_CALIBRATION_SUCCESS
        VB: SELF_CALIBRATION_SUCCESS
      nameWithType:
        CSharp: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_SUCCESS
        VB: ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_SUCCESS
      qualifiedName:
        CSharp: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_SUCCESS
        VB: sl.ZED_SELF_CALIBRATION_STATE.SELF_CALIBRATION_SUCCESS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SELF_CALIBRATION_SUCCESS
        path: ''
        startLine: 2720
      summary: "\nSelf Calibration has finished running and successfully produces coherent values.\n"
      example: []
      syntax:
        content:
          CSharp: SELF_CALIBRATION_SUCCESS = 3
          VB: SELF_CALIBRATION_SUCCESS = 3
        return:
          type: sl.ZED_SELF_CALIBRATION_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.DEPTH_MODE
    commentId: T:sl.DEPTH_MODE
    language: CSharp
    name:
      CSharp: DEPTH_MODE
      VB: DEPTH_MODE
    nameWithType:
      CSharp: DEPTH_MODE
      VB: DEPTH_MODE
    qualifiedName:
      CSharp: sl.DEPTH_MODE
      VB: sl.DEPTH_MODE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: DEPTH_MODE
      path: ''
      startLine: 2730
    summary: "\nLists available depth computation modes. Each mode offers better accuracy than the\nmode before it, but at a performance cost.\n"
    remarks: "\nMirrors DEPTH_MODE in the ZED C++ SDK. For more info, see:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/group__Depth__group.html#ga8d542017c9b012a19a15d46be9b7fa43\n"
    example: []
    syntax:
      content:
        CSharp: public enum DEPTH_MODE
        VB: Public Enum DEPTH_MODE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.DEPTH_MODE.NONE
      commentId: F:sl.DEPTH_MODE.NONE
      language: CSharp
      name:
        CSharp: NONE
        VB: NONE
      nameWithType:
        CSharp: DEPTH_MODE.NONE
        VB: DEPTH_MODE.NONE
      qualifiedName:
        CSharp: sl.DEPTH_MODE.NONE
        VB: sl.DEPTH_MODE.NONE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NONE
        path: ''
        startLine: 2735
      summary: "\nDoes not compute any depth map. Only rectified stereo images will be available.\n"
      example: []
      syntax:
        content:
          CSharp: NONE = 0
          VB: NONE = 0
        return:
          type: sl.DEPTH_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.DEPTH_MODE.PERFORMANCE
      commentId: F:sl.DEPTH_MODE.PERFORMANCE
      language: CSharp
      name:
        CSharp: PERFORMANCE
        VB: PERFORMANCE
      nameWithType:
        CSharp: DEPTH_MODE.PERFORMANCE
        VB: DEPTH_MODE.PERFORMANCE
      qualifiedName:
        CSharp: sl.DEPTH_MODE.PERFORMANCE
        VB: sl.DEPTH_MODE.PERFORMANCE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: PERFORMANCE
        path: ''
        startLine: 2739
      summary: "\nFastest mode for depth computation.\n"
      example: []
      syntax:
        content:
          CSharp: PERFORMANCE = 1
          VB: PERFORMANCE = 1
        return:
          type: sl.DEPTH_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.DEPTH_MODE.QUALITY
      commentId: F:sl.DEPTH_MODE.QUALITY
      language: CSharp
      name:
        CSharp: QUALITY
        VB: QUALITY
      nameWithType:
        CSharp: DEPTH_MODE.QUALITY
        VB: DEPTH_MODE.QUALITY
      qualifiedName:
        CSharp: sl.DEPTH_MODE.QUALITY
        VB: sl.DEPTH_MODE.QUALITY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: QUALITY
        path: ''
        startLine: 2743
      summary: "\nBalanced quality mode. Depth map is robust in most environment and requires medium compute power.\n"
      example: []
      syntax:
        content:
          CSharp: QUALITY = 2
          VB: QUALITY = 2
        return:
          type: sl.DEPTH_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.DEPTH_MODE.ULTRA
      commentId: F:sl.DEPTH_MODE.ULTRA
      language: CSharp
      name:
        CSharp: ULTRA
        VB: ULTRA
      nameWithType:
        CSharp: DEPTH_MODE.ULTRA
        VB: DEPTH_MODE.ULTRA
      qualifiedName:
        CSharp: sl.DEPTH_MODE.ULTRA
        VB: sl.DEPTH_MODE.ULTRA
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ULTRA
        path: ''
        startLine: 2747
      summary: "\nNative depth. Very accurate, but at a large performance cost.\n"
      example: []
      syntax:
        content:
          CSharp: ULTRA = 3
          VB: ULTRA = 3
        return:
          type: sl.DEPTH_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.VIEW_MODE
    commentId: T:sl.VIEW_MODE
    language: CSharp
    name:
      CSharp: VIEW_MODE
      VB: VIEW_MODE
    nameWithType:
      CSharp: VIEW_MODE
      VB: VIEW_MODE
    qualifiedName:
      CSharp: sl.VIEW_MODE
      VB: sl.VIEW_MODE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: VIEW_MODE
      path: ''
      startLine: 2754
    summary: "\nTypes of Image view modes, for creating human-viewable textures.\nUsed only in ZEDRenderingPlane as a simplified version of sl.VIEW, which has more detailed options.\n"
    example: []
    syntax:
      content:
        CSharp: public enum VIEW_MODE
        VB: Public Enum VIEW_MODE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.VIEW_MODE.VIEW_IMAGE
      commentId: F:sl.VIEW_MODE.VIEW_IMAGE
      language: CSharp
      name:
        CSharp: VIEW_IMAGE
        VB: VIEW_IMAGE
      nameWithType:
        CSharp: VIEW_MODE.VIEW_IMAGE
        VB: VIEW_MODE.VIEW_IMAGE
      qualifiedName:
        CSharp: sl.VIEW_MODE.VIEW_IMAGE
        VB: sl.VIEW_MODE.VIEW_IMAGE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: VIEW_IMAGE
        path: ''
        startLine: 2759
      summary: "\nDsplays regular color images.\n"
      example: []
      syntax:
        content:
          CSharp: VIEW_IMAGE = 0
          VB: VIEW_IMAGE = 0
        return:
          type: sl.VIEW_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW_MODE.VIEW_DEPTH
      commentId: F:sl.VIEW_MODE.VIEW_DEPTH
      language: CSharp
      name:
        CSharp: VIEW_DEPTH
        VB: VIEW_DEPTH
      nameWithType:
        CSharp: VIEW_MODE.VIEW_DEPTH
        VB: VIEW_MODE.VIEW_DEPTH
      qualifiedName:
        CSharp: sl.VIEW_MODE.VIEW_DEPTH
        VB: sl.VIEW_MODE.VIEW_DEPTH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: VIEW_DEPTH
        path: ''
        startLine: 2763
      summary: "\nDisplays a greyscale depth map.\n"
      example: []
      syntax:
        content:
          CSharp: VIEW_DEPTH = 1
          VB: VIEW_DEPTH = 1
        return:
          type: sl.VIEW_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW_MODE.VIEW_NORMALS
      commentId: F:sl.VIEW_MODE.VIEW_NORMALS
      language: CSharp
      name:
        CSharp: VIEW_NORMALS
        VB: VIEW_NORMALS
      nameWithType:
        CSharp: VIEW_MODE.VIEW_NORMALS
        VB: VIEW_MODE.VIEW_NORMALS
      qualifiedName:
        CSharp: sl.VIEW_MODE.VIEW_NORMALS
        VB: sl.VIEW_MODE.VIEW_NORMALS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: VIEW_NORMALS
        path: ''
        startLine: 2767
      summary: "\nDisplays a normal map.\n"
      example: []
      syntax:
        content:
          CSharp: VIEW_NORMALS = 2
          VB: VIEW_NORMALS = 2
        return:
          type: sl.VIEW_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.ERROR_CODE
    commentId: T:sl.ERROR_CODE
    language: CSharp
    name:
      CSharp: ERROR_CODE
      VB: ERROR_CODE
    nameWithType:
      CSharp: ERROR_CODE
      VB: ERROR_CODE
    qualifiedName:
      CSharp: sl.ERROR_CODE
      VB: sl.ERROR_CODE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ERROR_CODE
      path: ''
      startLine: 2777
    summary: "\nList of error codes in the ZED SDK.\n"
    remarks: "\nMirrors ERROR_CODE in the ZED C++ SDK. For more info, read:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/group__Camera__group.html#ga4db9ee29f2ff83c71567c12f6bfbf28c\n"
    example: []
    syntax:
      content:
        CSharp: public enum ERROR_CODE
        VB: Public Enum ERROR_CODE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.ERROR_CODE.SUCCESS
      commentId: F:sl.ERROR_CODE.SUCCESS
      language: CSharp
      name:
        CSharp: SUCCESS
        VB: SUCCESS
      nameWithType:
        CSharp: ERROR_CODE.SUCCESS
        VB: ERROR_CODE.SUCCESS
      qualifiedName:
        CSharp: sl.ERROR_CODE.SUCCESS
        VB: sl.ERROR_CODE.SUCCESS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SUCCESS
        path: ''
        startLine: 2782
      summary: "\nOperation was successful.\n"
      example: []
      syntax:
        content:
          CSharp: SUCCESS = 0
          VB: SUCCESS = 0
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.FAILURE
      commentId: F:sl.ERROR_CODE.FAILURE
      language: CSharp
      name:
        CSharp: FAILURE
        VB: FAILURE
      nameWithType:
        CSharp: ERROR_CODE.FAILURE
        VB: ERROR_CODE.FAILURE
      qualifiedName:
        CSharp: sl.ERROR_CODE.FAILURE
        VB: sl.ERROR_CODE.FAILURE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: FAILURE
        path: ''
        startLine: 2786
      summary: "\nStandard, generic code for unsuccessful behavior when no other code is more appropriate.\n"
      example: []
      syntax:
        content:
          CSharp: FAILURE = 1
          VB: FAILURE = 1
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.NO_GPU_COMPATIBLE
      commentId: F:sl.ERROR_CODE.NO_GPU_COMPATIBLE
      language: CSharp
      name:
        CSharp: NO_GPU_COMPATIBLE
        VB: NO_GPU_COMPATIBLE
      nameWithType:
        CSharp: ERROR_CODE.NO_GPU_COMPATIBLE
        VB: ERROR_CODE.NO_GPU_COMPATIBLE
      qualifiedName:
        CSharp: sl.ERROR_CODE.NO_GPU_COMPATIBLE
        VB: sl.ERROR_CODE.NO_GPU_COMPATIBLE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NO_GPU_COMPATIBLE
        path: ''
        startLine: 2790
      summary: "\nNo GPU found, or CUDA capability of the device is not supported.\n"
      example: []
      syntax:
        content:
          CSharp: NO_GPU_COMPATIBLE = 2
          VB: NO_GPU_COMPATIBLE = 2
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.NOT_ENOUGH_GPUMEM
      commentId: F:sl.ERROR_CODE.NOT_ENOUGH_GPUMEM
      language: CSharp
      name:
        CSharp: NOT_ENOUGH_GPUMEM
        VB: NOT_ENOUGH_GPUMEM
      nameWithType:
        CSharp: ERROR_CODE.NOT_ENOUGH_GPUMEM
        VB: ERROR_CODE.NOT_ENOUGH_GPUMEM
      qualifiedName:
        CSharp: sl.ERROR_CODE.NOT_ENOUGH_GPUMEM
        VB: sl.ERROR_CODE.NOT_ENOUGH_GPUMEM
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NOT_ENOUGH_GPUMEM
        path: ''
        startLine: 2794
      summary: "\nNot enough GPU memory for this depth mode. Try a different mode (such as PERFORMANCE).\n"
      example: []
      syntax:
        content:
          CSharp: NOT_ENOUGH_GPUMEM = 3
          VB: NOT_ENOUGH_GPUMEM = 3
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CAMERA_NOT_DETECTED
      commentId: F:sl.ERROR_CODE.CAMERA_NOT_DETECTED
      language: CSharp
      name:
        CSharp: CAMERA_NOT_DETECTED
        VB: CAMERA_NOT_DETECTED
      nameWithType:
        CSharp: ERROR_CODE.CAMERA_NOT_DETECTED
        VB: ERROR_CODE.CAMERA_NOT_DETECTED
      qualifiedName:
        CSharp: sl.ERROR_CODE.CAMERA_NOT_DETECTED
        VB: sl.ERROR_CODE.CAMERA_NOT_DETECTED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_NOT_DETECTED
        path: ''
        startLine: 2798
      summary: "\nThe ZED camera is not plugged in or detected.\n"
      example: []
      syntax:
        content:
          CSharp: CAMERA_NOT_DETECTED = 4
          VB: CAMERA_NOT_DETECTED = 4
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.SENSOR_NOT_DETECTED
      commentId: F:sl.ERROR_CODE.SENSOR_NOT_DETECTED
      language: CSharp
      name:
        CSharp: SENSOR_NOT_DETECTED
        VB: SENSOR_NOT_DETECTED
      nameWithType:
        CSharp: ERROR_CODE.SENSOR_NOT_DETECTED
        VB: ERROR_CODE.SENSOR_NOT_DETECTED
      qualifiedName:
        CSharp: sl.ERROR_CODE.SENSOR_NOT_DETECTED
        VB: sl.ERROR_CODE.SENSOR_NOT_DETECTED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SENSOR_NOT_DETECTED
        path: ''
        startLine: 2802
      summary: "\na ZED Mini is detected but the inertial sensor cannot be opened. (Never called for original ZED)\n"
      example: []
      syntax:
        content:
          CSharp: SENSOR_NOT_DETECTED = 5
          VB: SENSOR_NOT_DETECTED = 5
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_RESOLUTION
      commentId: F:sl.ERROR_CODE.INVALID_RESOLUTION
      language: CSharp
      name:
        CSharp: INVALID_RESOLUTION
        VB: INVALID_RESOLUTION
      nameWithType:
        CSharp: ERROR_CODE.INVALID_RESOLUTION
        VB: ERROR_CODE.INVALID_RESOLUTION
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_RESOLUTION
        VB: sl.ERROR_CODE.INVALID_RESOLUTION
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_RESOLUTION
        path: ''
        startLine: 2806
      summary: "\nFor Nvidia Jetson X1 only - resolution not yet supported (USB3.0 bandwidth).\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_RESOLUTION = 6
          VB: INVALID_RESOLUTION = 6
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.LOW_USB_BANDWIDTH
      commentId: F:sl.ERROR_CODE.LOW_USB_BANDWIDTH
      language: CSharp
      name:
        CSharp: LOW_USB_BANDWIDTH
        VB: LOW_USB_BANDWIDTH
      nameWithType:
        CSharp: ERROR_CODE.LOW_USB_BANDWIDTH
        VB: ERROR_CODE.LOW_USB_BANDWIDTH
      qualifiedName:
        CSharp: sl.ERROR_CODE.LOW_USB_BANDWIDTH
        VB: sl.ERROR_CODE.LOW_USB_BANDWIDTH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LOW_USB_BANDWIDTH
        path: ''
        startLine: 2811
      summary: "\nUSB communication issues. Occurs when the camera FPS cannot be reached, due to a lot of corrupted frames.\nTry changing the USB port.\n"
      example: []
      syntax:
        content:
          CSharp: LOW_USB_BANDWIDTH = 7
          VB: LOW_USB_BANDWIDTH = 7
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CALIBRATION_FILE_NOT_AVAILABLE
      commentId: F:sl.ERROR_CODE.CALIBRATION_FILE_NOT_AVAILABLE
      language: CSharp
      name:
        CSharp: CALIBRATION_FILE_NOT_AVAILABLE
        VB: CALIBRATION_FILE_NOT_AVAILABLE
      nameWithType:
        CSharp: ERROR_CODE.CALIBRATION_FILE_NOT_AVAILABLE
        VB: ERROR_CODE.CALIBRATION_FILE_NOT_AVAILABLE
      qualifiedName:
        CSharp: sl.ERROR_CODE.CALIBRATION_FILE_NOT_AVAILABLE
        VB: sl.ERROR_CODE.CALIBRATION_FILE_NOT_AVAILABLE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CALIBRATION_FILE_NOT_AVAILABLE
        path: ''
        startLine: 2815
      summary: "\nZED calibration file is not found on the host machine. Use ZED Explorer or ZED Calibration to get one.\n"
      example: []
      syntax:
        content:
          CSharp: CALIBRATION_FILE_NOT_AVAILABLE = 8
          VB: CALIBRATION_FILE_NOT_AVAILABLE = 8
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_CALIBRATION_FILE
      commentId: F:sl.ERROR_CODE.INVALID_CALIBRATION_FILE
      language: CSharp
      name:
        CSharp: INVALID_CALIBRATION_FILE
        VB: INVALID_CALIBRATION_FILE
      nameWithType:
        CSharp: ERROR_CODE.INVALID_CALIBRATION_FILE
        VB: ERROR_CODE.INVALID_CALIBRATION_FILE
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_CALIBRATION_FILE
        VB: sl.ERROR_CODE.INVALID_CALIBRATION_FILE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_CALIBRATION_FILE
        path: ''
        startLine: 2819
      summary: "\nZED calibration file is not valid. Try downloading the factory one or recalibrating using the ZED Calibration tool.\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_CALIBRATION_FILE = 9
          VB: INVALID_CALIBRATION_FILE = 9
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_SVO_FILE
      commentId: F:sl.ERROR_CODE.INVALID_SVO_FILE
      language: CSharp
      name:
        CSharp: INVALID_SVO_FILE
        VB: INVALID_SVO_FILE
      nameWithType:
        CSharp: ERROR_CODE.INVALID_SVO_FILE
        VB: ERROR_CODE.INVALID_SVO_FILE
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_SVO_FILE
        VB: sl.ERROR_CODE.INVALID_SVO_FILE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_SVO_FILE
        path: ''
        startLine: 2823
      summary: "\nThe provided SVO file is not valid.\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_SVO_FILE = 10
          VB: INVALID_SVO_FILE = 10
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.SVO_RECORDING_ERROR
      commentId: F:sl.ERROR_CODE.SVO_RECORDING_ERROR
      language: CSharp
      name:
        CSharp: SVO_RECORDING_ERROR
        VB: SVO_RECORDING_ERROR
      nameWithType:
        CSharp: ERROR_CODE.SVO_RECORDING_ERROR
        VB: ERROR_CODE.SVO_RECORDING_ERROR
      qualifiedName:
        CSharp: sl.ERROR_CODE.SVO_RECORDING_ERROR
        VB: sl.ERROR_CODE.SVO_RECORDING_ERROR
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SVO_RECORDING_ERROR
        path: ''
        startLine: 2827
      summary: "\nAn SVO recorder-related error occurred (such as not enough free storage or an invalid file path).\n"
      example: []
      syntax:
        content:
          CSharp: SVO_RECORDING_ERROR = 11
          VB: SVO_RECORDING_ERROR = 11
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.SVO_UNSUPPORTED_COMPRESSION
      commentId: F:sl.ERROR_CODE.SVO_UNSUPPORTED_COMPRESSION
      language: CSharp
      name:
        CSharp: SVO_UNSUPPORTED_COMPRESSION
        VB: SVO_UNSUPPORTED_COMPRESSION
      nameWithType:
        CSharp: ERROR_CODE.SVO_UNSUPPORTED_COMPRESSION
        VB: ERROR_CODE.SVO_UNSUPPORTED_COMPRESSION
      qualifiedName:
        CSharp: sl.ERROR_CODE.SVO_UNSUPPORTED_COMPRESSION
        VB: sl.ERROR_CODE.SVO_UNSUPPORTED_COMPRESSION
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SVO_UNSUPPORTED_COMPRESSION
        path: ''
        startLine: 2831
      summary: "\nAn SVO related error when NVIDIA based compression cannot be loaded\n"
      example: []
      syntax:
        content:
          CSharp: SVO_UNSUPPORTED_COMPRESSION = 12
          VB: SVO_UNSUPPORTED_COMPRESSION = 12
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_COORDINATE_SYSTEM
      commentId: F:sl.ERROR_CODE.INVALID_COORDINATE_SYSTEM
      language: CSharp
      name:
        CSharp: INVALID_COORDINATE_SYSTEM
        VB: INVALID_COORDINATE_SYSTEM
      nameWithType:
        CSharp: ERROR_CODE.INVALID_COORDINATE_SYSTEM
        VB: ERROR_CODE.INVALID_COORDINATE_SYSTEM
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_COORDINATE_SYSTEM
        VB: sl.ERROR_CODE.INVALID_COORDINATE_SYSTEM
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_COORDINATE_SYSTEM
        path: ''
        startLine: 2835
      summary: "\nThe requested coordinate system is not available.\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_COORDINATE_SYSTEM = 13
          VB: INVALID_COORDINATE_SYSTEM = 13
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_FIRMWARE
      commentId: F:sl.ERROR_CODE.INVALID_FIRMWARE
      language: CSharp
      name:
        CSharp: INVALID_FIRMWARE
        VB: INVALID_FIRMWARE
      nameWithType:
        CSharp: ERROR_CODE.INVALID_FIRMWARE
        VB: ERROR_CODE.INVALID_FIRMWARE
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_FIRMWARE
        VB: sl.ERROR_CODE.INVALID_FIRMWARE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_FIRMWARE
        path: ''
        startLine: 2839
      summary: "\nThe firmware of the ZED is out of date. Update to the latest version.\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_FIRMWARE = 14
          VB: INVALID_FIRMWARE = 14
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_FUNCTION_PARAMETERS
      commentId: F:sl.ERROR_CODE.INVALID_FUNCTION_PARAMETERS
      language: CSharp
      name:
        CSharp: INVALID_FUNCTION_PARAMETERS
        VB: INVALID_FUNCTION_PARAMETERS
      nameWithType:
        CSharp: ERROR_CODE.INVALID_FUNCTION_PARAMETERS
        VB: ERROR_CODE.INVALID_FUNCTION_PARAMETERS
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_FUNCTION_PARAMETERS
        VB: sl.ERROR_CODE.INVALID_FUNCTION_PARAMETERS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_FUNCTION_PARAMETERS
        path: ''
        startLine: 2843
      summary: "\nAn invalid parameter has been set for the function.\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_FUNCTION_PARAMETERS = 15
          VB: INVALID_FUNCTION_PARAMETERS = 15
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.NOT_A_NEW_FRAME
      commentId: F:sl.ERROR_CODE.NOT_A_NEW_FRAME
      language: CSharp
      name:
        CSharp: NOT_A_NEW_FRAME
        VB: NOT_A_NEW_FRAME
      nameWithType:
        CSharp: ERROR_CODE.NOT_A_NEW_FRAME
        VB: ERROR_CODE.NOT_A_NEW_FRAME
      qualifiedName:
        CSharp: sl.ERROR_CODE.NOT_A_NEW_FRAME
        VB: sl.ERROR_CODE.NOT_A_NEW_FRAME
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NOT_A_NEW_FRAME
        path: ''
        startLine: 2847
      summary: "\nIn grab() only, the current call return the same frame as last call. Not a new frame.\n"
      example: []
      syntax:
        content:
          CSharp: NOT_A_NEW_FRAME = 16
          VB: NOT_A_NEW_FRAME = 16
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CUDA_ERROR
      commentId: F:sl.ERROR_CODE.CUDA_ERROR
      language: CSharp
      name:
        CSharp: CUDA_ERROR
        VB: CUDA_ERROR
      nameWithType:
        CSharp: ERROR_CODE.CUDA_ERROR
        VB: ERROR_CODE.CUDA_ERROR
      qualifiedName:
        CSharp: sl.ERROR_CODE.CUDA_ERROR
        VB: sl.ERROR_CODE.CUDA_ERROR
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CUDA_ERROR
        path: ''
        startLine: 2851
      summary: "\nIn grab() only, a CUDA error has been detected in the process. Activate wrapperVerbose in ZEDManager.cs for more info.\n"
      example: []
      syntax:
        content:
          CSharp: CUDA_ERROR = 17
          VB: CUDA_ERROR = 17
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CAMERA_NOT_INITIALIZED
      commentId: F:sl.ERROR_CODE.CAMERA_NOT_INITIALIZED
      language: CSharp
      name:
        CSharp: CAMERA_NOT_INITIALIZED
        VB: CAMERA_NOT_INITIALIZED
      nameWithType:
        CSharp: ERROR_CODE.CAMERA_NOT_INITIALIZED
        VB: ERROR_CODE.CAMERA_NOT_INITIALIZED
      qualifiedName:
        CSharp: sl.ERROR_CODE.CAMERA_NOT_INITIALIZED
        VB: sl.ERROR_CODE.CAMERA_NOT_INITIALIZED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_NOT_INITIALIZED
        path: ''
        startLine: 2855
      summary: "\nIn grab() only, ZED SDK is not initialized. Probably a missing call to sl::Camera::open.\n"
      example: []
      syntax:
        content:
          CSharp: CAMERA_NOT_INITIALIZED = 18
          VB: CAMERA_NOT_INITIALIZED = 18
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.NVIDIA_DRIVER_OUT_OF_DATE
      commentId: F:sl.ERROR_CODE.NVIDIA_DRIVER_OUT_OF_DATE
      language: CSharp
      name:
        CSharp: NVIDIA_DRIVER_OUT_OF_DATE
        VB: NVIDIA_DRIVER_OUT_OF_DATE
      nameWithType:
        CSharp: ERROR_CODE.NVIDIA_DRIVER_OUT_OF_DATE
        VB: ERROR_CODE.NVIDIA_DRIVER_OUT_OF_DATE
      qualifiedName:
        CSharp: sl.ERROR_CODE.NVIDIA_DRIVER_OUT_OF_DATE
        VB: sl.ERROR_CODE.NVIDIA_DRIVER_OUT_OF_DATE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NVIDIA_DRIVER_OUT_OF_DATE
        path: ''
        startLine: 2859
      summary: "\nYour NVIDIA driver is too old and not compatible with your current CUDA version.\n"
      example: []
      syntax:
        content:
          CSharp: NVIDIA_DRIVER_OUT_OF_DATE = 19
          VB: NVIDIA_DRIVER_OUT_OF_DATE = 19
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_FUNCTION_CALL
      commentId: F:sl.ERROR_CODE.INVALID_FUNCTION_CALL
      language: CSharp
      name:
        CSharp: INVALID_FUNCTION_CALL
        VB: INVALID_FUNCTION_CALL
      nameWithType:
        CSharp: ERROR_CODE.INVALID_FUNCTION_CALL
        VB: ERROR_CODE.INVALID_FUNCTION_CALL
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_FUNCTION_CALL
        VB: sl.ERROR_CODE.INVALID_FUNCTION_CALL
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_FUNCTION_CALL
        path: ''
        startLine: 2863
      summary: "\nThe function call is not valid in the current context. Could be a missing a call to sl::Camera::open.\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_FUNCTION_CALL = 20
          VB: INVALID_FUNCTION_CALL = 20
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CORRUPTED_SDK_INSTALLATION
      commentId: F:sl.ERROR_CODE.CORRUPTED_SDK_INSTALLATION
      language: CSharp
      name:
        CSharp: CORRUPTED_SDK_INSTALLATION
        VB: CORRUPTED_SDK_INSTALLATION
      nameWithType:
        CSharp: ERROR_CODE.CORRUPTED_SDK_INSTALLATION
        VB: ERROR_CODE.CORRUPTED_SDK_INSTALLATION
      qualifiedName:
        CSharp: sl.ERROR_CODE.CORRUPTED_SDK_INSTALLATION
        VB: sl.ERROR_CODE.CORRUPTED_SDK_INSTALLATION
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CORRUPTED_SDK_INSTALLATION
        path: ''
        startLine: 2867
      summary: "\nThe SDK wasn&apos;t able to load its dependencies, the installer should be launched.\n"
      example: []
      syntax:
        content:
          CSharp: CORRUPTED_SDK_INSTALLATION = 21
          VB: CORRUPTED_SDK_INSTALLATION = 21
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INCOMPATIBLE_SDK_VERSION
      commentId: F:sl.ERROR_CODE.INCOMPATIBLE_SDK_VERSION
      language: CSharp
      name:
        CSharp: INCOMPATIBLE_SDK_VERSION
        VB: INCOMPATIBLE_SDK_VERSION
      nameWithType:
        CSharp: ERROR_CODE.INCOMPATIBLE_SDK_VERSION
        VB: ERROR_CODE.INCOMPATIBLE_SDK_VERSION
      qualifiedName:
        CSharp: sl.ERROR_CODE.INCOMPATIBLE_SDK_VERSION
        VB: sl.ERROR_CODE.INCOMPATIBLE_SDK_VERSION
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INCOMPATIBLE_SDK_VERSION
        path: ''
        startLine: 2871
      summary: "\nThe installed SDK is not the SDK used to compile the program.\n"
      example: []
      syntax:
        content:
          CSharp: INCOMPATIBLE_SDK_VERSION = 22
          VB: INCOMPATIBLE_SDK_VERSION = 22
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INVALID_AREA_FILE
      commentId: F:sl.ERROR_CODE.INVALID_AREA_FILE
      language: CSharp
      name:
        CSharp: INVALID_AREA_FILE
        VB: INVALID_AREA_FILE
      nameWithType:
        CSharp: ERROR_CODE.INVALID_AREA_FILE
        VB: ERROR_CODE.INVALID_AREA_FILE
      qualifiedName:
        CSharp: sl.ERROR_CODE.INVALID_AREA_FILE
        VB: sl.ERROR_CODE.INVALID_AREA_FILE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INVALID_AREA_FILE
        path: ''
        startLine: 2875
      summary: "\nThe given area file does not exist. Check the file path.\n"
      example: []
      syntax:
        content:
          CSharp: INVALID_AREA_FILE = 23
          VB: INVALID_AREA_FILE = 23
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INCOMPATIBLE_AREA_FILE
      commentId: F:sl.ERROR_CODE.INCOMPATIBLE_AREA_FILE
      language: CSharp
      name:
        CSharp: INCOMPATIBLE_AREA_FILE
        VB: INCOMPATIBLE_AREA_FILE
      nameWithType:
        CSharp: ERROR_CODE.INCOMPATIBLE_AREA_FILE
        VB: ERROR_CODE.INCOMPATIBLE_AREA_FILE
      qualifiedName:
        CSharp: sl.ERROR_CODE.INCOMPATIBLE_AREA_FILE
        VB: sl.ERROR_CODE.INCOMPATIBLE_AREA_FILE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INCOMPATIBLE_AREA_FILE
        path: ''
        startLine: 2880
      summary: "\nThe area file does not contain enough data to be used ,or the sl::DEPTH_MODE used during the creation of the\narea file is different from the one currently set.\n"
      example: []
      syntax:
        content:
          CSharp: INCOMPATIBLE_AREA_FILE = 24
          VB: INCOMPATIBLE_AREA_FILE = 24
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CAMERA_FAILED_TO_SETUP
      commentId: F:sl.ERROR_CODE.CAMERA_FAILED_TO_SETUP
      language: CSharp
      name:
        CSharp: CAMERA_FAILED_TO_SETUP
        VB: CAMERA_FAILED_TO_SETUP
      nameWithType:
        CSharp: ERROR_CODE.CAMERA_FAILED_TO_SETUP
        VB: ERROR_CODE.CAMERA_FAILED_TO_SETUP
      qualifiedName:
        CSharp: sl.ERROR_CODE.CAMERA_FAILED_TO_SETUP
        VB: sl.ERROR_CODE.CAMERA_FAILED_TO_SETUP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_FAILED_TO_SETUP
        path: ''
        startLine: 2884
      summary: "\nCamera failed to set up.\n"
      example: []
      syntax:
        content:
          CSharp: CAMERA_FAILED_TO_SETUP = 25
          VB: CAMERA_FAILED_TO_SETUP = 25
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CAMERA_DETECTION_ISSUE
      commentId: F:sl.ERROR_CODE.CAMERA_DETECTION_ISSUE
      language: CSharp
      name:
        CSharp: CAMERA_DETECTION_ISSUE
        VB: CAMERA_DETECTION_ISSUE
      nameWithType:
        CSharp: ERROR_CODE.CAMERA_DETECTION_ISSUE
        VB: ERROR_CODE.CAMERA_DETECTION_ISSUE
      qualifiedName:
        CSharp: sl.ERROR_CODE.CAMERA_DETECTION_ISSUE
        VB: sl.ERROR_CODE.CAMERA_DETECTION_ISSUE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_DETECTION_ISSUE
        path: ''
        startLine: 2888
      summary: "\nYour ZED cannot be opened. Try replugging it to another USB port or flipping the USB-C connector (if using ZED Mini).\n"
      example: []
      syntax:
        content:
          CSharp: CAMERA_DETECTION_ISSUE = 26
          VB: CAMERA_DETECTION_ISSUE = 26
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.CAMERA_ALREADY_IN_USE
      commentId: F:sl.ERROR_CODE.CAMERA_ALREADY_IN_USE
      language: CSharp
      name:
        CSharp: CAMERA_ALREADY_IN_USE
        VB: CAMERA_ALREADY_IN_USE
      nameWithType:
        CSharp: ERROR_CODE.CAMERA_ALREADY_IN_USE
        VB: ERROR_CODE.CAMERA_ALREADY_IN_USE
      qualifiedName:
        CSharp: sl.ERROR_CODE.CAMERA_ALREADY_IN_USE
        VB: sl.ERROR_CODE.CAMERA_ALREADY_IN_USE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA_ALREADY_IN_USE
        path: ''
        startLine: 2892
      summary: "\nThe Camera is already in use by another process.\n"
      example: []
      syntax:
        content:
          CSharp: CAMERA_ALREADY_IN_USE = 27
          VB: CAMERA_ALREADY_IN_USE = 27
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.NO_GPU_DETECTED
      commentId: F:sl.ERROR_CODE.NO_GPU_DETECTED
      language: CSharp
      name:
        CSharp: NO_GPU_DETECTED
        VB: NO_GPU_DETECTED
      nameWithType:
        CSharp: ERROR_CODE.NO_GPU_DETECTED
        VB: ERROR_CODE.NO_GPU_DETECTED
      qualifiedName:
        CSharp: sl.ERROR_CODE.NO_GPU_DETECTED
        VB: sl.ERROR_CODE.NO_GPU_DETECTED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NO_GPU_DETECTED
        path: ''
        startLine: 2896
      summary: "\nNo GPU found or CUDA is unable to list it. Can be a driver/reboot issue.\n"
      example: []
      syntax:
        content:
          CSharp: NO_GPU_DETECTED = 28
          VB: NO_GPU_DETECTED = 28
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.PLANE_NOT_FOUND
      commentId: F:sl.ERROR_CODE.PLANE_NOT_FOUND
      language: CSharp
      name:
        CSharp: PLANE_NOT_FOUND
        VB: PLANE_NOT_FOUND
      nameWithType:
        CSharp: ERROR_CODE.PLANE_NOT_FOUND
        VB: ERROR_CODE.PLANE_NOT_FOUND
      qualifiedName:
        CSharp: sl.ERROR_CODE.PLANE_NOT_FOUND
        VB: sl.ERROR_CODE.PLANE_NOT_FOUND
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: PLANE_NOT_FOUND
        path: ''
        startLine: 2901
      summary: "\nPlane not found. Either no plane is detected in the scene, at the location or corresponding to the floor,\nor the floor plane doesn&apos;t match the prior given.\n"
      example: []
      syntax:
        content:
          CSharp: PLANE_NOT_FOUND = 29
          VB: PLANE_NOT_FOUND = 29
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.AI_MODULE_NOT_AVAILABLE
      commentId: F:sl.ERROR_CODE.AI_MODULE_NOT_AVAILABLE
      language: CSharp
      name:
        CSharp: AI_MODULE_NOT_AVAILABLE
        VB: AI_MODULE_NOT_AVAILABLE
      nameWithType:
        CSharp: ERROR_CODE.AI_MODULE_NOT_AVAILABLE
        VB: ERROR_CODE.AI_MODULE_NOT_AVAILABLE
      qualifiedName:
        CSharp: sl.ERROR_CODE.AI_MODULE_NOT_AVAILABLE
        VB: sl.ERROR_CODE.AI_MODULE_NOT_AVAILABLE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AI_MODULE_NOT_AVAILABLE
        path: ''
        startLine: 2906
      summary: "\nMissing or corrupted AI module ressources.\nPlease reinstall the ZED SDK with the AI (object detection) module to fix this issue\n"
      example: []
      syntax:
        content:
          CSharp: AI_MODULE_NOT_AVAILABLE = 30
          VB: AI_MODULE_NOT_AVAILABLE = 30
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.INCOMPATIBLE_CUDNN_VERSION
      commentId: F:sl.ERROR_CODE.INCOMPATIBLE_CUDNN_VERSION
      language: CSharp
      name:
        CSharp: INCOMPATIBLE_CUDNN_VERSION
        VB: INCOMPATIBLE_CUDNN_VERSION
      nameWithType:
        CSharp: ERROR_CODE.INCOMPATIBLE_CUDNN_VERSION
        VB: ERROR_CODE.INCOMPATIBLE_CUDNN_VERSION
      qualifiedName:
        CSharp: sl.ERROR_CODE.INCOMPATIBLE_CUDNN_VERSION
        VB: sl.ERROR_CODE.INCOMPATIBLE_CUDNN_VERSION
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INCOMPATIBLE_CUDNN_VERSION
        path: ''
        startLine: 2910
      summary: "\nThe cuDNN library cannot be loaded, or is not compatible with this version of the ZED SDK\n"
      example: []
      syntax:
        content:
          CSharp: INCOMPATIBLE_CUDNN_VERSION = 31
          VB: INCOMPATIBLE_CUDNN_VERSION = 31
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.AI_INVALID_TIMESTAMP
      commentId: F:sl.ERROR_CODE.AI_INVALID_TIMESTAMP
      language: CSharp
      name:
        CSharp: AI_INVALID_TIMESTAMP
        VB: AI_INVALID_TIMESTAMP
      nameWithType:
        CSharp: ERROR_CODE.AI_INVALID_TIMESTAMP
        VB: ERROR_CODE.AI_INVALID_TIMESTAMP
      qualifiedName:
        CSharp: sl.ERROR_CODE.AI_INVALID_TIMESTAMP
        VB: sl.ERROR_CODE.AI_INVALID_TIMESTAMP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AI_INVALID_TIMESTAMP
        path: ''
        startLine: 2914
      summary: "\ninternal sdk timestamp is not valid\n"
      example: []
      syntax:
        content:
          CSharp: AI_INVALID_TIMESTAMP = 32
          VB: AI_INVALID_TIMESTAMP = 32
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.AI_UNKNOWN_ERROR
      commentId: F:sl.ERROR_CODE.AI_UNKNOWN_ERROR
      language: CSharp
      name:
        CSharp: AI_UNKNOWN_ERROR
        VB: AI_UNKNOWN_ERROR
      nameWithType:
        CSharp: ERROR_CODE.AI_UNKNOWN_ERROR
        VB: ERROR_CODE.AI_UNKNOWN_ERROR
      qualifiedName:
        CSharp: sl.ERROR_CODE.AI_UNKNOWN_ERROR
        VB: sl.ERROR_CODE.AI_UNKNOWN_ERROR
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AI_UNKNOWN_ERROR
        path: ''
        startLine: 2918
      summary: "\nan error occur while tracking objects\n"
      example: []
      syntax:
        content:
          CSharp: AI_UNKNOWN_ERROR = 33
          VB: AI_UNKNOWN_ERROR = 33
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.ERROR_CODE.ERROR_CODE_LAST
      commentId: F:sl.ERROR_CODE.ERROR_CODE_LAST
      language: CSharp
      name:
        CSharp: ERROR_CODE_LAST
        VB: ERROR_CODE_LAST
      nameWithType:
        CSharp: ERROR_CODE.ERROR_CODE_LAST
        VB: ERROR_CODE.ERROR_CODE_LAST
      qualifiedName:
        CSharp: sl.ERROR_CODE.ERROR_CODE_LAST
        VB: sl.ERROR_CODE.ERROR_CODE_LAST
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ERROR_CODE_LAST
        path: ''
        startLine: 2922
      summary: "\nEnd of ERROR_CODE\n"
      example: []
      syntax:
        content:
          CSharp: ERROR_CODE_LAST = 34
          VB: ERROR_CODE_LAST = 34
        return:
          type: sl.ERROR_CODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.RESOLUTION
    commentId: T:sl.RESOLUTION
    language: CSharp
    name:
      CSharp: RESOLUTION
      VB: RESOLUTION
    nameWithType:
      CSharp: RESOLUTION
      VB: RESOLUTION
    qualifiedName:
      CSharp: sl.RESOLUTION
      VB: sl.RESOLUTION
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: RESOLUTION
      path: ''
      startLine: 2929
    summary: "\nRepresents the available resolution options.\n"
    example: []
    syntax:
      content:
        CSharp: public enum RESOLUTION
        VB: Public Enum RESOLUTION
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.RESOLUTION.HD2K
      commentId: F:sl.RESOLUTION.HD2K
      language: CSharp
      name:
        CSharp: HD2K
        VB: HD2K
      nameWithType:
        CSharp: RESOLUTION.HD2K
        VB: RESOLUTION.HD2K
      qualifiedName:
        CSharp: sl.RESOLUTION.HD2K
        VB: sl.RESOLUTION.HD2K
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: HD2K
        path: ''
        startLine: 2934
      summary: "\n2208*1242. Supported frame rate: 15 FPS.\n"
      example: []
      syntax:
        content:
          CSharp: HD2K = 0
          VB: HD2K = 0
        return:
          type: sl.RESOLUTION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.RESOLUTION.HD1080
      commentId: F:sl.RESOLUTION.HD1080
      language: CSharp
      name:
        CSharp: HD1080
        VB: HD1080
      nameWithType:
        CSharp: RESOLUTION.HD1080
        VB: RESOLUTION.HD1080
      qualifiedName:
        CSharp: sl.RESOLUTION.HD1080
        VB: sl.RESOLUTION.HD1080
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: HD1080
        path: ''
        startLine: 2938
      summary: "\n1920*1080. Supported frame rates: 15, 30 FPS.\n"
      example: []
      syntax:
        content:
          CSharp: HD1080 = 1
          VB: HD1080 = 1
        return:
          type: sl.RESOLUTION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.RESOLUTION.HD720
      commentId: F:sl.RESOLUTION.HD720
      language: CSharp
      name:
        CSharp: HD720
        VB: HD720
      nameWithType:
        CSharp: RESOLUTION.HD720
        VB: RESOLUTION.HD720
      qualifiedName:
        CSharp: sl.RESOLUTION.HD720
        VB: sl.RESOLUTION.HD720
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: HD720
        path: ''
        startLine: 2942
      summary: "\n1280*720. Supported frame rates: 15, 30, 60 FPS.\n"
      example: []
      syntax:
        content:
          CSharp: HD720 = 2
          VB: HD720 = 2
        return:
          type: sl.RESOLUTION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.RESOLUTION.VGA
      commentId: F:sl.RESOLUTION.VGA
      language: CSharp
      name:
        CSharp: VGA
        VB: VGA
      nameWithType:
        CSharp: RESOLUTION.VGA
        VB: RESOLUTION.VGA
      qualifiedName:
        CSharp: sl.RESOLUTION.VGA
        VB: sl.RESOLUTION.VGA
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: VGA
        path: ''
        startLine: 2946
      summary: "\n672*376. Supported frame rates: 15, 30, 60, 100 FPS.\n"
      example: []
      syntax:
        content:
          CSharp: VGA = 3
          VB: VGA = 3
        return:
          type: sl.RESOLUTION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.MODEL
    commentId: T:sl.MODEL
    language: CSharp
    name:
      CSharp: MODEL
      VB: MODEL
    nameWithType:
      CSharp: MODEL
      VB: MODEL
    qualifiedName:
      CSharp: sl.MODEL
      VB: sl.MODEL
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: MODEL
      path: ''
      startLine: 2953
    summary: "\nTypes of compatible ZED cameras.\n"
    example: []
    syntax:
      content:
        CSharp: public enum MODEL
        VB: Public Enum MODEL
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.MODEL.ZED
      commentId: F:sl.MODEL.ZED
      language: CSharp
      name:
        CSharp: ZED
        VB: ZED
      nameWithType:
        CSharp: MODEL.ZED
        VB: MODEL.ZED
      qualifiedName:
        CSharp: sl.MODEL.ZED
        VB: sl.MODEL.ZED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ZED
        path: ''
        startLine: 2958
      summary: "\nZED(1)\n"
      example: []
      syntax:
        content:
          CSharp: ZED = 0
          VB: ZED = 0
        return:
          type: sl.MODEL
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MODEL.ZED_M
      commentId: F:sl.MODEL.ZED_M
      language: CSharp
      name:
        CSharp: ZED_M
        VB: ZED_M
      nameWithType:
        CSharp: MODEL.ZED_M
        VB: MODEL.ZED_M
      qualifiedName:
        CSharp: sl.MODEL.ZED_M
        VB: sl.MODEL.ZED_M
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ZED_M
        path: ''
        startLine: 2962
      summary: "\nZED Mini.\n"
      example: []
      syntax:
        content:
          CSharp: ZED_M = 1
          VB: ZED_M = 1
        return:
          type: sl.MODEL
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MODEL.ZED2
      commentId: F:sl.MODEL.ZED2
      language: CSharp
      name:
        CSharp: ZED2
        VB: ZED2
      nameWithType:
        CSharp: MODEL.ZED2
        VB: MODEL.ZED2
      qualifiedName:
        CSharp: sl.MODEL.ZED2
        VB: sl.MODEL.ZED2
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ZED2
        path: ''
        startLine: 2966
      summary: "\nZED2.\n"
      example: []
      syntax:
        content:
          CSharp: ZED2 = 2
          VB: ZED2 = 2
        return:
          type: sl.MODEL
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.SENSING_MODE
    commentId: T:sl.SENSING_MODE
    language: CSharp
    name:
      CSharp: SENSING_MODE
      VB: SENSING_MODE
    nameWithType:
      CSharp: SENSING_MODE
      VB: SENSING_MODE
    qualifiedName:
      CSharp: sl.SENSING_MODE
      VB: sl.SENSING_MODE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: SENSING_MODE
      path: ''
      startLine: 2973
    summary: "\nLists available sensing modes - whether to produce the original depth map (STANDARD) or one with\nsmoothing and other effects added to fill gaps and roughness (FILL).\n"
    example: []
    syntax:
      content:
        CSharp: public enum SENSING_MODE
        VB: Public Enum SENSING_MODE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.SENSING_MODE.STANDARD
      commentId: F:sl.SENSING_MODE.STANDARD
      language: CSharp
      name:
        CSharp: STANDARD
        VB: STANDARD
      nameWithType:
        CSharp: SENSING_MODE.STANDARD
        VB: SENSING_MODE.STANDARD
      qualifiedName:
        CSharp: sl.SENSING_MODE.STANDARD
        VB: sl.SENSING_MODE.STANDARD
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: STANDARD
        path: ''
        startLine: 2981
      summary: "\nThis mode outputs the standard ZED depth map that preserves edges and depth accuracy.\nHowever, there will be missing data where a depth measurement couldn&apos;t be taken, such as from\na surface being occluded from one sensor but not the other.\nBetter for: Obstacle detection, autonomous navigation, people detection, 3D reconstruction.\n"
      example: []
      syntax:
        content:
          CSharp: STANDARD = 0
          VB: STANDARD = 0
        return:
          type: sl.SENSING_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.SENSING_MODE.FILL
      commentId: F:sl.SENSING_MODE.FILL
      language: CSharp
      name:
        CSharp: FILL
        VB: FILL
      nameWithType:
        CSharp: SENSING_MODE.FILL
        VB: SENSING_MODE.FILL
      qualifiedName:
        CSharp: sl.SENSING_MODE.FILL
        VB: sl.SENSING_MODE.FILL
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: FILL
        path: ''
        startLine: 2988
      summary: "\nThis mode outputs a smooth and fully dense depth map. It doesn&apos;t have gaps in the data\nlike STANDARD where depth can&apos;t be calculated directly, but the values it fills them with\nis less accurate than a real measurement.\nBetter for: AR/VR, mixed-reality capture, image post-processing.\n"
      example: []
      syntax:
        content:
          CSharp: FILL = 1
          VB: FILL = 1
        return:
          type: sl.SENSING_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.VIEW
    commentId: T:sl.VIEW
    language: CSharp
    name:
      CSharp: VIEW
      VB: VIEW
    nameWithType:
      CSharp: VIEW
      VB: VIEW
    qualifiedName:
      CSharp: sl.VIEW
      VB: sl.VIEW
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: VIEW
      path: ''
      startLine: 2997
    summary: "\nLists available view types retrieved from the camera, used for creating human-viewable (Image-type) textures.\n"
    remarks: "\nBased on the VIEW enum in the ZED C++ SDK. For more info, see:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/group__Video__group.html#ga77fc7bfc159040a1e2ffb074a8ad248c\n"
    example: []
    syntax:
      content:
        CSharp: public enum VIEW
        VB: Public Enum VIEW
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.VIEW.LEFT
      commentId: F:sl.VIEW.LEFT
      language: CSharp
      name:
        CSharp: LEFT
        VB: LEFT
      nameWithType:
        CSharp: VIEW.LEFT
        VB: VIEW.LEFT
      qualifiedName:
        CSharp: sl.VIEW.LEFT
        VB: sl.VIEW.LEFT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LEFT
        path: ''
        startLine: 3002
      summary: "\nLeft RGBA image. As a ZEDMat, MAT_TYPE is set to MAT_TYPE_8U_C4.\n"
      example: []
      syntax:
        content:
          CSharp: LEFT = 0
          VB: LEFT = 0
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.RIGHT
      commentId: F:sl.VIEW.RIGHT
      language: CSharp
      name:
        CSharp: RIGHT
        VB: RIGHT
      nameWithType:
        CSharp: VIEW.RIGHT
        VB: VIEW.RIGHT
      qualifiedName:
        CSharp: sl.VIEW.RIGHT
        VB: sl.VIEW.RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RIGHT
        path: ''
        startLine: 3006
      summary: "\nRight RGBA image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C4.\n"
      example: []
      syntax:
        content:
          CSharp: RIGHT = 1
          VB: RIGHT = 1
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.LEFT_GREY
      commentId: F:sl.VIEW.LEFT_GREY
      language: CSharp
      name:
        CSharp: LEFT_GREY
        VB: LEFT_GREY
      nameWithType:
        CSharp: VIEW.LEFT_GREY
        VB: VIEW.LEFT_GREY
      qualifiedName:
        CSharp: sl.VIEW.LEFT_GREY
        VB: sl.VIEW.LEFT_GREY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LEFT_GREY
        path: ''
        startLine: 3010
      summary: "\nLeft GRAY image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C1.\n"
      example: []
      syntax:
        content:
          CSharp: LEFT_GREY = 2
          VB: LEFT_GREY = 2
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.RIGHT_GREY
      commentId: F:sl.VIEW.RIGHT_GREY
      language: CSharp
      name:
        CSharp: RIGHT_GREY
        VB: RIGHT_GREY
      nameWithType:
        CSharp: VIEW.RIGHT_GREY
        VB: VIEW.RIGHT_GREY
      qualifiedName:
        CSharp: sl.VIEW.RIGHT_GREY
        VB: sl.VIEW.RIGHT_GREY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RIGHT_GREY
        path: ''
        startLine: 3014
      summary: "\nRight GRAY image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C1.\n"
      example: []
      syntax:
        content:
          CSharp: RIGHT_GREY = 3
          VB: RIGHT_GREY = 3
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.LEFT_UNRECTIFIED
      commentId: F:sl.VIEW.LEFT_UNRECTIFIED
      language: CSharp
      name:
        CSharp: LEFT_UNRECTIFIED
        VB: LEFT_UNRECTIFIED
      nameWithType:
        CSharp: VIEW.LEFT_UNRECTIFIED
        VB: VIEW.LEFT_UNRECTIFIED
      qualifiedName:
        CSharp: sl.VIEW.LEFT_UNRECTIFIED
        VB: sl.VIEW.LEFT_UNRECTIFIED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LEFT_UNRECTIFIED
        path: ''
        startLine: 3018
      summary: "\nLeft RGBA unrectified image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C4.\n"
      example: []
      syntax:
        content:
          CSharp: LEFT_UNRECTIFIED = 4
          VB: LEFT_UNRECTIFIED = 4
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.RIGHT_UNRECTIFIED
      commentId: F:sl.VIEW.RIGHT_UNRECTIFIED
      language: CSharp
      name:
        CSharp: RIGHT_UNRECTIFIED
        VB: RIGHT_UNRECTIFIED
      nameWithType:
        CSharp: VIEW.RIGHT_UNRECTIFIED
        VB: VIEW.RIGHT_UNRECTIFIED
      qualifiedName:
        CSharp: sl.VIEW.RIGHT_UNRECTIFIED
        VB: sl.VIEW.RIGHT_UNRECTIFIED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RIGHT_UNRECTIFIED
        path: ''
        startLine: 3022
      summary: "\nRight RGBA unrectified image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C4.\n"
      example: []
      syntax:
        content:
          CSharp: RIGHT_UNRECTIFIED = 5
          VB: RIGHT_UNRECTIFIED = 5
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.LEFT_UNRECTIFIED_GREY
      commentId: F:sl.VIEW.LEFT_UNRECTIFIED_GREY
      language: CSharp
      name:
        CSharp: LEFT_UNRECTIFIED_GREY
        VB: LEFT_UNRECTIFIED_GREY
      nameWithType:
        CSharp: VIEW.LEFT_UNRECTIFIED_GREY
        VB: VIEW.LEFT_UNRECTIFIED_GREY
      qualifiedName:
        CSharp: sl.VIEW.LEFT_UNRECTIFIED_GREY
        VB: sl.VIEW.LEFT_UNRECTIFIED_GREY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LEFT_UNRECTIFIED_GREY
        path: ''
        startLine: 3026
      summary: "\nLeft GRAY unrectified image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C1.\n"
      example: []
      syntax:
        content:
          CSharp: LEFT_UNRECTIFIED_GREY = 6
          VB: LEFT_UNRECTIFIED_GREY = 6
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.RIGHT_UNRECTIFIED_GREY
      commentId: F:sl.VIEW.RIGHT_UNRECTIFIED_GREY
      language: CSharp
      name:
        CSharp: RIGHT_UNRECTIFIED_GREY
        VB: RIGHT_UNRECTIFIED_GREY
      nameWithType:
        CSharp: VIEW.RIGHT_UNRECTIFIED_GREY
        VB: VIEW.RIGHT_UNRECTIFIED_GREY
      qualifiedName:
        CSharp: sl.VIEW.RIGHT_UNRECTIFIED_GREY
        VB: sl.VIEW.RIGHT_UNRECTIFIED_GREY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RIGHT_UNRECTIFIED_GREY
        path: ''
        startLine: 3030
      summary: "\nRight GRAY unrectified image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C1.\n"
      example: []
      syntax:
        content:
          CSharp: RIGHT_UNRECTIFIED_GREY = 7
          VB: RIGHT_UNRECTIFIED_GREY = 7
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.SIDE_BY_SIDE
      commentId: F:sl.VIEW.SIDE_BY_SIDE
      language: CSharp
      name:
        CSharp: SIDE_BY_SIDE
        VB: SIDE_BY_SIDE
      nameWithType:
        CSharp: VIEW.SIDE_BY_SIDE
        VB: VIEW.SIDE_BY_SIDE
      qualifiedName:
        CSharp: sl.VIEW.SIDE_BY_SIDE
        VB: sl.VIEW.SIDE_BY_SIDE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SIDE_BY_SIDE
        path: ''
        startLine: 3034
      summary: "\nLeft and right image. Will be double the width to hold both. As a ZEDMat, MAT_TYPE is set to MAT_8U_C4.\n"
      example: []
      syntax:
        content:
          CSharp: SIDE_BY_SIDE = 8
          VB: SIDE_BY_SIDE = 8
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.DEPTH
      commentId: F:sl.VIEW.DEPTH
      language: CSharp
      name:
        CSharp: DEPTH
        VB: DEPTH
      nameWithType:
        CSharp: VIEW.DEPTH
        VB: VIEW.DEPTH
      qualifiedName:
        CSharp: sl.VIEW.DEPTH
        VB: sl.VIEW.DEPTH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DEPTH
        path: ''
        startLine: 3040
      summary: "\nNormalized depth image. As a ZEDMat, MAT_TYPE is set to sl::MAT_TYPE_8U_C4.\n<p>Use an Image texture for viewing only. For measurements, use a Measure type instead\n(ZEDCamera.RetrieveMeasure()) to preserve accuracy. </p>\n"
      example: []
      syntax:
        content:
          CSharp: DEPTH = 9
          VB: DEPTH = 9
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.CONFIDENCE
      commentId: F:sl.VIEW.CONFIDENCE
      language: CSharp
      name:
        CSharp: CONFIDENCE
        VB: CONFIDENCE
      nameWithType:
        CSharp: VIEW.CONFIDENCE
        VB: VIEW.CONFIDENCE
      qualifiedName:
        CSharp: sl.VIEW.CONFIDENCE
        VB: sl.VIEW.CONFIDENCE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CONFIDENCE
        path: ''
        startLine: 3046
      summary: "\nNormalized confidence image. As a ZEDMat, MAT_TYPE is set to MAT_8U_C4.\n<p>Use an Image texture for viewing only. For measurements, use a Measure type instead\n(ZEDCamera.RetrieveMeasure()) to preserve accuracy. </p>\n"
      example: []
      syntax:
        content:
          CSharp: CONFIDENCE = 10
          VB: CONFIDENCE = 10
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.NORMALS
      commentId: F:sl.VIEW.NORMALS
      language: CSharp
      name:
        CSharp: NORMALS
        VB: NORMALS
      nameWithType:
        CSharp: VIEW.NORMALS
        VB: VIEW.NORMALS
      qualifiedName:
        CSharp: sl.VIEW.NORMALS
        VB: sl.VIEW.NORMALS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NORMALS
        path: ''
        startLine: 3052
      summary: "\nColor rendering of the normals. As a ZEDMat, MAT_TYPE is set to MAT_8U_C4.\n<p>Use an Image texture for viewing only. For measurements, use a Measure type instead\n(ZEDCamera.RetrieveMeasure()) to preserve accuracy. </p>\n"
      example: []
      syntax:
        content:
          CSharp: NORMALS = 11
          VB: NORMALS = 11
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.DEPTH_RIGHT
      commentId: F:sl.VIEW.DEPTH_RIGHT
      language: CSharp
      name:
        CSharp: DEPTH_RIGHT
        VB: DEPTH_RIGHT
      nameWithType:
        CSharp: VIEW.DEPTH_RIGHT
        VB: VIEW.DEPTH_RIGHT
      qualifiedName:
        CSharp: sl.VIEW.DEPTH_RIGHT
        VB: sl.VIEW.DEPTH_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DEPTH_RIGHT
        path: ''
        startLine: 3058
      summary: "\nColor rendering of the right depth mapped on right sensor. As a ZEDMat, MAT_TYPE is set to MAT_8U_C4.\n<p>Use an Image texture for viewing only. For measurements, use a Measure type instead\n(ZEDCamera.RetrieveMeasure()) to preserve accuracy. </p>\n"
      example: []
      syntax:
        content:
          CSharp: DEPTH_RIGHT = 12
          VB: DEPTH_RIGHT = 12
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.VIEW.NORMALS_RIGHT
      commentId: F:sl.VIEW.NORMALS_RIGHT
      language: CSharp
      name:
        CSharp: NORMALS_RIGHT
        VB: NORMALS_RIGHT
      nameWithType:
        CSharp: VIEW.NORMALS_RIGHT
        VB: VIEW.NORMALS_RIGHT
      qualifiedName:
        CSharp: sl.VIEW.NORMALS_RIGHT
        VB: sl.VIEW.NORMALS_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NORMALS_RIGHT
        path: ''
        startLine: 3064
      summary: "\nColor rendering of the normals mapped on right sensor. As a ZEDMat, MAT_TYPE is set to MAT_8U_C4.\n<p>Use an Image texture for viewing only. For measurements, use a Measure type instead\n(ZEDCamera.RetrieveMeasure()) to preserve accuracy. </p>\n"
      example: []
      syntax:
        content:
          CSharp: NORMALS_RIGHT = 13
          VB: NORMALS_RIGHT = 13
        return:
          type: sl.VIEW
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.CAMERA_SETTINGS
    commentId: T:sl.CAMERA_SETTINGS
    language: CSharp
    name:
      CSharp: CAMERA_SETTINGS
      VB: CAMERA_SETTINGS
    nameWithType:
      CSharp: CAMERA_SETTINGS
      VB: CAMERA_SETTINGS
    qualifiedName:
      CSharp: sl.CAMERA_SETTINGS
      VB: sl.CAMERA_SETTINGS
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: CAMERA_SETTINGS
      path: ''
      startLine: 3070
    summary: "\nLists available camera settings for the ZED camera (contrast, hue, saturation, gain, etc.)\n"
    example: []
    syntax:
      content:
        CSharp: public enum CAMERA_SETTINGS
        VB: Public Enum CAMERA_SETTINGS
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.CAMERA_SETTINGS.BRIGHTNESS
      commentId: F:sl.CAMERA_SETTINGS.BRIGHTNESS
      language: CSharp
      name:
        CSharp: BRIGHTNESS
        VB: BRIGHTNESS
      nameWithType:
        CSharp: CAMERA_SETTINGS.BRIGHTNESS
        VB: CAMERA_SETTINGS.BRIGHTNESS
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.BRIGHTNESS
        VB: sl.CAMERA_SETTINGS.BRIGHTNESS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: BRIGHTNESS
        path: ''
        startLine: 3075
      summary: "\nBrightness control. Value should be between 0 and 8.\n"
      example: []
      syntax:
        content:
          CSharp: BRIGHTNESS = 0
          VB: BRIGHTNESS = 0
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.CONTRAST
      commentId: F:sl.CAMERA_SETTINGS.CONTRAST
      language: CSharp
      name:
        CSharp: CONTRAST
        VB: CONTRAST
      nameWithType:
        CSharp: CAMERA_SETTINGS.CONTRAST
        VB: CAMERA_SETTINGS.CONTRAST
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.CONTRAST
        VB: sl.CAMERA_SETTINGS.CONTRAST
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CONTRAST
        path: ''
        startLine: 3079
      summary: "\nContrast control. Value should be between 0 and 8.\n"
      example: []
      syntax:
        content:
          CSharp: CONTRAST = 1
          VB: CONTRAST = 1
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.HUE
      commentId: F:sl.CAMERA_SETTINGS.HUE
      language: CSharp
      name:
        CSharp: HUE
        VB: HUE
      nameWithType:
        CSharp: CAMERA_SETTINGS.HUE
        VB: CAMERA_SETTINGS.HUE
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.HUE
        VB: sl.CAMERA_SETTINGS.HUE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: HUE
        path: ''
        startLine: 3083
      summary: "\nHue control. Value should be between 0 and 11.\n"
      example: []
      syntax:
        content:
          CSharp: HUE = 2
          VB: HUE = 2
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.SATURATION
      commentId: F:sl.CAMERA_SETTINGS.SATURATION
      language: CSharp
      name:
        CSharp: SATURATION
        VB: SATURATION
      nameWithType:
        CSharp: CAMERA_SETTINGS.SATURATION
        VB: CAMERA_SETTINGS.SATURATION
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.SATURATION
        VB: sl.CAMERA_SETTINGS.SATURATION
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SATURATION
        path: ''
        startLine: 3087
      summary: "\nSaturation control. Value should be between 0 and 8.\n"
      example: []
      syntax:
        content:
          CSharp: SATURATION = 3
          VB: SATURATION = 3
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.SHARPNESS
      commentId: F:sl.CAMERA_SETTINGS.SHARPNESS
      language: CSharp
      name:
        CSharp: SHARPNESS
        VB: SHARPNESS
      nameWithType:
        CSharp: CAMERA_SETTINGS.SHARPNESS
        VB: CAMERA_SETTINGS.SHARPNESS
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.SHARPNESS
        VB: sl.CAMERA_SETTINGS.SHARPNESS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SHARPNESS
        path: ''
        startLine: 3091
      summary: "\nSharpness control. Value should be between 0 and 8.\n"
      example: []
      syntax:
        content:
          CSharp: SHARPNESS = 4
          VB: SHARPNESS = 4
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.GAMMA
      commentId: F:sl.CAMERA_SETTINGS.GAMMA
      language: CSharp
      name:
        CSharp: GAMMA
        VB: GAMMA
      nameWithType:
        CSharp: CAMERA_SETTINGS.GAMMA
        VB: CAMERA_SETTINGS.GAMMA
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.GAMMA
        VB: sl.CAMERA_SETTINGS.GAMMA
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GAMMA
        path: ''
        startLine: 3095
      summary: "\nGamma control. Value should be between 1 and 9\n"
      example: []
      syntax:
        content:
          CSharp: GAMMA = 5
          VB: GAMMA = 5
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.GAIN
      commentId: F:sl.CAMERA_SETTINGS.GAIN
      language: CSharp
      name:
        CSharp: GAIN
        VB: GAIN
      nameWithType:
        CSharp: CAMERA_SETTINGS.GAIN
        VB: CAMERA_SETTINGS.GAIN
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.GAIN
        VB: sl.CAMERA_SETTINGS.GAIN
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GAIN
        path: ''
        startLine: 3100
      summary: "\nGain control. Value should be between 0 and 100 for manual control.\nIf ZED_EXPOSURE is set to -1 (automatic mode), then gain will be automatic as well.\n"
      example: []
      syntax:
        content:
          CSharp: GAIN = 6
          VB: GAIN = 6
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.EXPOSURE
      commentId: F:sl.CAMERA_SETTINGS.EXPOSURE
      language: CSharp
      name:
        CSharp: EXPOSURE
        VB: EXPOSURE
      nameWithType:
        CSharp: CAMERA_SETTINGS.EXPOSURE
        VB: CAMERA_SETTINGS.EXPOSURE
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.EXPOSURE
        VB: sl.CAMERA_SETTINGS.EXPOSURE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: EXPOSURE
        path: ''
        startLine: 3107
      summary: "\nExposure control. Value can be between 0 and 100.\nSetting to -1 enables auto exposure and auto gain.\nSetting to 0 disables auto exposure but doesn&apos;t change the last applied automatic values.\nSetting to 1-100 disables auto mode and sets exposure to the chosen value.\n"
      example: []
      syntax:
        content:
          CSharp: EXPOSURE = 7
          VB: EXPOSURE = 7
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.AEC_AGC
      commentId: F:sl.CAMERA_SETTINGS.AEC_AGC
      language: CSharp
      name:
        CSharp: AEC_AGC
        VB: AEC_AGC
      nameWithType:
        CSharp: CAMERA_SETTINGS.AEC_AGC
        VB: CAMERA_SETTINGS.AEC_AGC
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.AEC_AGC
        VB: sl.CAMERA_SETTINGS.AEC_AGC
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AEC_AGC
        path: ''
        startLine: 3111
      summary: "\nAuto-exposure and auto gain. Setting this to true switches on both. Assigning a specifc value to GAIN or EXPOSURE will set this to 0. \n"
      example: []
      syntax:
        content:
          CSharp: AEC_AGC = 8
          VB: AEC_AGC = 8
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.AEC_AGC_ROI
      commentId: F:sl.CAMERA_SETTINGS.AEC_AGC_ROI
      language: CSharp
      name:
        CSharp: AEC_AGC_ROI
        VB: AEC_AGC_ROI
      nameWithType:
        CSharp: CAMERA_SETTINGS.AEC_AGC_ROI
        VB: CAMERA_SETTINGS.AEC_AGC_ROI
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.AEC_AGC_ROI
        VB: sl.CAMERA_SETTINGS.AEC_AGC_ROI
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AEC_AGC_ROI
        path: ''
        startLine: 3116
      summary: "\nROI for auto exposure/gain. ROI defines the target where the AEC/AGC will be calculated\nUse overloaded function for this enum\n"
      example: []
      syntax:
        content:
          CSharp: AEC_AGC_ROI = 9
          VB: AEC_AGC_ROI = 9
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.WHITEBALANCE
      commentId: F:sl.CAMERA_SETTINGS.WHITEBALANCE
      language: CSharp
      name:
        CSharp: WHITEBALANCE
        VB: WHITEBALANCE
      nameWithType:
        CSharp: CAMERA_SETTINGS.WHITEBALANCE
        VB: CAMERA_SETTINGS.WHITEBALANCE
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.WHITEBALANCE
        VB: sl.CAMERA_SETTINGS.WHITEBALANCE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: WHITEBALANCE
        path: ''
        startLine: 3120
      summary: "\nColor temperature control. Value should be between 2800 and 6500 with a step of 100.\n"
      example: []
      syntax:
        content:
          CSharp: WHITEBALANCE = 10
          VB: WHITEBALANCE = 10
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.AUTO_WHITEBALANCE
      commentId: F:sl.CAMERA_SETTINGS.AUTO_WHITEBALANCE
      language: CSharp
      name:
        CSharp: AUTO_WHITEBALANCE
        VB: AUTO_WHITEBALANCE
      nameWithType:
        CSharp: CAMERA_SETTINGS.AUTO_WHITEBALANCE
        VB: CAMERA_SETTINGS.AUTO_WHITEBALANCE
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.AUTO_WHITEBALANCE
        VB: sl.CAMERA_SETTINGS.AUTO_WHITEBALANCE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AUTO_WHITEBALANCE
        path: ''
        startLine: 3124
      summary: "\nDefines if the white balance is in automatic mode or not.\n"
      example: []
      syntax:
        content:
          CSharp: AUTO_WHITEBALANCE = 11
          VB: AUTO_WHITEBALANCE = 11
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.CAMERA_SETTINGS.LED_STATUS
      commentId: F:sl.CAMERA_SETTINGS.LED_STATUS
      language: CSharp
      name:
        CSharp: LED_STATUS
        VB: LED_STATUS
      nameWithType:
        CSharp: CAMERA_SETTINGS.LED_STATUS
        VB: CAMERA_SETTINGS.LED_STATUS
      qualifiedName:
        CSharp: sl.CAMERA_SETTINGS.LED_STATUS
        VB: sl.CAMERA_SETTINGS.LED_STATUS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LED_STATUS
        path: ''
        startLine: 3128
      summary: "\nfront LED status (1==enable, 0 == disable)\n"
      example: []
      syntax:
        content:
          CSharp: LED_STATUS = 12
          VB: LED_STATUS = 12
        return:
          type: sl.CAMERA_SETTINGS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.MEASURE
    commentId: T:sl.MEASURE
    language: CSharp
    name:
      CSharp: MEASURE
      VB: MEASURE
    nameWithType:
      CSharp: MEASURE
      VB: MEASURE
    qualifiedName:
      CSharp: sl.MEASURE
      VB: sl.MEASURE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: MEASURE
      path: ''
      startLine: 3137
    summary: "\nLists available measure types retrieved from the camera, used for creating precise measurement maps\n(Measure-type textures).\nBased on the MEASURE enum in the ZED C++ SDK. For more info, see:\nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/group__Depth__group.html#ga798a8eed10c573d759ef7e5a5bcd545d\n"
    example: []
    syntax:
      content:
        CSharp: public enum MEASURE
        VB: Public Enum MEASURE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.MEASURE.DISPARITY
      commentId: F:sl.MEASURE.DISPARITY
      language: CSharp
      name:
        CSharp: DISPARITY
        VB: DISPARITY
      nameWithType:
        CSharp: MEASURE.DISPARITY
        VB: MEASURE.DISPARITY
      qualifiedName:
        CSharp: sl.MEASURE.DISPARITY
        VB: sl.MEASURE.DISPARITY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DISPARITY
        path: ''
        startLine: 3142
      summary: "\nDisparity map. As a ZEDMat, MAT_TYPE is set to MAT_32F_C1.\n"
      example: []
      syntax:
        content:
          CSharp: DISPARITY = 0
          VB: DISPARITY = 0
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.DEPTH
      commentId: F:sl.MEASURE.DEPTH
      language: CSharp
      name:
        CSharp: DEPTH
        VB: DEPTH
      nameWithType:
        CSharp: MEASURE.DEPTH
        VB: MEASURE.DEPTH
      qualifiedName:
        CSharp: sl.MEASURE.DEPTH
        VB: sl.MEASURE.DEPTH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DEPTH
        path: ''
        startLine: 3146
      summary: "\nDepth map. As a ZEDMat, MAT_TYPE is set to MAT_32F_C1.\n"
      example: []
      syntax:
        content:
          CSharp: DEPTH = 1
          VB: DEPTH = 1
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.CONFIDENCE
      commentId: F:sl.MEASURE.CONFIDENCE
      language: CSharp
      name:
        CSharp: CONFIDENCE
        VB: CONFIDENCE
      nameWithType:
        CSharp: MEASURE.CONFIDENCE
        VB: MEASURE.CONFIDENCE
      qualifiedName:
        CSharp: sl.MEASURE.CONFIDENCE
        VB: sl.MEASURE.CONFIDENCE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CONFIDENCE
        path: ''
        startLine: 3150
      summary: "\nCertainty/confidence of the disparity map. As a ZEDMat, MAT_TYPE is set to MAT_32F_C1.\n"
      example: []
      syntax:
        content:
          CSharp: CONFIDENCE = 2
          VB: CONFIDENCE = 2
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZ
      commentId: F:sl.MEASURE.XYZ
      language: CSharp
      name:
        CSharp: XYZ
        VB: XYZ
      nameWithType:
        CSharp: MEASURE.XYZ
        VB: MEASURE.XYZ
      qualifiedName:
        CSharp: sl.MEASURE.XYZ
        VB: sl.MEASURE.XYZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZ
        path: ''
        startLine: 3155
      summary: "\n3D coordinates of the image points. Used for point clouds in ZEDPointCloudManager.\nAs a ZEDMat, MAT_TYPE is set to MAT_32F_C4. The 4th channel may contain the colors.\n"
      example: []
      syntax:
        content:
          CSharp: XYZ = 3
          VB: XYZ = 3
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZRGBA
      commentId: F:sl.MEASURE.XYZRGBA
      language: CSharp
      name:
        CSharp: XYZRGBA
        VB: XYZRGBA
      nameWithType:
        CSharp: MEASURE.XYZRGBA
        VB: MEASURE.XYZRGBA
      qualifiedName:
        CSharp: sl.MEASURE.XYZRGBA
        VB: sl.MEASURE.XYZRGBA
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZRGBA
        path: ''
        startLine: 3160
      summary: "\n3D coordinates and color of the image. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nThe 4th channel encodes 4 UCHARs for colors in R-G-B-A order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZRGBA = 4
          VB: XYZRGBA = 4
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZBGRA
      commentId: F:sl.MEASURE.XYZBGRA
      language: CSharp
      name:
        CSharp: XYZBGRA
        VB: XYZBGRA
      nameWithType:
        CSharp: MEASURE.XYZBGRA
        VB: MEASURE.XYZBGRA
      qualifiedName:
        CSharp: sl.MEASURE.XYZBGRA
        VB: sl.MEASURE.XYZBGRA
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZBGRA
        path: ''
        startLine: 3165
      summary: "\n3D coordinates and color of the image. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nThe 4th channel encode 4 UCHARs for colors in B-G-R-A order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZBGRA = 5
          VB: XYZBGRA = 5
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZARGB
      commentId: F:sl.MEASURE.XYZARGB
      language: CSharp
      name:
        CSharp: XYZARGB
        VB: XYZARGB
      nameWithType:
        CSharp: MEASURE.XYZARGB
        VB: MEASURE.XYZARGB
      qualifiedName:
        CSharp: sl.MEASURE.XYZARGB
        VB: sl.MEASURE.XYZARGB
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZARGB
        path: ''
        startLine: 3170
      summary: "\n3D coordinates and color of the image. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nThe 4th channel encodes 4 UCHARs for color in A-R-G-B order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZARGB = 6
          VB: XYZARGB = 6
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZABGR
      commentId: F:sl.MEASURE.XYZABGR
      language: CSharp
      name:
        CSharp: XYZABGR
        VB: XYZABGR
      nameWithType:
        CSharp: MEASURE.XYZABGR
        VB: MEASURE.XYZABGR
      qualifiedName:
        CSharp: sl.MEASURE.XYZABGR
        VB: sl.MEASURE.XYZABGR
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZABGR
        path: ''
        startLine: 3175
      summary: "\n3D coordinates and color of the image. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nChannel 4 contains color in A-B-G-R order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZABGR = 7
          VB: XYZABGR = 7
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.NORMALS
      commentId: F:sl.MEASURE.NORMALS
      language: CSharp
      name:
        CSharp: NORMALS
        VB: NORMALS
      nameWithType:
        CSharp: MEASURE.NORMALS
        VB: MEASURE.NORMALS
      qualifiedName:
        CSharp: sl.MEASURE.NORMALS
        VB: sl.MEASURE.NORMALS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NORMALS
        path: ''
        startLine: 3180
      summary: "\n3D coordinates and color of the image. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nThe 4th channel encode 4 UCHARs for color in A-B-G-R order.\n"
      example: []
      syntax:
        content:
          CSharp: NORMALS = 8
          VB: NORMALS = 8
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.DISPARITY_RIGHT
      commentId: F:sl.MEASURE.DISPARITY_RIGHT
      language: CSharp
      name:
        CSharp: DISPARITY_RIGHT
        VB: DISPARITY_RIGHT
      nameWithType:
        CSharp: MEASURE.DISPARITY_RIGHT
        VB: MEASURE.DISPARITY_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.DISPARITY_RIGHT
        VB: sl.MEASURE.DISPARITY_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DISPARITY_RIGHT
        path: ''
        startLine: 3184
      summary: "\nDisparity map for the right sensor. As a ZEDMat, MAT_TYPE is set to  MAT_32F_C1.\n"
      example: []
      syntax:
        content:
          CSharp: DISPARITY_RIGHT = 9
          VB: DISPARITY_RIGHT = 9
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.DEPTH_RIGHT
      commentId: F:sl.MEASURE.DEPTH_RIGHT
      language: CSharp
      name:
        CSharp: DEPTH_RIGHT
        VB: DEPTH_RIGHT
      nameWithType:
        CSharp: MEASURE.DEPTH_RIGHT
        VB: MEASURE.DEPTH_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.DEPTH_RIGHT
        VB: sl.MEASURE.DEPTH_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: DEPTH_RIGHT
        path: ''
        startLine: 3188
      summary: "\nDepth map for right sensor. As a ZEDMat, MAT_TYPE is set to MAT_32F_C1.\n"
      example: []
      syntax:
        content:
          CSharp: DEPTH_RIGHT = 10
          VB: DEPTH_RIGHT = 10
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZ_RIGHT
      commentId: F:sl.MEASURE.XYZ_RIGHT
      language: CSharp
      name:
        CSharp: XYZ_RIGHT
        VB: XYZ_RIGHT
      nameWithType:
        CSharp: MEASURE.XYZ_RIGHT
        VB: MEASURE.XYZ_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.XYZ_RIGHT
        VB: sl.MEASURE.XYZ_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZ_RIGHT
        path: ''
        startLine: 3192
      summary: "\nPoint cloud for right sensor. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4. Channel 4 is empty.\n"
      example: []
      syntax:
        content:
          CSharp: XYZ_RIGHT = 11
          VB: XYZ_RIGHT = 11
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZRGBA_RIGHT
      commentId: F:sl.MEASURE.XYZRGBA_RIGHT
      language: CSharp
      name:
        CSharp: XYZRGBA_RIGHT
        VB: XYZRGBA_RIGHT
      nameWithType:
        CSharp: MEASURE.XYZRGBA_RIGHT
        VB: MEASURE.XYZRGBA_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.XYZRGBA_RIGHT
        VB: sl.MEASURE.XYZRGBA_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZRGBA_RIGHT
        path: ''
        startLine: 3197
      summary: "\nColored point cloud for right sensor. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nChannel 4 contains colors in R-G-B-A order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZRGBA_RIGHT = 12
          VB: XYZRGBA_RIGHT = 12
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZBGRA_RIGHT
      commentId: F:sl.MEASURE.XYZBGRA_RIGHT
      language: CSharp
      name:
        CSharp: XYZBGRA_RIGHT
        VB: XYZBGRA_RIGHT
      nameWithType:
        CSharp: MEASURE.XYZBGRA_RIGHT
        VB: MEASURE.XYZBGRA_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.XYZBGRA_RIGHT
        VB: sl.MEASURE.XYZBGRA_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZBGRA_RIGHT
        path: ''
        startLine: 3202
      summary: "\nColored point cloud for right sensor. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nChannel 4 contains colors in B-G-R-A order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZBGRA_RIGHT = 13
          VB: XYZBGRA_RIGHT = 13
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZARGB_RIGHT
      commentId: F:sl.MEASURE.XYZARGB_RIGHT
      language: CSharp
      name:
        CSharp: XYZARGB_RIGHT
        VB: XYZARGB_RIGHT
      nameWithType:
        CSharp: MEASURE.XYZARGB_RIGHT
        VB: MEASURE.XYZARGB_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.XYZARGB_RIGHT
        VB: sl.MEASURE.XYZARGB_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZARGB_RIGHT
        path: ''
        startLine: 3207
      summary: "\nColored point cloud for right sensor. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nChannel 4 contains colors in A-R-G-B order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZARGB_RIGHT = 14
          VB: XYZARGB_RIGHT = 14
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.XYZABGR_RIGHT
      commentId: F:sl.MEASURE.XYZABGR_RIGHT
      language: CSharp
      name:
        CSharp: XYZABGR_RIGHT
        VB: XYZABGR_RIGHT
      nameWithType:
        CSharp: MEASURE.XYZABGR_RIGHT
        VB: MEASURE.XYZABGR_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.XYZABGR_RIGHT
        VB: sl.MEASURE.XYZABGR_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: XYZABGR_RIGHT
        path: ''
        startLine: 3212
      summary: "\nColored point cloud for right sensor. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nChannel 4 contains colors in A-B-G-R order.\n"
      example: []
      syntax:
        content:
          CSharp: XYZABGR_RIGHT = 15
          VB: XYZABGR_RIGHT = 15
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEASURE.NORMALS_RIGHT
      commentId: F:sl.MEASURE.NORMALS_RIGHT
      language: CSharp
      name:
        CSharp: NORMALS_RIGHT
        VB: NORMALS_RIGHT
      nameWithType:
        CSharp: MEASURE.NORMALS_RIGHT
        VB: MEASURE.NORMALS_RIGHT
      qualifiedName:
        CSharp: sl.MEASURE.NORMALS_RIGHT
        VB: sl.MEASURE.NORMALS_RIGHT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: NORMALS_RIGHT
        path: ''
        startLine: 3217
      summary: "\nNormals vector for right view. As a ZEDMat, MAT_TYPE is set to MAT_32F_C4.\nChannel 4 is empty (set to 0).\n"
      example: []
      syntax:
        content:
          CSharp: NORMALS_RIGHT = 16
          VB: NORMALS_RIGHT = 16
        return:
          type: sl.MEASURE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.TIME_REFERENCE
    commentId: T:sl.TIME_REFERENCE
    language: CSharp
    name:
      CSharp: TIME_REFERENCE
      VB: TIME_REFERENCE
    nameWithType:
      CSharp: TIME_REFERENCE
      VB: TIME_REFERENCE
    qualifiedName:
      CSharp: sl.TIME_REFERENCE
      VB: sl.TIME_REFERENCE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: TIME_REFERENCE
      path: ''
      startLine: 3225
    summary: "\nCategories indicating when a timestamp is captured.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TIME_REFERENCE
        VB: Public Enum TIME_REFERENCE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.TIME_REFERENCE.IMAGE
      commentId: F:sl.TIME_REFERENCE.IMAGE
      language: CSharp
      name:
        CSharp: IMAGE
        VB: IMAGE
      nameWithType:
        CSharp: TIME_REFERENCE.IMAGE
        VB: TIME_REFERENCE.IMAGE
      qualifiedName:
        CSharp: sl.TIME_REFERENCE.IMAGE
        VB: sl.TIME_REFERENCE.IMAGE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: IMAGE
        path: ''
        startLine: 3231
      summary: "\nTimestamp from when the image was received over USB from the camera, defined\nby when the entire image was available in memory.\n"
      example: []
      syntax:
        content:
          CSharp: IMAGE = 0
          VB: IMAGE = 0
        return:
          type: sl.TIME_REFERENCE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.TIME_REFERENCE.CURRENT
      commentId: F:sl.TIME_REFERENCE.CURRENT
      language: CSharp
      name:
        CSharp: CURRENT
        VB: CURRENT
      nameWithType:
        CSharp: TIME_REFERENCE.CURRENT
        VB: TIME_REFERENCE.CURRENT
      qualifiedName:
        CSharp: sl.TIME_REFERENCE.CURRENT
        VB: sl.TIME_REFERENCE.CURRENT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CURRENT
        path: ''
        startLine: 3235
      summary: "\nTimestamp from when the relevant function was called.\n"
      example: []
      syntax:
        content:
          CSharp: CURRENT = 1
          VB: CURRENT = 1
        return:
          type: sl.TIME_REFERENCE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.REFERENCE_FRAME
    commentId: T:sl.REFERENCE_FRAME
    language: CSharp
    name:
      CSharp: REFERENCE_FRAME
      VB: REFERENCE_FRAME
    nameWithType:
      CSharp: REFERENCE_FRAME
      VB: REFERENCE_FRAME
    qualifiedName:
      CSharp: sl.REFERENCE_FRAME
      VB: sl.REFERENCE_FRAME
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: REFERENCE_FRAME
      path: ''
      startLine: 3241
    summary: "\nReference frame (world or camera) for tracking and depth sensing.\n"
    example: []
    syntax:
      content:
        CSharp: public enum REFERENCE_FRAME
        VB: Public Enum REFERENCE_FRAME
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.REFERENCE_FRAME.WORLD
      commentId: F:sl.REFERENCE_FRAME.WORLD
      language: CSharp
      name:
        CSharp: WORLD
        VB: WORLD
      nameWithType:
        CSharp: REFERENCE_FRAME.WORLD
        VB: REFERENCE_FRAME.WORLD
      qualifiedName:
        CSharp: sl.REFERENCE_FRAME.WORLD
        VB: sl.REFERENCE_FRAME.WORLD
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: WORLD
        path: ''
        startLine: 3246
      summary: "\nMatrix contains the total displacement from the world origin/the first tracked point.\n"
      example: []
      syntax:
        content:
          CSharp: WORLD = 0
          VB: WORLD = 0
        return:
          type: sl.REFERENCE_FRAME
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.REFERENCE_FRAME.CAMERA
      commentId: F:sl.REFERENCE_FRAME.CAMERA
      language: CSharp
      name:
        CSharp: CAMERA
        VB: CAMERA
      nameWithType:
        CSharp: REFERENCE_FRAME.CAMERA
        VB: REFERENCE_FRAME.CAMERA
      qualifiedName:
        CSharp: sl.REFERENCE_FRAME.CAMERA
        VB: sl.REFERENCE_FRAME.CAMERA
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CAMERA
        path: ''
        startLine: 3250
      summary: "\nMatrix contains the displacement from the previous camera position to the current one.\n"
      example: []
      syntax:
        content:
          CSharp: CAMERA = 1
          VB: CAMERA = 1
        return:
          type: sl.REFERENCE_FRAME
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.TRACKING_STATE
    commentId: T:sl.TRACKING_STATE
    language: CSharp
    name:
      CSharp: TRACKING_STATE
      VB: TRACKING_STATE
    nameWithType:
      CSharp: TRACKING_STATE
      VB: TRACKING_STATE
    qualifiedName:
      CSharp: sl.TRACKING_STATE
      VB: sl.TRACKING_STATE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: TRACKING_STATE
      path: ''
      startLine: 3256
    summary: "\nPossible states of the ZED&apos;s Tracking system.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TRACKING_STATE
        VB: Public Enum TRACKING_STATE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.TRACKING_STATE.TRACKING_SEARCH
      commentId: F:sl.TRACKING_STATE.TRACKING_SEARCH
      language: CSharp
      name:
        CSharp: TRACKING_SEARCH
        VB: TRACKING_SEARCH
      nameWithType:
        CSharp: TRACKING_STATE.TRACKING_SEARCH
        VB: TRACKING_STATE.TRACKING_SEARCH
      qualifiedName:
        CSharp: sl.TRACKING_STATE.TRACKING_SEARCH
        VB: sl.TRACKING_STATE.TRACKING_SEARCH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: TRACKING_SEARCH
        path: ''
        startLine: 3261
      summary: "\nTracking is searching for a match from the database to relocate to a previously known position.\n"
      example: []
      syntax:
        content:
          CSharp: TRACKING_SEARCH = 0
          VB: TRACKING_SEARCH = 0
        return:
          type: sl.TRACKING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.TRACKING_STATE.TRACKING_OK
      commentId: F:sl.TRACKING_STATE.TRACKING_OK
      language: CSharp
      name:
        CSharp: TRACKING_OK
        VB: TRACKING_OK
      nameWithType:
        CSharp: TRACKING_STATE.TRACKING_OK
        VB: TRACKING_STATE.TRACKING_OK
      qualifiedName:
        CSharp: sl.TRACKING_STATE.TRACKING_OK
        VB: sl.TRACKING_STATE.TRACKING_OK
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: TRACKING_OK
        path: ''
        startLine: 3265
      summary: "\nTracking is operating normally; tracking data should be correct.\n"
      example: []
      syntax:
        content:
          CSharp: TRACKING_OK = 1
          VB: TRACKING_OK = 1
        return:
          type: sl.TRACKING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.TRACKING_STATE.TRACKING_OFF
      commentId: F:sl.TRACKING_STATE.TRACKING_OFF
      language: CSharp
      name:
        CSharp: TRACKING_OFF
        VB: TRACKING_OFF
      nameWithType:
        CSharp: TRACKING_STATE.TRACKING_OFF
        VB: TRACKING_STATE.TRACKING_OFF
      qualifiedName:
        CSharp: sl.TRACKING_STATE.TRACKING_OFF
        VB: sl.TRACKING_STATE.TRACKING_OFF
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: TRACKING_OFF
        path: ''
        startLine: 3269
      summary: "\nTracking is not enabled.\n"
      example: []
      syntax:
        content:
          CSharp: TRACKING_OFF = 2
          VB: TRACKING_OFF = 2
        return:
          type: sl.TRACKING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.SVO_COMPRESSION_MODE
    commentId: T:sl.SVO_COMPRESSION_MODE
    language: CSharp
    name:
      CSharp: SVO_COMPRESSION_MODE
      VB: SVO_COMPRESSION_MODE
    nameWithType:
      CSharp: SVO_COMPRESSION_MODE
      VB: SVO_COMPRESSION_MODE
    qualifiedName:
      CSharp: sl.SVO_COMPRESSION_MODE
      VB: sl.SVO_COMPRESSION_MODE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: SVO_COMPRESSION_MODE
      path: ''
      startLine: 3275
    summary: "\nSVO compression modes.\n"
    example: []
    syntax:
      content:
        CSharp: public enum SVO_COMPRESSION_MODE
        VB: Public Enum SVO_COMPRESSION_MODE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.SVO_COMPRESSION_MODE.LOSSLESS_BASED
      commentId: F:sl.SVO_COMPRESSION_MODE.LOSSLESS_BASED
      language: CSharp
      name:
        CSharp: LOSSLESS_BASED
        VB: LOSSLESS_BASED
      nameWithType:
        CSharp: SVO_COMPRESSION_MODE.LOSSLESS_BASED
        VB: SVO_COMPRESSION_MODE.LOSSLESS_BASED
      qualifiedName:
        CSharp: sl.SVO_COMPRESSION_MODE.LOSSLESS_BASED
        VB: sl.SVO_COMPRESSION_MODE.LOSSLESS_BASED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LOSSLESS_BASED
        path: ''
        startLine: 3280
      summary: "\nLossless compression based on png/zstd. Average size = 42% of RAW.\n"
      example: []
      syntax:
        content:
          CSharp: LOSSLESS_BASED = 0
          VB: LOSSLESS_BASED = 0
        return:
          type: sl.SVO_COMPRESSION_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.SVO_COMPRESSION_MODE.H264_BASED
      commentId: F:sl.SVO_COMPRESSION_MODE.H264_BASED
      language: CSharp
      name:
        CSharp: H264_BASED
        VB: H264_BASED
      nameWithType:
        CSharp: SVO_COMPRESSION_MODE.H264_BASED
        VB: SVO_COMPRESSION_MODE.H264_BASED
      qualifiedName:
        CSharp: sl.SVO_COMPRESSION_MODE.H264_BASED
        VB: sl.SVO_COMPRESSION_MODE.H264_BASED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: H264_BASED
        path: ''
        startLine: 3284
      summary: "\nAVCHD Based compression (H264). Available since ZED SDK 2.7\n"
      example: []
      syntax:
        content:
          CSharp: H264_BASED = 1
          VB: H264_BASED = 1
        return:
          type: sl.SVO_COMPRESSION_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.SVO_COMPRESSION_MODE.H265_BASED
      commentId: F:sl.SVO_COMPRESSION_MODE.H265_BASED
      language: CSharp
      name:
        CSharp: H265_BASED
        VB: H265_BASED
      nameWithType:
        CSharp: SVO_COMPRESSION_MODE.H265_BASED
        VB: SVO_COMPRESSION_MODE.H265_BASED
      qualifiedName:
        CSharp: sl.SVO_COMPRESSION_MODE.H265_BASED
        VB: sl.SVO_COMPRESSION_MODE.H265_BASED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: H265_BASED
        path: ''
        startLine: 3288
      summary: "\nHEVC Based compression (H265). Available since ZED SDK 2.7\n"
      example: []
      syntax:
        content:
          CSharp: H265_BASED = 2
          VB: H265_BASED = 2
        return:
          type: sl.SVO_COMPRESSION_MODE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.STREAMING_CODEC
    commentId: T:sl.STREAMING_CODEC
    language: CSharp
    name:
      CSharp: STREAMING_CODEC
      VB: STREAMING_CODEC
    nameWithType:
      CSharp: STREAMING_CODEC
      VB: STREAMING_CODEC
    qualifiedName:
      CSharp: sl.STREAMING_CODEC
      VB: sl.STREAMING_CODEC
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: STREAMING_CODEC
      path: ''
      startLine: 3295
    summary: "\nStreaming codecs\n"
    example: []
    syntax:
      content:
        CSharp: public enum STREAMING_CODEC
        VB: Public Enum STREAMING_CODEC
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.STREAMING_CODEC.AVCHD_BASED
      commentId: F:sl.STREAMING_CODEC.AVCHD_BASED
      language: CSharp
      name:
        CSharp: AVCHD_BASED
        VB: AVCHD_BASED
      nameWithType:
        CSharp: STREAMING_CODEC.AVCHD_BASED
        VB: STREAMING_CODEC.AVCHD_BASED
      qualifiedName:
        CSharp: sl.STREAMING_CODEC.AVCHD_BASED
        VB: sl.STREAMING_CODEC.AVCHD_BASED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AVCHD_BASED
        path: ''
        startLine: 3300
      summary: "\nAVCHD Based compression (H264)\n"
      example: []
      syntax:
        content:
          CSharp: AVCHD_BASED = 0
          VB: AVCHD_BASED = 0
        return:
          type: sl.STREAMING_CODEC
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.STREAMING_CODEC.HEVC_BASED
      commentId: F:sl.STREAMING_CODEC.HEVC_BASED
      language: CSharp
      name:
        CSharp: HEVC_BASED
        VB: HEVC_BASED
      nameWithType:
        CSharp: STREAMING_CODEC.HEVC_BASED
        VB: STREAMING_CODEC.HEVC_BASED
      qualifiedName:
        CSharp: sl.STREAMING_CODEC.HEVC_BASED
        VB: sl.STREAMING_CODEC.HEVC_BASED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: HEVC_BASED
        path: ''
        startLine: 3304
      summary: "\nHEVC Based compression (H265)\n"
      example: []
      syntax:
        content:
          CSharp: HEVC_BASED = 1
          VB: HEVC_BASED = 1
        return:
          type: sl.STREAMING_CODEC
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.MESH_FILE_FORMAT
    commentId: T:sl.MESH_FILE_FORMAT
    language: CSharp
    name:
      CSharp: MESH_FILE_FORMAT
      VB: MESH_FILE_FORMAT
    nameWithType:
      CSharp: MESH_FILE_FORMAT
      VB: MESH_FILE_FORMAT
    qualifiedName:
      CSharp: sl.MESH_FILE_FORMAT
      VB: sl.MESH_FILE_FORMAT
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: MESH_FILE_FORMAT
      path: ''
      startLine: 3310
    summary: "\nMesh formats that can be saved/loaded with spatial mapping.\n"
    example: []
    syntax:
      content:
        CSharp: public enum MESH_FILE_FORMAT
        VB: Public Enum MESH_FILE_FORMAT
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.MESH_FILE_FORMAT.PLY
      commentId: F:sl.MESH_FILE_FORMAT.PLY
      language: CSharp
      name:
        CSharp: PLY
        VB: PLY
      nameWithType:
        CSharp: MESH_FILE_FORMAT.PLY
        VB: MESH_FILE_FORMAT.PLY
      qualifiedName:
        CSharp: sl.MESH_FILE_FORMAT.PLY
        VB: sl.MESH_FILE_FORMAT.PLY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: PLY
        path: ''
        startLine: 3315
      summary: "\nContains only vertices and faces.\n"
      example: []
      syntax:
        content:
          CSharp: PLY = 0
          VB: PLY = 0
        return:
          type: sl.MESH_FILE_FORMAT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MESH_FILE_FORMAT.BIN
      commentId: F:sl.MESH_FILE_FORMAT.BIN
      language: CSharp
      name:
        CSharp: BIN
        VB: BIN
      nameWithType:
        CSharp: MESH_FILE_FORMAT.BIN
        VB: MESH_FILE_FORMAT.BIN
      qualifiedName:
        CSharp: sl.MESH_FILE_FORMAT.BIN
        VB: sl.MESH_FILE_FORMAT.BIN
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: BIN
        path: ''
        startLine: 3319
      summary: "\nContains only vertices and faces, encoded in binary.\n"
      example: []
      syntax:
        content:
          CSharp: BIN = 1
          VB: BIN = 1
        return:
          type: sl.MESH_FILE_FORMAT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MESH_FILE_FORMAT.OBJ
      commentId: F:sl.MESH_FILE_FORMAT.OBJ
      language: CSharp
      name:
        CSharp: OBJ
        VB: OBJ
      nameWithType:
        CSharp: MESH_FILE_FORMAT.OBJ
        VB: MESH_FILE_FORMAT.OBJ
      qualifiedName:
        CSharp: sl.MESH_FILE_FORMAT.OBJ
        VB: sl.MESH_FILE_FORMAT.OBJ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: OBJ
        path: ''
        startLine: 3323
      summary: "\nContains vertices, normals, faces, and texture information (if possible).\n"
      example: []
      syntax:
        content:
          CSharp: OBJ = 2
          VB: OBJ = 2
        return:
          type: sl.MESH_FILE_FORMAT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.FILTER
    commentId: T:sl.FILTER
    language: CSharp
    name:
      CSharp: FILTER
      VB: FILTER
    nameWithType:
      CSharp: FILTER
      VB: FILTER
    qualifiedName:
      CSharp: sl.FILTER
      VB: sl.FILTER
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: FILTER
      path: ''
      startLine: 3329
    summary: "\nPresets for filtering meshes scannedw ith spatial mapping. Higher values reduce total face count by more.\n"
    example: []
    syntax:
      content:
        CSharp: public enum FILTER
        VB: Public Enum FILTER
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.FILTER.LOW
      commentId: F:sl.FILTER.LOW
      language: CSharp
      name:
        CSharp: LOW
        VB: LOW
      nameWithType:
        CSharp: FILTER.LOW
        VB: FILTER.LOW
      qualifiedName:
        CSharp: sl.FILTER.LOW
        VB: sl.FILTER.LOW
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LOW
        path: ''
        startLine: 3334
      summary: "\nSoft decimation and smoothing.\n"
      example: []
      syntax:
        content:
          CSharp: LOW = 0
          VB: LOW = 0
        return:
          type: sl.FILTER
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.FILTER.MEDIUM
      commentId: F:sl.FILTER.MEDIUM
      language: CSharp
      name:
        CSharp: MEDIUM
        VB: MEDIUM
      nameWithType:
        CSharp: FILTER.MEDIUM
        VB: FILTER.MEDIUM
      qualifiedName:
        CSharp: sl.FILTER.MEDIUM
        VB: sl.FILTER.MEDIUM
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MEDIUM
        path: ''
        startLine: 3338
      summary: "\nDecimate the number of faces and apply a soft smooth.\n"
      example: []
      syntax:
        content:
          CSharp: MEDIUM = 1
          VB: MEDIUM = 1
        return:
          type: sl.FILTER
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.FILTER.HIGH
      commentId: F:sl.FILTER.HIGH
      language: CSharp
      name:
        CSharp: HIGH
        VB: HIGH
      nameWithType:
        CSharp: FILTER.HIGH
        VB: FILTER.HIGH
      qualifiedName:
        CSharp: sl.FILTER.HIGH
        VB: sl.FILTER.HIGH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: HIGH
        path: ''
        startLine: 3342
      summary: "\nDrastically reduce the number of faces.\n"
      example: []
      syntax:
        content:
          CSharp: HIGH = 2
          VB: HIGH = 2
        return:
          type: sl.FILTER
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.SPATIAL_MAPPING_STATE
    commentId: T:sl.SPATIAL_MAPPING_STATE
    language: CSharp
    name:
      CSharp: SPATIAL_MAPPING_STATE
      VB: SPATIAL_MAPPING_STATE
    nameWithType:
      CSharp: SPATIAL_MAPPING_STATE
      VB: SPATIAL_MAPPING_STATE
    qualifiedName:
      CSharp: sl.SPATIAL_MAPPING_STATE
      VB: sl.SPATIAL_MAPPING_STATE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: SPATIAL_MAPPING_STATE
      path: ''
      startLine: 3348
    summary: "\nPossible states of the ZED&apos;s Spatial Mapping system.\n"
    example: []
    syntax:
      content:
        CSharp: public enum SPATIAL_MAPPING_STATE
        VB: Public Enum SPATIAL_MAPPING_STATE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_INITIALIZING
      commentId: F:sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_INITIALIZING
      language: CSharp
      name:
        CSharp: SPATIAL_MAPPING_STATE_INITIALIZING
        VB: SPATIAL_MAPPING_STATE_INITIALIZING
      nameWithType:
        CSharp: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_INITIALIZING
        VB: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_INITIALIZING
      qualifiedName:
        CSharp: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_INITIALIZING
        VB: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_INITIALIZING
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SPATIAL_MAPPING_STATE_INITIALIZING
        path: ''
        startLine: 3353
      summary: "\nSpatial mapping is initializing.\n"
      example: []
      syntax:
        content:
          CSharp: SPATIAL_MAPPING_STATE_INITIALIZING = 0
          VB: SPATIAL_MAPPING_STATE_INITIALIZING = 0
        return:
          type: sl.SPATIAL_MAPPING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_OK
      commentId: F:sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_OK
      language: CSharp
      name:
        CSharp: SPATIAL_MAPPING_STATE_OK
        VB: SPATIAL_MAPPING_STATE_OK
      nameWithType:
        CSharp: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_OK
        VB: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_OK
      qualifiedName:
        CSharp: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_OK
        VB: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_OK
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SPATIAL_MAPPING_STATE_OK
        path: ''
        startLine: 3357
      summary: "\nDepth and tracking data were correctly integrated into the fusion algorithm.\n"
      example: []
      syntax:
        content:
          CSharp: SPATIAL_MAPPING_STATE_OK = 1
          VB: SPATIAL_MAPPING_STATE_OK = 1
        return:
          type: sl.SPATIAL_MAPPING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
      commentId: F:sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
      language: CSharp
      name:
        CSharp: SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
        VB: SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
      nameWithType:
        CSharp: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
        VB: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
      qualifiedName:
        CSharp: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
        VB: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY
        path: ''
        startLine: 3361
      summary: "\nMaximum memory dedicated to scanning has been reached; the mesh will no longer be updated.\n"
      example: []
      syntax:
        content:
          CSharp: SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY = 2
          VB: SPATIAL_MAPPING_STATE_NOT_ENOUGH_MEMORY = 2
        return:
          type: sl.SPATIAL_MAPPING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENABLED
      commentId: F:sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENABLED
      language: CSharp
      name:
        CSharp: SPATIAL_MAPPING_STATE_NOT_ENABLED
        VB: SPATIAL_MAPPING_STATE_NOT_ENABLED
      nameWithType:
        CSharp: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENABLED
        VB: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENABLED
      qualifiedName:
        CSharp: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENABLED
        VB: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_NOT_ENABLED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SPATIAL_MAPPING_STATE_NOT_ENABLED
        path: ''
        startLine: 3365
      summary: "\nEnableSpatialMapping() wasn&apos;t called (or the scanning was stopped and not relaunched).\n"
      example: []
      syntax:
        content:
          CSharp: SPATIAL_MAPPING_STATE_NOT_ENABLED = 3
          VB: SPATIAL_MAPPING_STATE_NOT_ENABLED = 3
        return:
          type: sl.SPATIAL_MAPPING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_FPS_TOO_LOW
      commentId: F:sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_FPS_TOO_LOW
      language: CSharp
      name:
        CSharp: SPATIAL_MAPPING_STATE_FPS_TOO_LOW
        VB: SPATIAL_MAPPING_STATE_FPS_TOO_LOW
      nameWithType:
        CSharp: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_FPS_TOO_LOW
        VB: SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_FPS_TOO_LOW
      qualifiedName:
        CSharp: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_FPS_TOO_LOW
        VB: sl.SPATIAL_MAPPING_STATE.SPATIAL_MAPPING_STATE_FPS_TOO_LOW
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SPATIAL_MAPPING_STATE_FPS_TOO_LOW
        path: ''
        startLine: 3371
      summary: "\nEffective FPS is too low to give proper results for spatial mapping.\nConsider using performance-friendly parameters (DEPTH_MODE_PERFORMANCE, VGA or HD720 camera resolution,\nand LOW spatial mapping resolution).\n"
      example: []
      syntax:
        content:
          CSharp: SPATIAL_MAPPING_STATE_FPS_TOO_LOW = 4
          VB: SPATIAL_MAPPING_STATE_FPS_TOO_LOW = 4
        return:
          type: sl.SPATIAL_MAPPING_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.UNIT
    commentId: T:sl.UNIT
    language: CSharp
    name:
      CSharp: UNIT
      VB: UNIT
    nameWithType:
      CSharp: UNIT
      VB: UNIT
    qualifiedName:
      CSharp: sl.UNIT
      VB: sl.UNIT
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: UNIT
      path: ''
      startLine: 3377
    summary: "\nUnits used by the SDK for measurements and tracking. METER is best to stay consistent with Unity.\n"
    example: []
    syntax:
      content:
        CSharp: public enum UNIT
        VB: Public Enum UNIT
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.UNIT.MILLIMETER
      commentId: F:sl.UNIT.MILLIMETER
      language: CSharp
      name:
        CSharp: MILLIMETER
        VB: MILLIMETER
      nameWithType:
        CSharp: UNIT.MILLIMETER
        VB: UNIT.MILLIMETER
      qualifiedName:
        CSharp: sl.UNIT.MILLIMETER
        VB: sl.UNIT.MILLIMETER
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MILLIMETER
        path: ''
        startLine: 3382
      summary: "\nInternational System, 1/1000 meters.\n"
      example: []
      syntax:
        content:
          CSharp: MILLIMETER = 0
          VB: MILLIMETER = 0
        return:
          type: sl.UNIT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.UNIT.CENTIMETER
      commentId: F:sl.UNIT.CENTIMETER
      language: CSharp
      name:
        CSharp: CENTIMETER
        VB: CENTIMETER
      nameWithType:
        CSharp: UNIT.CENTIMETER
        VB: UNIT.CENTIMETER
      qualifiedName:
        CSharp: sl.UNIT.CENTIMETER
        VB: sl.UNIT.CENTIMETER
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CENTIMETER
        path: ''
        startLine: 3386
      summary: "\nInternational System, 1/100 meters.\n"
      example: []
      syntax:
        content:
          CSharp: CENTIMETER = 1
          VB: CENTIMETER = 1
        return:
          type: sl.UNIT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.UNIT.METER
      commentId: F:sl.UNIT.METER
      language: CSharp
      name:
        CSharp: METER
        VB: METER
      nameWithType:
        CSharp: UNIT.METER
        VB: UNIT.METER
      qualifiedName:
        CSharp: sl.UNIT.METER
        VB: sl.UNIT.METER
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: METER
        path: ''
        startLine: 3390
      summary: "\nInternational System, 1/1 meters.\n"
      example: []
      syntax:
        content:
          CSharp: METER = 2
          VB: METER = 2
        return:
          type: sl.UNIT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.UNIT.INCH
      commentId: F:sl.UNIT.INCH
      language: CSharp
      name:
        CSharp: INCH
        VB: INCH
      nameWithType:
        CSharp: UNIT.INCH
        VB: UNIT.INCH
      qualifiedName:
        CSharp: sl.UNIT.INCH
        VB: sl.UNIT.INCH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: INCH
        path: ''
        startLine: 3394
      summary: "\nImperial Unit, 1/12 feet.\n"
      example: []
      syntax:
        content:
          CSharp: INCH = 3
          VB: INCH = 3
        return:
          type: sl.UNIT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.UNIT.FOOT
      commentId: F:sl.UNIT.FOOT
      language: CSharp
      name:
        CSharp: FOOT
        VB: FOOT
      nameWithType:
        CSharp: UNIT.FOOT
        VB: UNIT.FOOT
      qualifiedName:
        CSharp: sl.UNIT.FOOT
        VB: sl.UNIT.FOOT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: FOOT
        path: ''
        startLine: 3398
      summary: "\nImperial Unit, 1/1 feet.\n"
      example: []
      syntax:
        content:
          CSharp: FOOT = 4
          VB: FOOT = 4
        return:
          type: sl.UNIT
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.InitParameters
    commentId: T:sl.InitParameters
    language: CSharp
    name:
      CSharp: InitParameters
      VB: InitParameters
    nameWithType:
      CSharp: InitParameters
      VB: InitParameters
    qualifiedName:
      CSharp: sl.InitParameters
      VB: sl.InitParameters
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: InitParameters
      path: ''
      startLine: 3407
    syntax:
      content:
        CSharp: public class InitParameters
        VB: Public Class InitParameters
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: sl.InitParameters.inputType
      commentId: F:sl.InitParameters.inputType
      language: CSharp
      name:
        CSharp: inputType
        VB: inputType
      nameWithType:
        CSharp: InitParameters.inputType
        VB: InitParameters.inputType
      qualifiedName:
        CSharp: sl.InitParameters.inputType
        VB: sl.InitParameters.inputType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: inputType
        path: ''
        startLine: 3409
      syntax:
        content:
          CSharp: public INPUT_TYPE inputType
          VB: Public inputType As INPUT_TYPE
        return:
          type: sl.INPUT_TYPE
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.resolution
      commentId: F:sl.InitParameters.resolution
      language: CSharp
      name:
        CSharp: resolution
        VB: resolution
      nameWithType:
        CSharp: InitParameters.resolution
        VB: InitParameters.resolution
      qualifiedName:
        CSharp: sl.InitParameters.resolution
        VB: sl.InitParameters.resolution
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: resolution
        path: ''
        startLine: 3413
      summary: "\nResolution the ZED will be set to.\n"
      example: []
      syntax:
        content:
          CSharp: public RESOLUTION resolution
          VB: Public resolution As RESOLUTION
        return:
          type: sl.RESOLUTION
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.cameraFPS
      commentId: F:sl.InitParameters.cameraFPS
      language: CSharp
      name:
        CSharp: cameraFPS
        VB: cameraFPS
      nameWithType:
        CSharp: InitParameters.cameraFPS
        VB: InitParameters.cameraFPS
      qualifiedName:
        CSharp: sl.InitParameters.cameraFPS
        VB: sl.InitParameters.cameraFPS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraFPS
        path: ''
        startLine: 3417
      summary: "\nRequested FPS for this resolution. Setting it to 0 will choose the default FPS for this resolution.\n"
      example: []
      syntax:
        content:
          CSharp: public int cameraFPS
          VB: Public cameraFPS As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.cameraDeviceID
      commentId: F:sl.InitParameters.cameraDeviceID
      language: CSharp
      name:
        CSharp: cameraDeviceID
        VB: cameraDeviceID
      nameWithType:
        CSharp: InitParameters.cameraDeviceID
        VB: InitParameters.cameraDeviceID
      qualifiedName:
        CSharp: sl.InitParameters.cameraDeviceID
        VB: sl.InitParameters.cameraDeviceID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraDeviceID
        path: ''
        startLine: 3421
      summary: "\nID for identifying which of multiple connected ZEDs to use.\n"
      example: []
      syntax:
        content:
          CSharp: public int cameraDeviceID
          VB: Public cameraDeviceID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.pathSVO
      commentId: F:sl.InitParameters.pathSVO
      language: CSharp
      name:
        CSharp: pathSVO
        VB: pathSVO
      nameWithType:
        CSharp: InitParameters.pathSVO
        VB: InitParameters.pathSVO
      qualifiedName:
        CSharp: sl.InitParameters.pathSVO
        VB: sl.InitParameters.pathSVO
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: pathSVO
        path: ''
        startLine: 3425
      summary: "\nPath to a recorded SVO file to play, including filename.\n"
      example: []
      syntax:
        content:
          CSharp: public string pathSVO
          VB: Public pathSVO As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.svoRealTimeMode
      commentId: F:sl.InitParameters.svoRealTimeMode
      language: CSharp
      name:
        CSharp: svoRealTimeMode
        VB: svoRealTimeMode
      nameWithType:
        CSharp: InitParameters.svoRealTimeMode
        VB: InitParameters.svoRealTimeMode
      qualifiedName:
        CSharp: sl.InitParameters.svoRealTimeMode
        VB: sl.InitParameters.svoRealTimeMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: svoRealTimeMode
        path: ''
        startLine: 3429
      summary: "\nIn SVO playback, this mode simulates a live camera and consequently skipped frames if the computation framerate is too slow.\n"
      example: []
      syntax:
        content:
          CSharp: public bool svoRealTimeMode
          VB: Public svoRealTimeMode As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.coordinateUnit
      commentId: F:sl.InitParameters.coordinateUnit
      language: CSharp
      name:
        CSharp: coordinateUnit
        VB: coordinateUnit
      nameWithType:
        CSharp: InitParameters.coordinateUnit
        VB: InitParameters.coordinateUnit
      qualifiedName:
        CSharp: sl.InitParameters.coordinateUnit
        VB: sl.InitParameters.coordinateUnit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: coordinateUnit
        path: ''
        startLine: 3433
      summary: "\nDefine a unit for all metric values (depth, point clouds, tracking, meshes, etc.) Meters are recommended for Unity.\n"
      example: []
      syntax:
        content:
          CSharp: public UNIT coordinateUnit
          VB: Public coordinateUnit As UNIT
        return:
          type: sl.UNIT
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.coordinateSystem
      commentId: F:sl.InitParameters.coordinateSystem
      language: CSharp
      name:
        CSharp: coordinateSystem
        VB: coordinateSystem
      nameWithType:
        CSharp: InitParameters.coordinateSystem
        VB: InitParameters.coordinateSystem
      qualifiedName:
        CSharp: sl.InitParameters.coordinateSystem
        VB: sl.InitParameters.coordinateSystem
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: coordinateSystem
        path: ''
        startLine: 3438
      summary: "\nThis defines the order and the direction of the axis of the coordinate system.\nLEFT_HANDED_Y_UP is recommended to match Unity&apos;s coordinates.\n"
      example: []
      syntax:
        content:
          CSharp: public COORDINATE_SYSTEM coordinateSystem
          VB: Public coordinateSystem As COORDINATE_SYSTEM
        return:
          type: sl.COORDINATE_SYSTEM
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.depthMode
      commentId: F:sl.InitParameters.depthMode
      language: CSharp
      name:
        CSharp: depthMode
        VB: depthMode
      nameWithType:
        CSharp: InitParameters.depthMode
        VB: InitParameters.depthMode
      qualifiedName:
        CSharp: sl.InitParameters.depthMode
        VB: sl.InitParameters.depthMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthMode
        path: ''
        startLine: 3442
      summary: "\nQuality level of depth calculations. Higher settings improve accuracy but cost performance.\n"
      example: []
      syntax:
        content:
          CSharp: public DEPTH_MODE depthMode
          VB: Public depthMode As DEPTH_MODE
        return:
          type: sl.DEPTH_MODE
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.depthMinimumDistance
      commentId: F:sl.InitParameters.depthMinimumDistance
      language: CSharp
      name:
        CSharp: depthMinimumDistance
        VB: depthMinimumDistance
      nameWithType:
        CSharp: InitParameters.depthMinimumDistance
        VB: InitParameters.depthMinimumDistance
      qualifiedName:
        CSharp: sl.InitParameters.depthMinimumDistance
        VB: sl.InitParameters.depthMinimumDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthMinimumDistance
        path: ''
        startLine: 3446
      summary: "\nMinimum distance from the camera from which depth will be computed, in the defined coordinateUnit.\n"
      example: []
      syntax:
        content:
          CSharp: public float depthMinimumDistance
          VB: Public depthMinimumDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.depthMaximumDistance
      commentId: F:sl.InitParameters.depthMaximumDistance
      language: CSharp
      name:
        CSharp: depthMaximumDistance
        VB: depthMaximumDistance
      nameWithType:
        CSharp: InitParameters.depthMaximumDistance
        VB: InitParameters.depthMaximumDistance
      qualifiedName:
        CSharp: sl.InitParameters.depthMaximumDistance
        VB: sl.InitParameters.depthMaximumDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthMaximumDistance
        path: ''
        startLine: 3452
      summary: "\nWhen estimating the depth, the SDK uses this upper limit to turn higher values into \\ref TOO_FAR ones.\nThe current maximum distance that can be computed in the defined \\ref UNIT.\nChanging this value has no impact on performance and doesn&apos;t affect the positional tracking nor the spatial mapping. (Only the depth, point cloud, normals)\n"
      example: []
      syntax:
        content:
          CSharp: public float depthMaximumDistance
          VB: Public depthMaximumDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.cameraImageFlip
      commentId: F:sl.InitParameters.cameraImageFlip
      language: CSharp
      name:
        CSharp: cameraImageFlip
        VB: cameraImageFlip
      nameWithType:
        CSharp: InitParameters.cameraImageFlip
        VB: InitParameters.cameraImageFlip
      qualifiedName:
        CSharp: sl.InitParameters.cameraImageFlip
        VB: sl.InitParameters.cameraImageFlip
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraImageFlip
        path: ''
        startLine: 3456
      summary: "\nDefines if images are horizontally flipped.\n"
      example: []
      syntax:
        content:
          CSharp: public bool cameraImageFlip
          VB: Public cameraImageFlip As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.enableRightSideMeasure
      commentId: F:sl.InitParameters.enableRightSideMeasure
      language: CSharp
      name:
        CSharp: enableRightSideMeasure
        VB: enableRightSideMeasure
      nameWithType:
        CSharp: InitParameters.enableRightSideMeasure
        VB: InitParameters.enableRightSideMeasure
      qualifiedName:
        CSharp: sl.InitParameters.enableRightSideMeasure
        VB: sl.InitParameters.enableRightSideMeasure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enableRightSideMeasure
        path: ''
        startLine: 3460
      syntax:
        content:
          CSharp: public bool enableRightSideMeasure
          VB: Public enableRightSideMeasure As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.cameraDisableSelfCalib
      commentId: F:sl.InitParameters.cameraDisableSelfCalib
      language: CSharp
      name:
        CSharp: cameraDisableSelfCalib
        VB: cameraDisableSelfCalib
      nameWithType:
        CSharp: InitParameters.cameraDisableSelfCalib
        VB: InitParameters.cameraDisableSelfCalib
      qualifiedName:
        CSharp: sl.InitParameters.cameraDisableSelfCalib
        VB: sl.InitParameters.cameraDisableSelfCalib
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: cameraDisableSelfCalib
        path: ''
        startLine: 3465
      summary: "\nTrue to disable self-calibration and use the optional calibration parameters without optimizing them.\nFalse is recommended, so that calibration parameters can be optimized.\n"
      example: []
      syntax:
        content:
          CSharp: public bool cameraDisableSelfCalib
          VB: Public cameraDisableSelfCalib As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.sdkVerbose
      commentId: F:sl.InitParameters.sdkVerbose
      language: CSharp
      name:
        CSharp: sdkVerbose
        VB: sdkVerbose
      nameWithType:
        CSharp: InitParameters.sdkVerbose
        VB: InitParameters.sdkVerbose
      qualifiedName:
        CSharp: sl.InitParameters.sdkVerbose
        VB: sl.InitParameters.sdkVerbose
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sdkVerbose
        path: ''
        startLine: 3469
      summary: "\nTrue for the SDK to provide text feedback.\n"
      example: []
      syntax:
        content:
          CSharp: public bool sdkVerbose
          VB: Public sdkVerbose As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.sdkGPUId
      commentId: F:sl.InitParameters.sdkGPUId
      language: CSharp
      name:
        CSharp: sdkGPUId
        VB: sdkGPUId
      nameWithType:
        CSharp: InitParameters.sdkGPUId
        VB: InitParameters.sdkGPUId
      qualifiedName:
        CSharp: sl.InitParameters.sdkGPUId
        VB: sl.InitParameters.sdkGPUId
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sdkGPUId
        path: ''
        startLine: 3473
      summary: "\nID of the graphics card on which the ZED&apos;s computations will be performed.\n"
      example: []
      syntax:
        content:
          CSharp: public int sdkGPUId
          VB: Public sdkGPUId As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.sdkVerboseLogFile
      commentId: F:sl.InitParameters.sdkVerboseLogFile
      language: CSharp
      name:
        CSharp: sdkVerboseLogFile
        VB: sdkVerboseLogFile
      nameWithType:
        CSharp: InitParameters.sdkVerboseLogFile
        VB: InitParameters.sdkVerboseLogFile
      qualifiedName:
        CSharp: sl.InitParameters.sdkVerboseLogFile
        VB: sl.InitParameters.sdkVerboseLogFile
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sdkVerboseLogFile
        path: ''
        startLine: 3477
      summary: "\nIf set to verbose, the filename of the log file into which the SDK will store its text output.\n"
      example: []
      syntax:
        content:
          CSharp: public string sdkVerboseLogFile
          VB: Public sdkVerboseLogFile As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.depthStabilization
      commentId: F:sl.InitParameters.depthStabilization
      language: CSharp
      name:
        CSharp: depthStabilization
        VB: depthStabilization
      nameWithType:
        CSharp: InitParameters.depthStabilization
        VB: InitParameters.depthStabilization
      qualifiedName:
        CSharp: sl.InitParameters.depthStabilization
        VB: sl.InitParameters.depthStabilization
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: depthStabilization
        path: ''
        startLine: 3481
      summary: "\nTrue to stabilize the depth map. Recommended.\n"
      example: []
      syntax:
        content:
          CSharp: public bool depthStabilization
          VB: Public depthStabilization As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.optionalSettingsPath
      commentId: F:sl.InitParameters.optionalSettingsPath
      language: CSharp
      name:
        CSharp: optionalSettingsPath
        VB: optionalSettingsPath
      nameWithType:
        CSharp: InitParameters.optionalSettingsPath
        VB: InitParameters.optionalSettingsPath
      qualifiedName:
        CSharp: sl.InitParameters.optionalSettingsPath
        VB: sl.InitParameters.optionalSettingsPath
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: optionalSettingsPath
        path: ''
        startLine: 3485
      summary: "\nOptional path for searching configuration (calibration) file SNxxxx.conf. (introduced in ZED SDK 2.6)\n"
      example: []
      syntax:
        content:
          CSharp: public string optionalSettingsPath
          VB: Public optionalSettingsPath As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.sensorsRequired
      commentId: F:sl.InitParameters.sensorsRequired
      language: CSharp
      name:
        CSharp: sensorsRequired
        VB: sensorsRequired
      nameWithType:
        CSharp: InitParameters.sensorsRequired
        VB: InitParameters.sensorsRequired
      qualifiedName:
        CSharp: sl.InitParameters.sensorsRequired
        VB: sl.InitParameters.sensorsRequired
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sensorsRequired
        path: ''
        startLine: 3489
      summary: "\nTrue to stabilize the depth map. Recommended.\n"
      example: []
      syntax:
        content:
          CSharp: public bool sensorsRequired
          VB: Public sensorsRequired As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.ipStream
      commentId: F:sl.InitParameters.ipStream
      language: CSharp
      name:
        CSharp: ipStream
        VB: ipStream
      nameWithType:
        CSharp: InitParameters.ipStream
        VB: InitParameters.ipStream
      qualifiedName:
        CSharp: sl.InitParameters.ipStream
        VB: sl.InitParameters.ipStream
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: ipStream
        path: ''
        startLine: 3493
      summary: "\nPath to a recorded SVO file to play, including filename.\n"
      example: []
      syntax:
        content:
          CSharp: public string ipStream
          VB: Public ipStream As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.portStream
      commentId: F:sl.InitParameters.portStream
      language: CSharp
      name:
        CSharp: portStream
        VB: portStream
      nameWithType:
        CSharp: InitParameters.portStream
        VB: InitParameters.portStream
      qualifiedName:
        CSharp: sl.InitParameters.portStream
        VB: sl.InitParameters.portStream
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: portStream
        path: ''
        startLine: 3497
      summary: "\nPath to a recorded SVO file to play, including filename.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort portStream
          VB: Public portStream As UShort
        return:
          type: System.UInt16
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.enableImageEnhancement
      commentId: F:sl.InitParameters.enableImageEnhancement
      language: CSharp
      name:
        CSharp: enableImageEnhancement
        VB: enableImageEnhancement
      nameWithType:
        CSharp: InitParameters.enableImageEnhancement
        VB: InitParameters.enableImageEnhancement
      qualifiedName:
        CSharp: sl.InitParameters.enableImageEnhancement
        VB: sl.InitParameters.enableImageEnhancement
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enableImageEnhancement
        path: ''
        startLine: 3501
      summary: "\nWhether to enable improved color/gamma curves added in ZED SDK 3.0. \n"
      example: []
      syntax:
        content:
          CSharp: public bool enableImageEnhancement
          VB: Public enableImageEnhancement As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.InitParameters.#ctor
      commentId: M:sl.InitParameters.#ctor
      language: CSharp
      name:
        CSharp: InitParameters()
        VB: InitParameters()
      nameWithType:
        CSharp: InitParameters.InitParameters()
        VB: InitParameters.InitParameters()
      qualifiedName:
        CSharp: sl.InitParameters.InitParameters()
        VB: sl.InitParameters.InitParameters()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 3506
      summary: "\nConstructor. Sets default initialization parameters recommended for Unity.\n"
      example: []
      syntax:
        content:
          CSharp: public InitParameters()
          VB: Public Sub New
      overload: sl.InitParameters.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.COORDINATE_SYSTEM
    commentId: T:sl.COORDINATE_SYSTEM
    language: CSharp
    name:
      CSharp: COORDINATE_SYSTEM
      VB: COORDINATE_SYSTEM
    nameWithType:
      CSharp: COORDINATE_SYSTEM
      VB: COORDINATE_SYSTEM
    qualifiedName:
      CSharp: sl.COORDINATE_SYSTEM
      VB: sl.COORDINATE_SYSTEM
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: COORDINATE_SYSTEM
      path: ''
      startLine: 3538
    summary: "\nList of available coordinate systems. Left-Handed, Y Up is recommended to stay consistent with Unity.\nconsistent with Unity.\n"
    example: []
    syntax:
      content:
        CSharp: public enum COORDINATE_SYSTEM
        VB: Public Enum COORDINATE_SYSTEM
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.COORDINATE_SYSTEM.IMAGE
      commentId: F:sl.COORDINATE_SYSTEM.IMAGE
      language: CSharp
      name:
        CSharp: IMAGE
        VB: IMAGE
      nameWithType:
        CSharp: COORDINATE_SYSTEM.IMAGE
        VB: COORDINATE_SYSTEM.IMAGE
      qualifiedName:
        CSharp: sl.COORDINATE_SYSTEM.IMAGE
        VB: sl.COORDINATE_SYSTEM.IMAGE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: IMAGE
        path: ''
        startLine: 3544
      summary: "\nStandard coordinates system used in computer vision.\nUsed in OpenCV. See: http://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html\n"
      example: []
      syntax:
        content:
          CSharp: IMAGE = 0
          VB: IMAGE = 0
        return:
          type: sl.COORDINATE_SYSTEM
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.COORDINATE_SYSTEM.LEFT_HANDED_Y_UP
      commentId: F:sl.COORDINATE_SYSTEM.LEFT_HANDED_Y_UP
      language: CSharp
      name:
        CSharp: LEFT_HANDED_Y_UP
        VB: LEFT_HANDED_Y_UP
      nameWithType:
        CSharp: COORDINATE_SYSTEM.LEFT_HANDED_Y_UP
        VB: COORDINATE_SYSTEM.LEFT_HANDED_Y_UP
      qualifiedName:
        CSharp: sl.COORDINATE_SYSTEM.LEFT_HANDED_Y_UP
        VB: sl.COORDINATE_SYSTEM.LEFT_HANDED_Y_UP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LEFT_HANDED_Y_UP
        path: ''
        startLine: 3548
      summary: "\nLeft-Handed with Y up and Z forward. Recommended. Used in Unity with DirectX.\n"
      example: []
      syntax:
        content:
          CSharp: LEFT_HANDED_Y_UP = 1
          VB: LEFT_HANDED_Y_UP = 1
        return:
          type: sl.COORDINATE_SYSTEM
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP
      commentId: F:sl.COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP
      language: CSharp
      name:
        CSharp: RIGHT_HANDED_Y_UP
        VB: RIGHT_HANDED_Y_UP
      nameWithType:
        CSharp: COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP
        VB: COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP
      qualifiedName:
        CSharp: sl.COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP
        VB: sl.COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RIGHT_HANDED_Y_UP
        path: ''
        startLine: 3552
      summary: "\nRight-Handed with Y pointing up and Z backward. Used in OpenGL.\n"
      example: []
      syntax:
        content:
          CSharp: RIGHT_HANDED_Y_UP = 2
          VB: RIGHT_HANDED_Y_UP = 2
        return:
          type: sl.COORDINATE_SYSTEM
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP
      commentId: F:sl.COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP
      language: CSharp
      name:
        CSharp: RIGHT_HANDED_Z_UP
        VB: RIGHT_HANDED_Z_UP
      nameWithType:
        CSharp: COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP
        VB: COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP
      qualifiedName:
        CSharp: sl.COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP
        VB: sl.COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RIGHT_HANDED_Z_UP
        path: ''
        startLine: 3556
      summary: "\nRight-Handed with Z pointing up and Y forward. Used in 3DSMax.\n"
      example: []
      syntax:
        content:
          CSharp: RIGHT_HANDED_Z_UP = 3
          VB: RIGHT_HANDED_Z_UP = 3
        return:
          type: sl.COORDINATE_SYSTEM
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.COORDINATE_SYSTEM.LEFT_HANDED_Z_UP
      commentId: F:sl.COORDINATE_SYSTEM.LEFT_HANDED_Z_UP
      language: CSharp
      name:
        CSharp: LEFT_HANDED_Z_UP
        VB: LEFT_HANDED_Z_UP
      nameWithType:
        CSharp: COORDINATE_SYSTEM.LEFT_HANDED_Z_UP
        VB: COORDINATE_SYSTEM.LEFT_HANDED_Z_UP
      qualifiedName:
        CSharp: sl.COORDINATE_SYSTEM.LEFT_HANDED_Z_UP
        VB: sl.COORDINATE_SYSTEM.LEFT_HANDED_Z_UP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LEFT_HANDED_Z_UP
        path: ''
        startLine: 3560
      summary: "\nLeft-Handed with Z axis pointing up and X forward. Used in Unreal Engine.\n"
      example: []
      syntax:
        content:
          CSharp: LEFT_HANDED_Z_UP = 4
          VB: LEFT_HANDED_Z_UP = 4
        return:
          type: sl.COORDINATE_SYSTEM
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.AREA_EXPORT_STATE
    commentId: T:sl.AREA_EXPORT_STATE
    language: CSharp
    name:
      CSharp: AREA_EXPORT_STATE
      VB: AREA_EXPORT_STATE
    nameWithType:
      CSharp: AREA_EXPORT_STATE
      VB: AREA_EXPORT_STATE
    qualifiedName:
      CSharp: sl.AREA_EXPORT_STATE
      VB: sl.AREA_EXPORT_STATE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: AREA_EXPORT_STATE
      path: ''
      startLine: 3568
    summary: "\nPossible states of the ZED&apos;s spatial memory area export, for saving 3D features used\nby the tracking system to relocalize the camera. This is used when saving a mesh generated\nby spatial mapping when Save Mesh is enabled - a .area file is saved as well.\n"
    example: []
    syntax:
      content:
        CSharp: public enum AREA_EXPORT_STATE
        VB: Public Enum AREA_EXPORT_STATE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SUCCESS
      commentId: F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SUCCESS
      language: CSharp
      name:
        CSharp: AREA_EXPORT_STATE_SUCCESS
        VB: AREA_EXPORT_STATE_SUCCESS
      nameWithType:
        CSharp: AREA_EXPORT_STATE.AREA_EXPORT_STATE_SUCCESS
        VB: AREA_EXPORT_STATE.AREA_EXPORT_STATE_SUCCESS
      qualifiedName:
        CSharp: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SUCCESS
        VB: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SUCCESS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AREA_EXPORT_STATE_SUCCESS
        path: ''
        startLine: 3573
      summary: "\nSpatial memory file has been successfully created.\n"
      example: []
      syntax:
        content:
          CSharp: AREA_EXPORT_STATE_SUCCESS = 0
          VB: AREA_EXPORT_STATE_SUCCESS = 0
        return:
          type: sl.AREA_EXPORT_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_RUNNING
      commentId: F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_RUNNING
      language: CSharp
      name:
        CSharp: AREA_EXPORT_STATE_RUNNING
        VB: AREA_EXPORT_STATE_RUNNING
      nameWithType:
        CSharp: AREA_EXPORT_STATE.AREA_EXPORT_STATE_RUNNING
        VB: AREA_EXPORT_STATE.AREA_EXPORT_STATE_RUNNING
      qualifiedName:
        CSharp: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_RUNNING
        VB: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_RUNNING
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AREA_EXPORT_STATE_RUNNING
        path: ''
        startLine: 3577
      summary: "\nSpatial memory file is currently being written to.\n"
      example: []
      syntax:
        content:
          CSharp: AREA_EXPORT_STATE_RUNNING = 1
          VB: AREA_EXPORT_STATE_RUNNING = 1
        return:
          type: sl.AREA_EXPORT_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_NOT_STARTED
      commentId: F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_NOT_STARTED
      language: CSharp
      name:
        CSharp: AREA_EXPORT_STATE_NOT_STARTED
        VB: AREA_EXPORT_STATE_NOT_STARTED
      nameWithType:
        CSharp: AREA_EXPORT_STATE.AREA_EXPORT_STATE_NOT_STARTED
        VB: AREA_EXPORT_STATE.AREA_EXPORT_STATE_NOT_STARTED
      qualifiedName:
        CSharp: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_NOT_STARTED
        VB: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_NOT_STARTED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AREA_EXPORT_STATE_NOT_STARTED
        path: ''
        startLine: 3581
      summary: "\nSpatial memory file export has not been called.\n"
      example: []
      syntax:
        content:
          CSharp: AREA_EXPORT_STATE_NOT_STARTED = 2
          VB: AREA_EXPORT_STATE_NOT_STARTED = 2
        return:
          type: sl.AREA_EXPORT_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_EMPTY
      commentId: F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_EMPTY
      language: CSharp
      name:
        CSharp: AREA_EXPORT_STATE_FILE_EMPTY
        VB: AREA_EXPORT_STATE_FILE_EMPTY
      nameWithType:
        CSharp: AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_EMPTY
        VB: AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_EMPTY
      qualifiedName:
        CSharp: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_EMPTY
        VB: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_EMPTY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AREA_EXPORT_STATE_FILE_EMPTY
        path: ''
        startLine: 3585
      summary: "\nSpatial memory contains no data; the file is empty.\n"
      example: []
      syntax:
        content:
          CSharp: AREA_EXPORT_STATE_FILE_EMPTY = 3
          VB: AREA_EXPORT_STATE_FILE_EMPTY = 3
        return:
          type: sl.AREA_EXPORT_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_ERROR
      commentId: F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_ERROR
      language: CSharp
      name:
        CSharp: AREA_EXPORT_STATE_FILE_ERROR
        VB: AREA_EXPORT_STATE_FILE_ERROR
      nameWithType:
        CSharp: AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_ERROR
        VB: AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_ERROR
      qualifiedName:
        CSharp: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_ERROR
        VB: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_ERROR
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AREA_EXPORT_STATE_FILE_ERROR
        path: ''
        startLine: 3589
      summary: "\nSpatial memory file has not been written to because of a bad file name.\n"
      example: []
      syntax:
        content:
          CSharp: AREA_EXPORT_STATE_FILE_ERROR = 4
          VB: AREA_EXPORT_STATE_FILE_ERROR = 4
        return:
          type: sl.AREA_EXPORT_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
      commentId: F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
      language: CSharp
      name:
        CSharp: AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
        VB: AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
      nameWithType:
        CSharp: AREA_EXPORT_STATE.AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
        VB: AREA_EXPORT_STATE.AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
      qualifiedName:
        CSharp: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
        VB: sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED
        path: ''
        startLine: 3593
      summary: "\nSpatial memory has been disabled, so no file can be created.\n"
      example: []
      syntax:
        content:
          CSharp: AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED = 5
          VB: AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED = 5
        return:
          type: sl.AREA_EXPORT_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.RuntimeParameters
    commentId: T:sl.RuntimeParameters
    language: CSharp
    name:
      CSharp: RuntimeParameters
      VB: RuntimeParameters
    nameWithType:
      CSharp: RuntimeParameters
      VB: RuntimeParameters
    qualifiedName:
      CSharp: sl.RuntimeParameters
      VB: sl.RuntimeParameters
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: RuntimeParameters
      path: ''
      startLine: 3600
    summary: "\nRuntime parameters used by the ZEDCamera.Grab() function, and its Camera::grab() counterpart in the SDK.\n"
    example: []
    syntax:
      content:
        CSharp: public class RuntimeParameters
        VB: Public Class RuntimeParameters
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: sl.RuntimeParameters.sensingMode
      commentId: F:sl.RuntimeParameters.sensingMode
      language: CSharp
      name:
        CSharp: sensingMode
        VB: sensingMode
      nameWithType:
        CSharp: RuntimeParameters.sensingMode
        VB: RuntimeParameters.sensingMode
      qualifiedName:
        CSharp: sl.RuntimeParameters.sensingMode
        VB: sl.RuntimeParameters.sensingMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: sensingMode
        path: ''
        startLine: 3604
      summary: "\nDefines the algorithm used for depth map computation, more info : \\ref SENSING_MODE definition.\n"
      example: []
      syntax:
        content:
          CSharp: public SENSING_MODE sensingMode
          VB: Public sensingMode As SENSING_MODE
        return:
          type: sl.SENSING_MODE
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.RuntimeParameters.measure3DReferenceFrame
      commentId: F:sl.RuntimeParameters.measure3DReferenceFrame
      language: CSharp
      name:
        CSharp: measure3DReferenceFrame
        VB: measure3DReferenceFrame
      nameWithType:
        CSharp: RuntimeParameters.measure3DReferenceFrame
        VB: RuntimeParameters.measure3DReferenceFrame
      qualifiedName:
        CSharp: sl.RuntimeParameters.measure3DReferenceFrame
        VB: sl.RuntimeParameters.measure3DReferenceFrame
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: measure3DReferenceFrame
        path: ''
        startLine: 3608
      summary: "\nProvides 3D measures (point cloud and normals) in the desired reference frame (default is REFERENCE_FRAME_CAMERA).\n"
      example: []
      syntax:
        content:
          CSharp: public REFERENCE_FRAME measure3DReferenceFrame
          VB: Public measure3DReferenceFrame As REFERENCE_FRAME
        return:
          type: sl.REFERENCE_FRAME
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.RuntimeParameters.enableDepth
      commentId: F:sl.RuntimeParameters.enableDepth
      language: CSharp
      name:
        CSharp: enableDepth
        VB: enableDepth
      nameWithType:
        CSharp: RuntimeParameters.enableDepth
        VB: RuntimeParameters.enableDepth
      qualifiedName:
        CSharp: sl.RuntimeParameters.enableDepth
        VB: sl.RuntimeParameters.enableDepth
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enableDepth
        path: ''
        startLine: 3612
      summary: "\nDefines whether the depth map should be computed.\n"
      example: []
      syntax:
        content:
          CSharp: public bool enableDepth
          VB: Public enableDepth As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.RuntimeParameters.confidenceThreshold
      commentId: F:sl.RuntimeParameters.confidenceThreshold
      language: CSharp
      name:
        CSharp: confidenceThreshold
        VB: confidenceThreshold
      nameWithType:
        CSharp: RuntimeParameters.confidenceThreshold
        VB: RuntimeParameters.confidenceThreshold
      qualifiedName:
        CSharp: sl.RuntimeParameters.confidenceThreshold
        VB: sl.RuntimeParameters.confidenceThreshold
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: confidenceThreshold
        path: ''
        startLine: 3616
      summary: "\nDefines the confidence threshold for the depth. Based on stereo matching score.\n"
      example: []
      syntax:
        content:
          CSharp: public int confidenceThreshold
          VB: Public confidenceThreshold As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.RuntimeParameters.textureConfidenceThreshold
      commentId: F:sl.RuntimeParameters.textureConfidenceThreshold
      language: CSharp
      name:
        CSharp: textureConfidenceThreshold
        VB: textureConfidenceThreshold
      nameWithType:
        CSharp: RuntimeParameters.textureConfidenceThreshold
        VB: RuntimeParameters.textureConfidenceThreshold
      qualifiedName:
        CSharp: sl.RuntimeParameters.textureConfidenceThreshold
        VB: sl.RuntimeParameters.textureConfidenceThreshold
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: textureConfidenceThreshold
        path: ''
        startLine: 3620
      summary: "\nDefines texture confidence threshold for the depth. Based on textureness confidence. \n"
      example: []
      syntax:
        content:
          CSharp: public int textureConfidenceThreshold
          VB: Public textureConfidenceThreshold As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.RuntimeParameters.#ctor(sl.SENSING_MODE,sl.REFERENCE_FRAME,System.Boolean,System.Int32,System.Int32)
      commentId: M:sl.RuntimeParameters.#ctor(sl.SENSING_MODE,sl.REFERENCE_FRAME,System.Boolean,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: RuntimeParameters(SENSING_MODE, REFERENCE_FRAME, Boolean, Int32, Int32)
        VB: RuntimeParameters(SENSING_MODE, REFERENCE_FRAME, Boolean, Int32, Int32)
      nameWithType:
        CSharp: RuntimeParameters.RuntimeParameters(SENSING_MODE, REFERENCE_FRAME, Boolean, Int32, Int32)
        VB: RuntimeParameters.RuntimeParameters(SENSING_MODE, REFERENCE_FRAME, Boolean, Int32, Int32)
      qualifiedName:
        CSharp: sl.RuntimeParameters.RuntimeParameters(sl.SENSING_MODE, sl.REFERENCE_FRAME, System.Boolean, System.Int32, System.Int32)
        VB: sl.RuntimeParameters.RuntimeParameters(sl.SENSING_MODE, sl.REFERENCE_FRAME, System.Boolean, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 3625
      summary: "\nConstructor\n"
      example: []
      syntax:
        content:
          CSharp: public RuntimeParameters(SENSING_MODE smode = SENSING_MODE.STANDARD, REFERENCE_FRAME reframe = REFERENCE_FRAME.CAMERA, bool depth = true, int cnf_threshold = 100, int txt_cnf_threshold = 100)
          VB: Public Sub New(smode As SENSING_MODE = SENSING_MODE.STANDARD, reframe As REFERENCE_FRAME = REFERENCE_FRAME.CAMERA, depth As Boolean = True, cnf_threshold As Integer = 100, txt_cnf_threshold As Integer = 100)
        parameters:
        - id: smode
          type: sl.SENSING_MODE
        - id: reframe
          type: sl.REFERENCE_FRAME
        - id: depth
          type: System.Boolean
        - id: cnf_threshold
          type: System.Int32
        - id: txt_cnf_threshold
          type: System.Int32
      overload: sl.RuntimeParameters.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.TRACKING_FRAME
    commentId: T:sl.TRACKING_FRAME
    language: CSharp
    name:
      CSharp: TRACKING_FRAME
      VB: TRACKING_FRAME
    nameWithType:
      CSharp: TRACKING_FRAME
      VB: TRACKING_FRAME
    qualifiedName:
      CSharp: sl.TRACKING_FRAME
      VB: sl.TRACKING_FRAME
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: TRACKING_FRAME
      path: ''
      startLine: 3638
    summary: "\nPart of the ZED (left/right sensor, center) that&apos;s considered its center for tracking purposes.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TRACKING_FRAME
        VB: Public Enum TRACKING_FRAME
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.TRACKING_FRAME.LEFT_EYE
      commentId: F:sl.TRACKING_FRAME.LEFT_EYE
      language: CSharp
      name:
        CSharp: LEFT_EYE
        VB: LEFT_EYE
      nameWithType:
        CSharp: TRACKING_FRAME.LEFT_EYE
        VB: TRACKING_FRAME.LEFT_EYE
      qualifiedName:
        CSharp: sl.TRACKING_FRAME.LEFT_EYE
        VB: sl.TRACKING_FRAME.LEFT_EYE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LEFT_EYE
        path: ''
        startLine: 3643
      summary: "\nCamera&apos;s center is at the left sensor.\n"
      example: []
      syntax:
        content:
          CSharp: LEFT_EYE = 0
          VB: LEFT_EYE = 0
        return:
          type: sl.TRACKING_FRAME
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.TRACKING_FRAME.CENTER_EYE
      commentId: F:sl.TRACKING_FRAME.CENTER_EYE
      language: CSharp
      name:
        CSharp: CENTER_EYE
        VB: CENTER_EYE
      nameWithType:
        CSharp: TRACKING_FRAME.CENTER_EYE
        VB: TRACKING_FRAME.CENTER_EYE
      qualifiedName:
        CSharp: sl.TRACKING_FRAME.CENTER_EYE
        VB: sl.TRACKING_FRAME.CENTER_EYE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CENTER_EYE
        path: ''
        startLine: 3647
      summary: "\nCamera&apos;s center is in the camera&apos;s physical center, between the sensors.\n"
      example: []
      syntax:
        content:
          CSharp: CENTER_EYE = 1
          VB: CENTER_EYE = 1
        return:
          type: sl.TRACKING_FRAME
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.TRACKING_FRAME.RIGHT_EYE
      commentId: F:sl.TRACKING_FRAME.RIGHT_EYE
      language: CSharp
      name:
        CSharp: RIGHT_EYE
        VB: RIGHT_EYE
      nameWithType:
        CSharp: TRACKING_FRAME.RIGHT_EYE
        VB: TRACKING_FRAME.RIGHT_EYE
      qualifiedName:
        CSharp: sl.TRACKING_FRAME.RIGHT_EYE
        VB: sl.TRACKING_FRAME.RIGHT_EYE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: RIGHT_EYE
        path: ''
        startLine: 3651
      summary: "\nCamera&apos;s center is at the right sensor.\n"
      example: []
      syntax:
        content:
          CSharp: RIGHT_EYE = 2
          VB: RIGHT_EYE = 2
        return:
          type: sl.TRACKING_FRAME
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.USB_DEVICE
    commentId: T:sl.USB_DEVICE
    language: CSharp
    name:
      CSharp: USB_DEVICE
      VB: USB_DEVICE
    nameWithType:
      CSharp: USB_DEVICE
      VB: USB_DEVICE
    qualifiedName:
      CSharp: sl.USB_DEVICE
      VB: sl.USB_DEVICE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: USB_DEVICE
      path: ''
      startLine: 3658
    summary: "\nTypes of USB device brands.\n"
    example: []
    syntax:
      content:
        CSharp: public enum USB_DEVICE
        VB: Public Enum USB_DEVICE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.USB_DEVICE.USB_DEVICE_OCULUS
      commentId: F:sl.USB_DEVICE.USB_DEVICE_OCULUS
      language: CSharp
      name:
        CSharp: USB_DEVICE_OCULUS
        VB: USB_DEVICE_OCULUS
      nameWithType:
        CSharp: USB_DEVICE.USB_DEVICE_OCULUS
        VB: USB_DEVICE.USB_DEVICE_OCULUS
      qualifiedName:
        CSharp: sl.USB_DEVICE.USB_DEVICE_OCULUS
        VB: sl.USB_DEVICE.USB_DEVICE_OCULUS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: USB_DEVICE_OCULUS
        path: ''
        startLine: 3663
      summary: "\nOculus device, eg. Oculus Rift VR Headset.\n"
      example: []
      syntax:
        content:
          CSharp: USB_DEVICE_OCULUS = 0
          VB: USB_DEVICE_OCULUS = 0
        return:
          type: sl.USB_DEVICE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.USB_DEVICE.USB_DEVICE_HTC
      commentId: F:sl.USB_DEVICE.USB_DEVICE_HTC
      language: CSharp
      name:
        CSharp: USB_DEVICE_HTC
        VB: USB_DEVICE_HTC
      nameWithType:
        CSharp: USB_DEVICE.USB_DEVICE_HTC
        VB: USB_DEVICE.USB_DEVICE_HTC
      qualifiedName:
        CSharp: sl.USB_DEVICE.USB_DEVICE_HTC
        VB: sl.USB_DEVICE.USB_DEVICE_HTC
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: USB_DEVICE_HTC
        path: ''
        startLine: 3667
      summary: "\nHTC device, eg. HTC Vive.\n"
      example: []
      syntax:
        content:
          CSharp: USB_DEVICE_HTC = 1
          VB: USB_DEVICE_HTC = 1
        return:
          type: sl.USB_DEVICE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.USB_DEVICE.USB_DEVICE_STEREOLABS
      commentId: F:sl.USB_DEVICE.USB_DEVICE_STEREOLABS
      language: CSharp
      name:
        CSharp: USB_DEVICE_STEREOLABS
        VB: USB_DEVICE_STEREOLABS
      nameWithType:
        CSharp: USB_DEVICE.USB_DEVICE_STEREOLABS
        VB: USB_DEVICE.USB_DEVICE_STEREOLABS
      qualifiedName:
        CSharp: sl.USB_DEVICE.USB_DEVICE_STEREOLABS
        VB: sl.USB_DEVICE.USB_DEVICE_STEREOLABS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: USB_DEVICE_STEREOLABS
        path: ''
        startLine: 3671
      summary: "\nStereolabs device, eg. ZED/ZED Mini.\n"
      example: []
      syntax:
        content:
          CSharp: USB_DEVICE_STEREOLABS = 2
          VB: USB_DEVICE_STEREOLABS = 2
        return:
          type: sl.USB_DEVICE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.dll_ObjectDetectionParameters
    commentId: T:sl.dll_ObjectDetectionParameters
    language: CSharp
    name:
      CSharp: dll_ObjectDetectionParameters
      VB: dll_ObjectDetectionParameters
    nameWithType:
      CSharp: dll_ObjectDetectionParameters
      VB: dll_ObjectDetectionParameters
    qualifiedName:
      CSharp: sl.dll_ObjectDetectionParameters
      VB: sl.dll_ObjectDetectionParameters
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: dll_ObjectDetectionParameters
      path: ''
      startLine: 3679
    syntax:
      content:
        CSharp: public struct dll_ObjectDetectionParameters
        VB: Public Structure dll_ObjectDetectionParameters
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.dll_ObjectDetectionParameters.imageSync
      commentId: F:sl.dll_ObjectDetectionParameters.imageSync
      language: CSharp
      name:
        CSharp: imageSync
        VB: imageSync
      nameWithType:
        CSharp: dll_ObjectDetectionParameters.imageSync
        VB: dll_ObjectDetectionParameters.imageSync
      qualifiedName:
        CSharp: sl.dll_ObjectDetectionParameters.imageSync
        VB: sl.dll_ObjectDetectionParameters.imageSync
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: imageSync
        path: ''
        startLine: 3686
      summary: "\nDefines if the object detection is synchronized to the image or runs in a separate thread.\n"
      example: []
      syntax:
        content:
          CSharp: public bool imageSync
          VB: Public imageSync As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.dll_ObjectDetectionParameters.enableObjectTracking
      commentId: F:sl.dll_ObjectDetectionParameters.enableObjectTracking
      language: CSharp
      name:
        CSharp: enableObjectTracking
        VB: enableObjectTracking
      nameWithType:
        CSharp: dll_ObjectDetectionParameters.enableObjectTracking
        VB: dll_ObjectDetectionParameters.enableObjectTracking
      qualifiedName:
        CSharp: sl.dll_ObjectDetectionParameters.enableObjectTracking
        VB: sl.dll_ObjectDetectionParameters.enableObjectTracking
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enableObjectTracking
        path: ''
        startLine: 3691
      summary: "\nDefines if the object detection will track objects across multiple images, instead of an image-by-image basis.\n"
      example: []
      syntax:
        content:
          CSharp: public bool enableObjectTracking
          VB: Public enableObjectTracking As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.dll_ObjectDetectionParameters.enable2DMask
      commentId: F:sl.dll_ObjectDetectionParameters.enable2DMask
      language: CSharp
      name:
        CSharp: enable2DMask
        VB: enable2DMask
      nameWithType:
        CSharp: dll_ObjectDetectionParameters.enable2DMask
        VB: dll_ObjectDetectionParameters.enable2DMask
      qualifiedName:
        CSharp: sl.dll_ObjectDetectionParameters.enable2DMask
        VB: sl.dll_ObjectDetectionParameters.enable2DMask
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: enable2DMask
        path: ''
        startLine: 3696
      summary: "\nDefines if the SDK will calculate 2D masks for each object. Requires more performance, so don&apos;t enable if you don&apos;t need these masks. \n"
      example: []
      syntax:
        content:
          CSharp: public bool enable2DMask
          VB: Public enable2DMask As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.dll_ObjectDetectionRuntimeParameters
    commentId: T:sl.dll_ObjectDetectionRuntimeParameters
    language: CSharp
    name:
      CSharp: dll_ObjectDetectionRuntimeParameters
      VB: dll_ObjectDetectionRuntimeParameters
    nameWithType:
      CSharp: dll_ObjectDetectionRuntimeParameters
      VB: dll_ObjectDetectionRuntimeParameters
    qualifiedName:
      CSharp: sl.dll_ObjectDetectionRuntimeParameters
      VB: sl.dll_ObjectDetectionRuntimeParameters
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: dll_ObjectDetectionRuntimeParameters
      path: ''
      startLine: 3700
    syntax:
      content:
        CSharp: public struct dll_ObjectDetectionRuntimeParameters
        VB: Public Structure dll_ObjectDetectionRuntimeParameters
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.dll_ObjectDetectionRuntimeParameters.detectionConfidenceThreshold
      commentId: F:sl.dll_ObjectDetectionRuntimeParameters.detectionConfidenceThreshold
      language: CSharp
      name:
        CSharp: detectionConfidenceThreshold
        VB: detectionConfidenceThreshold
      nameWithType:
        CSharp: dll_ObjectDetectionRuntimeParameters.detectionConfidenceThreshold
        VB: dll_ObjectDetectionRuntimeParameters.detectionConfidenceThreshold
      qualifiedName:
        CSharp: sl.dll_ObjectDetectionRuntimeParameters.detectionConfidenceThreshold
        VB: sl.dll_ObjectDetectionRuntimeParameters.detectionConfidenceThreshold
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: detectionConfidenceThreshold
        path: ''
        startLine: 3709
      summary: "\nThe detection confidence threshold between 1 and 99. \nA confidence of 1 means a low threshold, more uncertain objects and 99 very few but very precise objects.\nEx: If set to 80, then the SDK must be at least 80% sure that a given object exists before reporting it in the list of detected objects. \nIf the scene contains a lot of objects, increasing the confidence can slightly speed up the process, since every object instance is tracked.\n"
      example: []
      syntax:
        content:
          CSharp: public float detectionConfidenceThreshold
          VB: Public detectionConfidenceThreshold As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.dll_ObjectDetectionRuntimeParameters.objectClassFilter
      commentId: F:sl.dll_ObjectDetectionRuntimeParameters.objectClassFilter
      language: CSharp
      name:
        CSharp: objectClassFilter
        VB: objectClassFilter
      nameWithType:
        CSharp: dll_ObjectDetectionRuntimeParameters.objectClassFilter
        VB: dll_ObjectDetectionRuntimeParameters.objectClassFilter
      qualifiedName:
        CSharp: sl.dll_ObjectDetectionRuntimeParameters.objectClassFilter
        VB: sl.dll_ObjectDetectionRuntimeParameters.objectClassFilter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: objectClassFilter
        path: ''
        startLine: 3714
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public int[] objectClassFilter
          VB: Public objectClassFilter As Integer()
        return:
          type: System.Int32[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.ObjectDataSDK
    commentId: T:sl.ObjectDataSDK
    language: CSharp
    name:
      CSharp: ObjectDataSDK
      VB: ObjectDataSDK
    nameWithType:
      CSharp: ObjectDataSDK
      VB: ObjectDataSDK
    qualifiedName:
      CSharp: sl.ObjectDataSDK
      VB: sl.ObjectDataSDK
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ObjectDataSDK
      path: ''
      startLine: 3721
    summary: "\nObject data structure directly from the SDK. Represents a single object detection. \nSee DetectedObject for an abstracted version with helper functions that make this data easier to use in Unity. \n"
    example: []
    syntax:
      content:
        CSharp: public struct ObjectDataSDK
        VB: Public Structure ObjectDataSDK
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.ObjectDataSDK.id
      commentId: F:sl.ObjectDataSDK.id
      language: CSharp
      name:
        CSharp: id
        VB: id
      nameWithType:
        CSharp: ObjectDataSDK.id
        VB: ObjectDataSDK.id
      qualifiedName:
        CSharp: sl.ObjectDataSDK.id
        VB: sl.ObjectDataSDK.id
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: id
        path: ''
        startLine: 3725
      syntax:
        content:
          CSharp: public int id
          VB: Public id As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.obj_type
      commentId: F:sl.ObjectDataSDK.obj_type
      language: CSharp
      name:
        CSharp: obj_type
        VB: obj_type
      nameWithType:
        CSharp: ObjectDataSDK.obj_type
        VB: ObjectDataSDK.obj_type
      qualifiedName:
        CSharp: sl.ObjectDataSDK.obj_type
        VB: sl.ObjectDataSDK.obj_type
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: obj_type
        path: ''
        startLine: 3726
      syntax:
        content:
          CSharp: public OBJECT_CLASS obj_type
          VB: Public obj_type As OBJECT_CLASS
        return:
          type: sl.OBJECT_CLASS
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.obj_track_state
      commentId: F:sl.ObjectDataSDK.obj_track_state
      language: CSharp
      name:
        CSharp: obj_track_state
        VB: obj_track_state
      nameWithType:
        CSharp: ObjectDataSDK.obj_track_state
        VB: ObjectDataSDK.obj_track_state
      qualifiedName:
        CSharp: sl.ObjectDataSDK.obj_track_state
        VB: sl.ObjectDataSDK.obj_track_state
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: obj_track_state
        path: ''
        startLine: 3727
      syntax:
        content:
          CSharp: public OBJECT_TRACK_STATE obj_track_state
          VB: Public obj_track_state As OBJECT_TRACK_STATE
        return:
          type: sl.OBJECT_TRACK_STATE
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.confidence
      commentId: F:sl.ObjectDataSDK.confidence
      language: CSharp
      name:
        CSharp: confidence
        VB: confidence
      nameWithType:
        CSharp: ObjectDataSDK.confidence
        VB: ObjectDataSDK.confidence
      qualifiedName:
        CSharp: sl.ObjectDataSDK.confidence
        VB: sl.ObjectDataSDK.confidence
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: confidence
        path: ''
        startLine: 3728
      syntax:
        content:
          CSharp: public float confidence
          VB: Public confidence As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.mask
      commentId: F:sl.ObjectDataSDK.mask
      language: CSharp
      name:
        CSharp: mask
        VB: mask
      nameWithType:
        CSharp: ObjectDataSDK.mask
        VB: ObjectDataSDK.mask
      qualifiedName:
        CSharp: sl.ObjectDataSDK.mask
        VB: sl.ObjectDataSDK.mask
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: mask
        path: ''
        startLine: 3730
      syntax:
        content:
          CSharp: public IntPtr mask
          VB: Public mask As IntPtr
        return:
          type: System.IntPtr
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.imageBoundingBox
      commentId: F:sl.ObjectDataSDK.imageBoundingBox
      language: CSharp
      name:
        CSharp: imageBoundingBox
        VB: imageBoundingBox
      nameWithType:
        CSharp: ObjectDataSDK.imageBoundingBox
        VB: ObjectDataSDK.imageBoundingBox
      qualifiedName:
        CSharp: sl.ObjectDataSDK.imageBoundingBox
        VB: sl.ObjectDataSDK.imageBoundingBox
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: imageBoundingBox
        path: ''
        startLine: 3742
      summary: "\nImage data.\nNote that Y in these values is relative from the top of the image, whereas the opposite is true \nin most related Unity functions. If using this raw value, subtract Y from the \nimage height to get the height relative to the bottom. \n"
      example: []
      syntax:
        content:
          CSharp: public Vector2[] imageBoundingBox
          VB: Public imageBoundingBox As Vector2()
        return:
          type: Vector2[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.rootWorldPosition
      commentId: F:sl.ObjectDataSDK.rootWorldPosition
      language: CSharp
      name:
        CSharp: rootWorldPosition
        VB: rootWorldPosition
      nameWithType:
        CSharp: ObjectDataSDK.rootWorldPosition
        VB: ObjectDataSDK.rootWorldPosition
      qualifiedName:
        CSharp: sl.ObjectDataSDK.rootWorldPosition
        VB: sl.ObjectDataSDK.rootWorldPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: rootWorldPosition
        path: ''
        startLine: 3748
      summary: "\n3D space data (Camera Frame since this is what we used in Unity)\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 rootWorldPosition
          VB: Public rootWorldPosition As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.rootWorldVelocity
      commentId: F:sl.ObjectDataSDK.rootWorldVelocity
      language: CSharp
      name:
        CSharp: rootWorldVelocity
        VB: rootWorldVelocity
      nameWithType:
        CSharp: ObjectDataSDK.rootWorldVelocity
        VB: ObjectDataSDK.rootWorldVelocity
      qualifiedName:
        CSharp: sl.ObjectDataSDK.rootWorldVelocity
        VB: sl.ObjectDataSDK.rootWorldVelocity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: rootWorldVelocity
        path: ''
        startLine: 3749
      syntax:
        content:
          CSharp: public Vector3 rootWorldVelocity
          VB: Public rootWorldVelocity As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectDataSDK.worldBoundingBox
      commentId: F:sl.ObjectDataSDK.worldBoundingBox
      language: CSharp
      name:
        CSharp: worldBoundingBox
        VB: worldBoundingBox
      nameWithType:
        CSharp: ObjectDataSDK.worldBoundingBox
        VB: ObjectDataSDK.worldBoundingBox
      qualifiedName:
        CSharp: sl.ObjectDataSDK.worldBoundingBox
        VB: sl.ObjectDataSDK.worldBoundingBox
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: worldBoundingBox
        path: ''
        startLine: 3764
      summary: "\nThe 3D space bounding box. given as array of vertices\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3[] worldBoundingBox
          VB: Public worldBoundingBox As Vector3()
        return:
          type: Vector3[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.ObjectsFrameSDK
    commentId: T:sl.ObjectsFrameSDK
    language: CSharp
    name:
      CSharp: ObjectsFrameSDK
      VB: ObjectsFrameSDK
    nameWithType:
      CSharp: ObjectsFrameSDK
      VB: ObjectsFrameSDK
    qualifiedName:
      CSharp: sl.ObjectsFrameSDK
      VB: sl.ObjectsFrameSDK
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ObjectsFrameSDK
      path: ''
      startLine: 3776
    syntax:
      content:
        CSharp: public struct ObjectsFrameSDK
        VB: Public Structure ObjectsFrameSDK
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.ObjectsFrameSDK.numObject
      commentId: F:sl.ObjectsFrameSDK.numObject
      language: CSharp
      name:
        CSharp: numObject
        VB: numObject
      nameWithType:
        CSharp: ObjectsFrameSDK.numObject
        VB: ObjectsFrameSDK.numObject
      qualifiedName:
        CSharp: sl.ObjectsFrameSDK.numObject
        VB: sl.ObjectsFrameSDK.numObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: numObject
        path: ''
        startLine: 3782
      summary: "\nHow many objects were detected this frame. Use this to iterate through the top of objectData; objects with indexes greater than numObject are empty. \n"
      example: []
      syntax:
        content:
          CSharp: public int numObject
          VB: Public numObject As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectsFrameSDK.timestamp
      commentId: F:sl.ObjectsFrameSDK.timestamp
      language: CSharp
      name:
        CSharp: timestamp
        VB: timestamp
      nameWithType:
        CSharp: ObjectsFrameSDK.timestamp
        VB: ObjectsFrameSDK.timestamp
      qualifiedName:
        CSharp: sl.ObjectsFrameSDK.timestamp
        VB: sl.ObjectsFrameSDK.timestamp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: timestamp
        path: ''
        startLine: 3786
      summary: "\nTimestamp of the image where these objects were detected.\n"
      example: []
      syntax:
        content:
          CSharp: public ulong timestamp
          VB: Public timestamp As ULong
        return:
          type: System.UInt64
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ObjectsFrameSDK.objectData
      commentId: F:sl.ObjectsFrameSDK.objectData
      language: CSharp
      name:
        CSharp: objectData
        VB: objectData
      nameWithType:
        CSharp: ObjectsFrameSDK.objectData
        VB: ObjectsFrameSDK.objectData
      qualifiedName:
        CSharp: sl.ObjectsFrameSDK.objectData
        VB: sl.ObjectsFrameSDK.objectData
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: objectData
        path: ''
        startLine: 3791
      summary: "\nArray of objects \n"
      example: []
      syntax:
        content:
          CSharp: public ObjectDataSDK[] objectData
          VB: Public objectData As ObjectDataSDK()
        return:
          type: sl.ObjectDataSDK[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.OBJECT_CLASS
    commentId: T:sl.OBJECT_CLASS
    language: CSharp
    name:
      CSharp: OBJECT_CLASS
      VB: OBJECT_CLASS
    nameWithType:
      CSharp: OBJECT_CLASS
      VB: OBJECT_CLASS
    qualifiedName:
      CSharp: sl.OBJECT_CLASS
      VB: sl.OBJECT_CLASS
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: OBJECT_CLASS
      path: ''
      startLine: 3797
    summary: "\nTypes of detected objects.\n"
    example: []
    syntax:
      content:
        CSharp: public enum OBJECT_CLASS
        VB: Public Enum OBJECT_CLASS
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.OBJECT_CLASS.PERSON
      commentId: F:sl.OBJECT_CLASS.PERSON
      language: CSharp
      name:
        CSharp: PERSON
        VB: PERSON
      nameWithType:
        CSharp: OBJECT_CLASS.PERSON
        VB: OBJECT_CLASS.PERSON
      qualifiedName:
        CSharp: sl.OBJECT_CLASS.PERSON
        VB: sl.OBJECT_CLASS.PERSON
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: PERSON
        path: ''
        startLine: 3799
      syntax:
        content:
          CSharp: PERSON = 0
          VB: PERSON = 0
        return:
          type: sl.OBJECT_CLASS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.OBJECT_CLASS.VEHICLE
      commentId: F:sl.OBJECT_CLASS.VEHICLE
      language: CSharp
      name:
        CSharp: VEHICLE
        VB: VEHICLE
      nameWithType:
        CSharp: OBJECT_CLASS.VEHICLE
        VB: OBJECT_CLASS.VEHICLE
      qualifiedName:
        CSharp: sl.OBJECT_CLASS.VEHICLE
        VB: sl.OBJECT_CLASS.VEHICLE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: VEHICLE
        path: ''
        startLine: 3800
      syntax:
        content:
          CSharp: VEHICLE = 1
          VB: VEHICLE = 1
        return:
          type: sl.OBJECT_CLASS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.OBJECT_CLASS.LAST
      commentId: F:sl.OBJECT_CLASS.LAST
      language: CSharp
      name:
        CSharp: LAST
        VB: LAST
      nameWithType:
        CSharp: OBJECT_CLASS.LAST
        VB: OBJECT_CLASS.LAST
      qualifiedName:
        CSharp: sl.OBJECT_CLASS.LAST
        VB: sl.OBJECT_CLASS.LAST
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: LAST
        path: ''
        startLine: 3801
      syntax:
        content:
          CSharp: LAST = 2
          VB: LAST = 2
        return:
          type: sl.OBJECT_CLASS
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.OBJECT_TRACK_STATE
    commentId: T:sl.OBJECT_TRACK_STATE
    language: CSharp
    name:
      CSharp: OBJECT_TRACK_STATE
      VB: OBJECT_TRACK_STATE
    nameWithType:
      CSharp: OBJECT_TRACK_STATE
      VB: OBJECT_TRACK_STATE
    qualifiedName:
      CSharp: sl.OBJECT_TRACK_STATE
      VB: sl.OBJECT_TRACK_STATE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: OBJECT_TRACK_STATE
      path: ''
      startLine: 3807
    summary: "\nTracking state of an individual object. \n"
    example: []
    syntax:
      content:
        CSharp: public enum OBJECT_TRACK_STATE
        VB: Public Enum OBJECT_TRACK_STATE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.OBJECT_TRACK_STATE.OFF
      commentId: F:sl.OBJECT_TRACK_STATE.OFF
      language: CSharp
      name:
        CSharp: OFF
        VB: OFF
      nameWithType:
        CSharp: OBJECT_TRACK_STATE.OFF
        VB: OBJECT_TRACK_STATE.OFF
      qualifiedName:
        CSharp: sl.OBJECT_TRACK_STATE.OFF
        VB: sl.OBJECT_TRACK_STATE.OFF
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: OFF
        path: ''
        startLine: 3809
      syntax:
        content:
          CSharp: OFF = 0
          VB: OFF = 0
        return:
          type: sl.OBJECT_TRACK_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.OBJECT_TRACK_STATE.OK
      commentId: F:sl.OBJECT_TRACK_STATE.OK
      language: CSharp
      name:
        CSharp: OK
        VB: OK
      nameWithType:
        CSharp: OBJECT_TRACK_STATE.OK
        VB: OBJECT_TRACK_STATE.OK
      qualifiedName:
        CSharp: sl.OBJECT_TRACK_STATE.OK
        VB: sl.OBJECT_TRACK_STATE.OK
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: OK
        path: ''
        startLine: 3810
      syntax:
        content:
          CSharp: OK = 1
          VB: OK = 1
        return:
          type: sl.OBJECT_TRACK_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.OBJECT_TRACK_STATE.SEARCHING
      commentId: F:sl.OBJECT_TRACK_STATE.SEARCHING
      language: CSharp
      name:
        CSharp: SEARCHING
        VB: SEARCHING
      nameWithType:
        CSharp: OBJECT_TRACK_STATE.SEARCHING
        VB: OBJECT_TRACK_STATE.SEARCHING
      qualifiedName:
        CSharp: sl.OBJECT_TRACK_STATE.SEARCHING
        VB: sl.OBJECT_TRACK_STATE.SEARCHING
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SEARCHING
        path: ''
        startLine: 3811
      syntax:
        content:
          CSharp: SEARCHING = 2
          VB: SEARCHING = 2
        return:
          type: sl.OBJECT_TRACK_STATE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.char2
    commentId: T:sl.char2
    language: CSharp
    name:
      CSharp: char2
      VB: char2
    nameWithType:
      CSharp: char2
      VB: char2
    qualifiedName:
      CSharp: sl.char2
      VB: sl.char2
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: char2
      path: ''
      startLine: 3829
    summary: "\nRepresents a 2D vector of uchars for use on both the CPU and GPU. \n"
    example: []
    syntax:
      content:
        CSharp: public struct char2
        VB: Public Structure char2
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.char2.r
      commentId: F:sl.char2.r
      language: CSharp
      name:
        CSharp: r
        VB: r
      nameWithType:
        CSharp: char2.r
        VB: char2.r
      qualifiedName:
        CSharp: sl.char2.r
        VB: sl.char2.r
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: r
        path: ''
        startLine: 3832
      syntax:
        content:
          CSharp: public byte r
          VB: Public r As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.char2.g
      commentId: F:sl.char2.g
      language: CSharp
      name:
        CSharp: g
        VB: g
      nameWithType:
        CSharp: char2.g
        VB: char2.g
      qualifiedName:
        CSharp: sl.char2.g
        VB: sl.char2.g
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: g
        path: ''
        startLine: 3833
      syntax:
        content:
          CSharp: public byte g
          VB: Public g As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.char3
    commentId: T:sl.char3
    language: CSharp
    name:
      CSharp: char3
      VB: char3
    nameWithType:
      CSharp: char3
      VB: char3
    qualifiedName:
      CSharp: sl.char3
      VB: sl.char3
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: char3
      path: ''
      startLine: 3839
    summary: "\nRepresents a 3D vector of uchars for use on both the CPU and GPU. \n"
    example: []
    syntax:
      content:
        CSharp: public struct char3
        VB: Public Structure char3
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.char3.r
      commentId: F:sl.char3.r
      language: CSharp
      name:
        CSharp: r
        VB: r
      nameWithType:
        CSharp: char3.r
        VB: char3.r
      qualifiedName:
        CSharp: sl.char3.r
        VB: sl.char3.r
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: r
        path: ''
        startLine: 3842
      syntax:
        content:
          CSharp: public byte r
          VB: Public r As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.char3.g
      commentId: F:sl.char3.g
      language: CSharp
      name:
        CSharp: g
        VB: g
      nameWithType:
        CSharp: char3.g
        VB: char3.g
      qualifiedName:
        CSharp: sl.char3.g
        VB: sl.char3.g
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: g
        path: ''
        startLine: 3843
      syntax:
        content:
          CSharp: public byte g
          VB: Public g As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.char3.b
      commentId: F:sl.char3.b
      language: CSharp
      name:
        CSharp: b
        VB: b
      nameWithType:
        CSharp: char3.b
        VB: char3.b
      qualifiedName:
        CSharp: sl.char3.b
        VB: sl.char3.b
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: b
        path: ''
        startLine: 3844
      syntax:
        content:
          CSharp: public byte b
          VB: Public b As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.char4
    commentId: T:sl.char4
    language: CSharp
    name:
      CSharp: char4
      VB: char4
    nameWithType:
      CSharp: char4
      VB: char4
    qualifiedName:
      CSharp: sl.char4
      VB: sl.char4
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: char4
      path: ''
      startLine: 3850
    summary: "\nRepresents a 4D vector of uchars for use on both the CPU and GPU. \n"
    example: []
    syntax:
      content:
        CSharp: public struct char4
        VB: Public Structure char4
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.char4.r
      commentId: F:sl.char4.r
      language: CSharp
      name:
        CSharp: r
        VB: r
      nameWithType:
        CSharp: char4.r
        VB: char4.r
      qualifiedName:
        CSharp: sl.char4.r
        VB: sl.char4.r
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: r
        path: ''
        startLine: 3854
      syntax:
        content:
          CSharp: public byte r
          VB: Public r As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.char4.g
      commentId: F:sl.char4.g
      language: CSharp
      name:
        CSharp: g
        VB: g
      nameWithType:
        CSharp: char4.g
        VB: char4.g
      qualifiedName:
        CSharp: sl.char4.g
        VB: sl.char4.g
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: g
        path: ''
        startLine: 3856
      syntax:
        content:
          CSharp: public byte g
          VB: Public g As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.char4.b
      commentId: F:sl.char4.b
      language: CSharp
      name:
        CSharp: b
        VB: b
      nameWithType:
        CSharp: char4.b
        VB: char4.b
      qualifiedName:
        CSharp: sl.char4.b
        VB: sl.char4.b
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: b
        path: ''
        startLine: 3858
      syntax:
        content:
          CSharp: public byte b
          VB: Public b As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.char4.a
      commentId: F:sl.char4.a
      language: CSharp
      name:
        CSharp: a
        VB: a
      nameWithType:
        CSharp: char4.a
        VB: char4.a
      qualifiedName:
        CSharp: sl.char4.a
        VB: sl.char4.a
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: a
        path: ''
        startLine: 3860
      syntax:
        content:
          CSharp: public byte a
          VB: Public a As Byte
        return:
          type: System.Byte
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.float2
    commentId: T:sl.float2
    language: CSharp
    name:
      CSharp: float2
      VB: float2
    nameWithType:
      CSharp: float2
      VB: float2
    qualifiedName:
      CSharp: sl.float2
      VB: sl.float2
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: float2
      path: ''
      startLine: 3866
    summary: "\nRepresents a 2D vector of floats for use on both the CPU and GPU. \n"
    example: []
    syntax:
      content:
        CSharp: public struct float2
        VB: Public Structure float2
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.float2.x
      commentId: F:sl.float2.x
      language: CSharp
      name:
        CSharp: x
        VB: x
      nameWithType:
        CSharp: float2.x
        VB: float2.x
      qualifiedName:
        CSharp: sl.float2.x
        VB: sl.float2.x
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: x
        path: ''
        startLine: 3869
      syntax:
        content:
          CSharp: public float x
          VB: Public x As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.float2.y
      commentId: F:sl.float2.y
      language: CSharp
      name:
        CSharp: y
        VB: y
      nameWithType:
        CSharp: float2.y
        VB: float2.y
      qualifiedName:
        CSharp: sl.float2.y
        VB: sl.float2.y
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: y
        path: ''
        startLine: 3870
      syntax:
        content:
          CSharp: public float y
          VB: Public y As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.float3
    commentId: T:sl.float3
    language: CSharp
    name:
      CSharp: float3
      VB: float3
    nameWithType:
      CSharp: float3
      VB: float3
    qualifiedName:
      CSharp: sl.float3
      VB: sl.float3
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: float3
      path: ''
      startLine: 3875
    summary: "\nRepresents a 3D vector of floats for use on both the CPU and GPU. \n"
    example: []
    syntax:
      content:
        CSharp: public struct float3
        VB: Public Structure float3
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.float3.x
      commentId: F:sl.float3.x
      language: CSharp
      name:
        CSharp: x
        VB: x
      nameWithType:
        CSharp: float3.x
        VB: float3.x
      qualifiedName:
        CSharp: sl.float3.x
        VB: sl.float3.x
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: x
        path: ''
        startLine: 3878
      syntax:
        content:
          CSharp: public float x
          VB: Public x As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.float3.y
      commentId: F:sl.float3.y
      language: CSharp
      name:
        CSharp: y
        VB: y
      nameWithType:
        CSharp: float3.y
        VB: float3.y
      qualifiedName:
        CSharp: sl.float3.y
        VB: sl.float3.y
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: y
        path: ''
        startLine: 3879
      syntax:
        content:
          CSharp: public float y
          VB: Public y As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.float3.z
      commentId: F:sl.float3.z
      language: CSharp
      name:
        CSharp: z
        VB: z
      nameWithType:
        CSharp: float3.z
        VB: float3.z
      qualifiedName:
        CSharp: sl.float3.z
        VB: sl.float3.z
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: z
        path: ''
        startLine: 3880
      syntax:
        content:
          CSharp: public float z
          VB: Public z As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.float4
    commentId: T:sl.float4
    language: CSharp
    name:
      CSharp: float4
      VB: float4
    nameWithType:
      CSharp: float4
      VB: float4
    qualifiedName:
      CSharp: sl.float4
      VB: sl.float4
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: float4
      path: ''
      startLine: 3885
    summary: "\nRepresents a 4D vector of floats for use on both the CPU and GPU. \n"
    example: []
    syntax:
      content:
        CSharp: public struct float4
        VB: Public Structure float4
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: sl.float4.x
      commentId: F:sl.float4.x
      language: CSharp
      name:
        CSharp: x
        VB: x
      nameWithType:
        CSharp: float4.x
        VB: float4.x
      qualifiedName:
        CSharp: sl.float4.x
        VB: sl.float4.x
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: x
        path: ''
        startLine: 3888
      syntax:
        content:
          CSharp: public float x
          VB: Public x As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.float4.y
      commentId: F:sl.float4.y
      language: CSharp
      name:
        CSharp: y
        VB: y
      nameWithType:
        CSharp: float4.y
        VB: float4.y
      qualifiedName:
        CSharp: sl.float4.y
        VB: sl.float4.y
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: y
        path: ''
        startLine: 3889
      syntax:
        content:
          CSharp: public float y
          VB: Public y As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.float4.z
      commentId: F:sl.float4.z
      language: CSharp
      name:
        CSharp: z
        VB: z
      nameWithType:
        CSharp: float4.z
        VB: float4.z
      qualifiedName:
        CSharp: sl.float4.z
        VB: sl.float4.z
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: z
        path: ''
        startLine: 3890
      syntax:
        content:
          CSharp: public float z
          VB: Public z As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.float4.w
      commentId: F:sl.float4.w
      language: CSharp
      name:
        CSharp: w
        VB: w
      nameWithType:
        CSharp: float4.w
        VB: float4.w
      qualifiedName:
        CSharp: sl.float4.w
        VB: sl.float4.w
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: w
        path: ''
        startLine: 3891
      syntax:
        content:
          CSharp: public float w
          VB: Public w As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: sl.MAT_TYPE
    commentId: T:sl.MAT_TYPE
    language: CSharp
    name:
      CSharp: MAT_TYPE
      VB: MAT_TYPE
    nameWithType:
      CSharp: MAT_TYPE
      VB: MAT_TYPE
    qualifiedName:
      CSharp: sl.MAT_TYPE
      VB: sl.MAT_TYPE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: MAT_TYPE
      path: ''
      startLine: 3898
    summary: "\nType of mat, indicating the data type and the number of channels it holds. \nProper mat type depends on the image type. See sl.VIEW and sl.MEASURE (in ZEDCommon.cs)\n"
    example: []
    syntax:
      content:
        CSharp: public enum MAT_TYPE
        VB: Public Enum MAT_TYPE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.MAT_TYPE.MAT_32F_C1
      commentId: F:sl.MAT_TYPE.MAT_32F_C1
      language: CSharp
      name:
        CSharp: MAT_32F_C1
        VB: MAT_32F_C1
      nameWithType:
        CSharp: MAT_TYPE.MAT_32F_C1
        VB: MAT_TYPE.MAT_32F_C1
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_32F_C1
        VB: sl.MAT_TYPE.MAT_32F_C1
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_32F_C1
        path: ''
        startLine: 3903
      summary: "\nFloat, one channel. Used for depth and disparity Measure-type textures.\n"
      example: []
      syntax:
        content:
          CSharp: MAT_32F_C1 = 0
          VB: MAT_32F_C1 = 0
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MAT_TYPE.MAT_32F_C2
      commentId: F:sl.MAT_TYPE.MAT_32F_C2
      language: CSharp
      name:
        CSharp: MAT_32F_C2
        VB: MAT_32F_C2
      nameWithType:
        CSharp: MAT_TYPE.MAT_32F_C2
        VB: MAT_TYPE.MAT_32F_C2
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_32F_C2
        VB: sl.MAT_TYPE.MAT_32F_C2
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_32F_C2
        path: ''
        startLine: 3907
      summary: "\nFloat, two channels. \n"
      example: []
      syntax:
        content:
          CSharp: MAT_32F_C2 = 1
          VB: MAT_32F_C2 = 1
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MAT_TYPE.MAT_32F_C3
      commentId: F:sl.MAT_TYPE.MAT_32F_C3
      language: CSharp
      name:
        CSharp: MAT_32F_C3
        VB: MAT_32F_C3
      nameWithType:
        CSharp: MAT_TYPE.MAT_32F_C3
        VB: MAT_TYPE.MAT_32F_C3
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_32F_C3
        VB: sl.MAT_TYPE.MAT_32F_C3
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_32F_C3
        path: ''
        startLine: 3911
      summary: "\nFloat, three channels.\n"
      example: []
      syntax:
        content:
          CSharp: MAT_32F_C3 = 2
          VB: MAT_32F_C3 = 2
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MAT_TYPE.MAT_32F_C4
      commentId: F:sl.MAT_TYPE.MAT_32F_C4
      language: CSharp
      name:
        CSharp: MAT_32F_C4
        VB: MAT_32F_C4
      nameWithType:
        CSharp: MAT_TYPE.MAT_32F_C4
        VB: MAT_TYPE.MAT_32F_C4
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_32F_C4
        VB: sl.MAT_TYPE.MAT_32F_C4
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_32F_C4
        path: ''
        startLine: 3915
      summary: "\nFloat, four channels. Used for normals and XYZ (point cloud) measure-type textures \n"
      example: []
      syntax:
        content:
          CSharp: MAT_32F_C4 = 3
          VB: MAT_32F_C4 = 3
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MAT_TYPE.MAT_8U_C1
      commentId: F:sl.MAT_TYPE.MAT_8U_C1
      language: CSharp
      name:
        CSharp: MAT_8U_C1
        VB: MAT_8U_C1
      nameWithType:
        CSharp: MAT_TYPE.MAT_8U_C1
        VB: MAT_TYPE.MAT_8U_C1
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_8U_C1
        VB: sl.MAT_TYPE.MAT_8U_C1
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_8U_C1
        path: ''
        startLine: 3919
      summary: "\nUnsigned char, one channel. Used for greyscale image-type textures like depth and confidence displays. \n"
      example: []
      syntax:
        content:
          CSharp: MAT_8U_C1 = 4
          VB: MAT_8U_C1 = 4
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MAT_TYPE.MAT_8U_C2
      commentId: F:sl.MAT_TYPE.MAT_8U_C2
      language: CSharp
      name:
        CSharp: MAT_8U_C2
        VB: MAT_8U_C2
      nameWithType:
        CSharp: MAT_TYPE.MAT_8U_C2
        VB: MAT_TYPE.MAT_8U_C2
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_8U_C2
        VB: sl.MAT_TYPE.MAT_8U_C2
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_8U_C2
        path: ''
        startLine: 3923
      summary: "\nUnsigned char, two channels. \n"
      example: []
      syntax:
        content:
          CSharp: MAT_8U_C2 = 5
          VB: MAT_8U_C2 = 5
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MAT_TYPE.MAT_8U_C3
      commentId: F:sl.MAT_TYPE.MAT_8U_C3
      language: CSharp
      name:
        CSharp: MAT_8U_C3
        VB: MAT_8U_C3
      nameWithType:
        CSharp: MAT_TYPE.MAT_8U_C3
        VB: MAT_TYPE.MAT_8U_C3
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_8U_C3
        VB: sl.MAT_TYPE.MAT_8U_C3
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_8U_C3
        path: ''
        startLine: 3927
      summary: "\nUnsigned char, three channels. \n"
      example: []
      syntax:
        content:
          CSharp: MAT_8U_C3 = 6
          VB: MAT_8U_C3 = 6
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MAT_TYPE.MAT_8U_C4
      commentId: F:sl.MAT_TYPE.MAT_8U_C4
      language: CSharp
      name:
        CSharp: MAT_8U_C4
        VB: MAT_8U_C4
      nameWithType:
        CSharp: MAT_TYPE.MAT_8U_C4
        VB: MAT_TYPE.MAT_8U_C4
      qualifiedName:
        CSharp: sl.MAT_TYPE.MAT_8U_C4
        VB: sl.MAT_TYPE.MAT_8U_C4
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MAT_8U_C4
        path: ''
        startLine: 3931
      summary: "\nUnsigned char, four channels. Used for color images, like the main RGB image from each sensor. \n"
      example: []
      syntax:
        content:
          CSharp: MAT_8U_C4 = 7
          VB: MAT_8U_C4 = 7
        return:
          type: sl.MAT_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.COPY_TYPE
    commentId: T:sl.COPY_TYPE
    language: CSharp
    name:
      CSharp: COPY_TYPE
      VB: COPY_TYPE
    nameWithType:
      CSharp: COPY_TYPE
      VB: COPY_TYPE
    qualifiedName:
      CSharp: sl.COPY_TYPE
      VB: sl.COPY_TYPE
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: COPY_TYPE
      path: ''
      startLine: 3937
    summary: "\nCategories for copying data within or between the CPU (processor) memory and GPU (graphics card) memory.\n"
    example: []
    syntax:
      content:
        CSharp: public enum COPY_TYPE
        VB: Public Enum COPY_TYPE
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.COPY_TYPE.COPY_TYPE_CPU_CPU
      commentId: F:sl.COPY_TYPE.COPY_TYPE_CPU_CPU
      language: CSharp
      name:
        CSharp: COPY_TYPE_CPU_CPU
        VB: COPY_TYPE_CPU_CPU
      nameWithType:
        CSharp: COPY_TYPE.COPY_TYPE_CPU_CPU
        VB: COPY_TYPE.COPY_TYPE_CPU_CPU
      qualifiedName:
        CSharp: sl.COPY_TYPE.COPY_TYPE_CPU_CPU
        VB: sl.COPY_TYPE.COPY_TYPE_CPU_CPU
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: COPY_TYPE_CPU_CPU
        path: ''
        startLine: 3942
      summary: "\nCopies data from one place in CPU memory to another. \n"
      example: []
      syntax:
        content:
          CSharp: COPY_TYPE_CPU_CPU = 0
          VB: COPY_TYPE_CPU_CPU = 0
        return:
          type: sl.COPY_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.COPY_TYPE.COPY_TYPE_CPU_GPU
      commentId: F:sl.COPY_TYPE.COPY_TYPE_CPU_GPU
      language: CSharp
      name:
        CSharp: COPY_TYPE_CPU_GPU
        VB: COPY_TYPE_CPU_GPU
      nameWithType:
        CSharp: COPY_TYPE.COPY_TYPE_CPU_GPU
        VB: COPY_TYPE.COPY_TYPE_CPU_GPU
      qualifiedName:
        CSharp: sl.COPY_TYPE.COPY_TYPE_CPU_GPU
        VB: sl.COPY_TYPE.COPY_TYPE_CPU_GPU
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: COPY_TYPE_CPU_GPU
        path: ''
        startLine: 3946
      summary: "\nCopies data from CPU memory to GPU memory.\n"
      example: []
      syntax:
        content:
          CSharp: COPY_TYPE_CPU_GPU = 1
          VB: COPY_TYPE_CPU_GPU = 1
        return:
          type: sl.COPY_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.COPY_TYPE.COPY_TYPE_GPU_GPU
      commentId: F:sl.COPY_TYPE.COPY_TYPE_GPU_GPU
      language: CSharp
      name:
        CSharp: COPY_TYPE_GPU_GPU
        VB: COPY_TYPE_GPU_GPU
      nameWithType:
        CSharp: COPY_TYPE.COPY_TYPE_GPU_GPU
        VB: COPY_TYPE.COPY_TYPE_GPU_GPU
      qualifiedName:
        CSharp: sl.COPY_TYPE.COPY_TYPE_GPU_GPU
        VB: sl.COPY_TYPE.COPY_TYPE_GPU_GPU
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: COPY_TYPE_GPU_GPU
        path: ''
        startLine: 3950
      summary: "\nCopies data from one place in GPU memory to another. \n"
      example: []
      syntax:
        content:
          CSharp: COPY_TYPE_GPU_GPU = 2
          VB: COPY_TYPE_GPU_GPU = 2
        return:
          type: sl.COPY_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.COPY_TYPE.COPY_TYPE_GPU_CPU
      commentId: F:sl.COPY_TYPE.COPY_TYPE_GPU_CPU
      language: CSharp
      name:
        CSharp: COPY_TYPE_GPU_CPU
        VB: COPY_TYPE_GPU_CPU
      nameWithType:
        CSharp: COPY_TYPE.COPY_TYPE_GPU_CPU
        VB: COPY_TYPE.COPY_TYPE_GPU_CPU
      qualifiedName:
        CSharp: sl.COPY_TYPE.COPY_TYPE_GPU_CPU
        VB: sl.COPY_TYPE.COPY_TYPE_GPU_CPU
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: COPY_TYPE_GPU_CPU
        path: ''
        startLine: 3954
      summary: "\nCopies data from GPU memory to CPU memory. \n"
      example: []
      syntax:
        content:
          CSharp: COPY_TYPE_GPU_CPU = 3
          VB: COPY_TYPE_GPU_CPU = 3
        return:
          type: sl.COPY_TYPE
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.MEM
    commentId: T:sl.MEM
    language: CSharp
    name:
      CSharp: MEM
      VB: MEM
    nameWithType:
      CSharp: MEM
      VB: MEM
    qualifiedName:
      CSharp: sl.MEM
      VB: sl.MEM
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: MEM
      path: ''
      startLine: 3960
    summary: "\nWhich memory to store an image/mat: CPU/processor memory or GPU (graphics card) memory.\n"
    example: []
    syntax:
      content:
        CSharp: public enum MEM
        VB: Public Enum MEM
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: sl.MEM.MEM_CPU
      commentId: F:sl.MEM.MEM_CPU
      language: CSharp
      name:
        CSharp: MEM_CPU
        VB: MEM_CPU
      nameWithType:
        CSharp: MEM.MEM_CPU
        VB: MEM.MEM_CPU
      qualifiedName:
        CSharp: sl.MEM.MEM_CPU
        VB: sl.MEM.MEM_CPU
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MEM_CPU
        path: ''
        startLine: 3965
      summary: "\nStore on memory accessible by the CPU. \n"
      example: []
      syntax:
        content:
          CSharp: MEM_CPU = 1
          VB: MEM_CPU = 1
        return:
          type: sl.MEM
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: sl.MEM.MEM_GPU
      commentId: F:sl.MEM.MEM_GPU
      language: CSharp
      name:
        CSharp: MEM_GPU
        VB: MEM_GPU
      nameWithType:
        CSharp: MEM.MEM_GPU
        VB: MEM.MEM_GPU
      qualifiedName:
        CSharp: sl.MEM.MEM_GPU
        VB: sl.MEM.MEM_GPU
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MEM_GPU
        path: ''
        startLine: 3969
      summary: "\nStore on memory accessible by the GPU. \n"
      example: []
      syntax:
        content:
          CSharp: MEM_GPU = 2
          VB: MEM_GPU = 2
        return:
          type: sl.MEM
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: sl.ZEDMat
    commentId: T:sl.ZEDMat
    language: CSharp
    name:
      CSharp: ZEDMat
      VB: ZEDMat
    nameWithType:
      CSharp: ZEDMat
      VB: ZEDMat
    qualifiedName:
      CSharp: sl.ZEDMat
      VB: sl.ZEDMat
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: sl
    source:
      id: ZEDMat
      path: ''
      startLine: 3981
    summary: "\nMirrors the sl::Mat class used in the ZED C++ SDK to store images. \nCan be used to retrieve individual images from GPU or CPU memory: see ZEDCamera.RetrieveImage() \nand ZEDCamera.RetrieveMeasure(). \n"
    remarks: "\nFor more information on the Mat class it mirrors, see: \nhttps://www.stereolabs.com/developers/documentation/API/v2.5.1/classsl_1_1Mat.html\n"
    example: []
    syntax:
      content:
        CSharp: public class ZEDMat
        VB: Public Class ZEDMat
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: sl.ZEDMat.MatPtr
      commentId: P:sl.ZEDMat.MatPtr
      language: CSharp
      name:
        CSharp: MatPtr
        VB: MatPtr
      nameWithType:
        CSharp: ZEDMat.MatPtr
        VB: ZEDMat.MatPtr
      qualifiedName:
        CSharp: sl.ZEDMat.MatPtr
        VB: sl.ZEDMat.MatPtr
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: MatPtr
        path: ''
        startLine: 4122
      summary: "\nReturns the internal ptr of a Mat.\n"
      example: []
      syntax:
        content:
          CSharp: public IntPtr MatPtr { get; }
          VB: Public ReadOnly Property MatPtr As IntPtr
        parameters: []
        return:
          type: System.IntPtr
      overload: sl.ZEDMat.MatPtr*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: sl.ZEDMat.#ctor
      commentId: M:sl.ZEDMat.#ctor
      language: CSharp
      name:
        CSharp: ZEDMat()
        VB: ZEDMat()
      nameWithType:
        CSharp: ZEDMat.ZEDMat()
        VB: ZEDMat.ZEDMat()
      qualifiedName:
        CSharp: sl.ZEDMat.ZEDMat()
        VB: sl.ZEDMat.ZEDMat()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 4130
      summary: "\nCreates an empty Mat.\n"
      example: []
      syntax:
        content:
          CSharp: public ZEDMat()
          VB: Public Sub New
      overload: sl.ZEDMat.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.#ctor(System.IntPtr)
      commentId: M:sl.ZEDMat.#ctor(System.IntPtr)
      language: CSharp
      name:
        CSharp: ZEDMat(IntPtr)
        VB: ZEDMat(IntPtr)
      nameWithType:
        CSharp: ZEDMat.ZEDMat(IntPtr)
        VB: ZEDMat.ZEDMat(IntPtr)
      qualifiedName:
        CSharp: sl.ZEDMat.ZEDMat(System.IntPtr)
        VB: sl.ZEDMat.ZEDMat(System.IntPtr)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: .ctor
        path: ''
        startLine: 4139
      summary: "\nCreates a mat from an existing internal ptr.\n"
      example: []
      syntax:
        content:
          CSharp: public ZEDMat(IntPtr ptr)
          VB: Public Sub New(ptr As IntPtr)
        parameters:
        - id: ptr
          type: System.IntPtr
          description: IntPtr to create the material with.
      overload: sl.ZEDMat.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Create(sl.Resolution,sl.MAT_TYPE,sl.MEM)
      commentId: M:sl.ZEDMat.Create(sl.Resolution,sl.MAT_TYPE,sl.MEM)
      language: CSharp
      name:
        CSharp: Create(Resolution, MAT_TYPE, MEM)
        VB: Create(Resolution, MAT_TYPE, MEM)
      nameWithType:
        CSharp: ZEDMat.Create(Resolution, MAT_TYPE, MEM)
        VB: ZEDMat.Create(Resolution, MAT_TYPE, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.Create(sl.Resolution, sl.MAT_TYPE, sl.MEM)
        VB: sl.ZEDMat.Create(sl.Resolution, sl.MAT_TYPE, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Create
        path: ''
        startLine: 4156
      summary: "\nCreates a Mat with a given resolution.\n"
      example: []
      syntax:
        content:
          CSharp: public void Create(Resolution resolution, MAT_TYPE type, MEM mem = MEM.MEM_CPU)
          VB: Public Sub Create(resolution As Resolution, type As MAT_TYPE, mem As MEM = MEM.MEM_CPU)
        parameters:
        - id: resolution
          type: sl.Resolution
          description: Resolution for the new Mat.
        - id: type
          type: sl.MAT_TYPE
          description: >-
            Data type and number of channels the Mat will hold.

            Depends on texture type: see sl.VIEW and sl.MEASURE in ZEDCommon.cs.
        - id: mem
          type: sl.MEM
          description: >-
            Whether Mat should exist on CPU or GPU memory.

            Choose depending on where you&apos;ll need to access it from.
      overload: sl.ZEDMat.Create*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Create(System.UInt32,System.UInt32,sl.MAT_TYPE,sl.MEM)
      commentId: M:sl.ZEDMat.Create(System.UInt32,System.UInt32,sl.MAT_TYPE,sl.MEM)
      language: CSharp
      name:
        CSharp: Create(UInt32, UInt32, MAT_TYPE, MEM)
        VB: Create(UInt32, UInt32, MAT_TYPE, MEM)
      nameWithType:
        CSharp: ZEDMat.Create(UInt32, UInt32, MAT_TYPE, MEM)
        VB: ZEDMat.Create(UInt32, UInt32, MAT_TYPE, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.Create(System.UInt32, System.UInt32, sl.MAT_TYPE, sl.MEM)
        VB: sl.ZEDMat.Create(System.UInt32, System.UInt32, sl.MAT_TYPE, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Create
        path: ''
        startLine: 4170
      summary: "\nCreates a Mat with a given width and height.\n"
      example: []
      syntax:
        content:
          CSharp: public void Create(uint width, uint height, MAT_TYPE type, MEM mem = MEM.MEM_CPU)
          VB: Public Sub Create(width As UInteger, height As UInteger, type As MAT_TYPE, mem As MEM = MEM.MEM_CPU)
        parameters:
        - id: width
          type: System.UInt32
          description: Width of the new Mat.
        - id: height
          type: System.UInt32
          description: Height of the new Mat.
        - id: type
          type: sl.MAT_TYPE
          description: >-
            Data type and number of channels the Mat will hold.

            Depends on texture type: see sl.VIEW and sl.MEASURE in ZEDCommon.cs.
        - id: mem
          type: sl.MEM
          description: >-
            Whether Mat should exist on CPU or GPU memory.

            Choose depending on where you&apos;ll need to access it from.
      overload: sl.ZEDMat.Create*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.IsInit
      commentId: M:sl.ZEDMat.IsInit
      language: CSharp
      name:
        CSharp: IsInit()
        VB: IsInit()
      nameWithType:
        CSharp: ZEDMat.IsInit()
        VB: ZEDMat.IsInit()
      qualifiedName:
        CSharp: sl.ZEDMat.IsInit()
        VB: sl.ZEDMat.IsInit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: IsInit
        path: ''
        startLine: 4179
      summary: "\nTrue if the Mat has been initialized.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsInit()
          VB: Public Function IsInit As Boolean
        return:
          type: System.Boolean
          description: ''
      overload: sl.ZEDMat.IsInit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Free(sl.MEM)
      commentId: M:sl.ZEDMat.Free(sl.MEM)
      language: CSharp
      name:
        CSharp: Free(MEM)
        VB: Free(MEM)
      nameWithType:
        CSharp: ZEDMat.Free(MEM)
        VB: ZEDMat.Free(MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.Free(sl.MEM)
        VB: sl.ZEDMat.Free(sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Free
        path: ''
        startLine: 4188
      summary: "\nFrees the memory of the Mat.\n"
      example: []
      syntax:
        content:
          CSharp: public void Free(MEM mem = (MEM)3)
          VB: Public Sub Free(mem As MEM = CType(3, MEM))
        parameters:
        - id: mem
          type: sl.MEM
          description: Whether the Mat is on CPU or GPU memory.
      overload: sl.ZEDMat.Free*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.UpdateCPUFromGPU
      commentId: M:sl.ZEDMat.UpdateCPUFromGPU
      language: CSharp
      name:
        CSharp: UpdateCPUFromGPU()
        VB: UpdateCPUFromGPU()
      nameWithType:
        CSharp: ZEDMat.UpdateCPUFromGPU()
        VB: ZEDMat.UpdateCPUFromGPU()
      qualifiedName:
        CSharp: sl.ZEDMat.UpdateCPUFromGPU()
        VB: sl.ZEDMat.UpdateCPUFromGPU()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: UpdateCPUFromGPU
        path: ''
        startLine: 4198
      summary: "\nCopies data from the GPU to the CPU, if possible.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE UpdateCPUFromGPU()
          VB: Public Function UpdateCPUFromGPU As ERROR_CODE
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDMat.UpdateCPUFromGPU*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.UpdateGPUFromCPU
      commentId: M:sl.ZEDMat.UpdateGPUFromCPU
      language: CSharp
      name:
        CSharp: UpdateGPUFromCPU()
        VB: UpdateGPUFromCPU()
      nameWithType:
        CSharp: ZEDMat.UpdateGPUFromCPU()
        VB: ZEDMat.UpdateGPUFromCPU()
      qualifiedName:
        CSharp: sl.ZEDMat.UpdateGPUFromCPU()
        VB: sl.ZEDMat.UpdateGPUFromCPU()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: UpdateGPUFromCPU
        path: ''
        startLine: 4207
      summary: "\nCopies data from the CPU to the GPU, if possible.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE UpdateGPUFromCPU()
          VB: Public Function UpdateGPUFromCPU As ERROR_CODE
        return:
          type: sl.ERROR_CODE
          description: ''
      overload: sl.ZEDMat.UpdateGPUFromCPU*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetInfos
      commentId: M:sl.ZEDMat.GetInfos
      language: CSharp
      name:
        CSharp: GetInfos()
        VB: GetInfos()
      nameWithType:
        CSharp: ZEDMat.GetInfos()
        VB: ZEDMat.GetInfos()
      qualifiedName:
        CSharp: sl.ZEDMat.GetInfos()
        VB: sl.ZEDMat.GetInfos()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetInfos
        path: ''
        startLine: 4216
      summary: "\nReturns information about the Mat.\n"
      example: []
      syntax:
        content:
          CSharp: public string GetInfos()
          VB: Public Function GetInfos As String
        return:
          type: System.String
          description: String providing Mat information.
      overload: sl.ZEDMat.GetInfos*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.CopyTo(sl.ZEDMat,sl.COPY_TYPE)
      commentId: M:sl.ZEDMat.CopyTo(sl.ZEDMat,sl.COPY_TYPE)
      language: CSharp
      name:
        CSharp: CopyTo(ZEDMat, COPY_TYPE)
        VB: CopyTo(ZEDMat, COPY_TYPE)
      nameWithType:
        CSharp: ZEDMat.CopyTo(ZEDMat, COPY_TYPE)
        VB: ZEDMat.CopyTo(ZEDMat, COPY_TYPE)
      qualifiedName:
        CSharp: sl.ZEDMat.CopyTo(sl.ZEDMat, sl.COPY_TYPE)
        VB: sl.ZEDMat.CopyTo(sl.ZEDMat, sl.COPY_TYPE)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: CopyTo
        path: ''
        startLine: 4229
      summary: "\nCopies data from this Mat to another Mat (deep copy).\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE CopyTo(ZEDMat dest, COPY_TYPE copyType = COPY_TYPE.COPY_TYPE_CPU_CPU)
          VB: Public Function CopyTo(dest As ZEDMat, copyType As COPY_TYPE = COPY_TYPE.COPY_TYPE_CPU_CPU) As ERROR_CODE
        parameters:
        - id: dest
          type: sl.ZEDMat
          description: Mat that the data will be copied to.
        - id: copyType
          type: sl.COPY_TYPE
          description: The To and From memory types.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the copy was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Read(System.String)
      commentId: M:sl.ZEDMat.Read(System.String)
      language: CSharp
      name:
        CSharp: Read(String)
        VB: Read(String)
      nameWithType:
        CSharp: ZEDMat.Read(String)
        VB: ZEDMat.Read(String)
      qualifiedName:
        CSharp: sl.ZEDMat.Read(System.String)
        VB: sl.ZEDMat.Read(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Read
        path: ''
        startLine: 4239
      summary: "\nReads an image from a file. Supports .png and .jpeg. Only works if Mat has access to MEM_CPU.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE Read(string filePath)
          VB: Public Function Read(filePath As String) As ERROR_CODE
        parameters:
        - id: filePath
          type: System.String
          description: File path, including file name and extension.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the read was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.Read*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Write(System.String,System.Int32)
      commentId: M:sl.ZEDMat.Write(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Write(String, Int32)
        VB: Write(String, Int32)
      nameWithType:
        CSharp: ZEDMat.Write(String, Int32)
        VB: ZEDMat.Write(String, Int32)
      qualifiedName:
        CSharp: sl.ZEDMat.Write(System.String, System.Int32)
        VB: sl.ZEDMat.Write(System.String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Write
        path: ''
        startLine: 4250
      summary: "\nWrites the Mat into a file as an image. Only works if Mat has access to MEM_CPU.\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE Write(string filePath, int compressionLevel = -1)
          VB: Public Function Write(filePath As String, compressionLevel As Integer = -1) As ERROR_CODE
        parameters:
        - id: filePath
          type: System.String
          description: File path, including file name and extension.
        - id: compressionLevel
          type: System.Int32
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the write was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetWidth
      commentId: M:sl.ZEDMat.GetWidth
      language: CSharp
      name:
        CSharp: GetWidth()
        VB: GetWidth()
      nameWithType:
        CSharp: ZEDMat.GetWidth()
        VB: ZEDMat.GetWidth()
      qualifiedName:
        CSharp: sl.ZEDMat.GetWidth()
        VB: sl.ZEDMat.GetWidth()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetWidth
        path: ''
        startLine: 4259
      summary: "\nReturns the width of the matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetWidth()
          VB: Public Function GetWidth As Integer
        return:
          type: System.Int32
          description: ''
      overload: sl.ZEDMat.GetWidth*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetHeight
      commentId: M:sl.ZEDMat.GetHeight
      language: CSharp
      name:
        CSharp: GetHeight()
        VB: GetHeight()
      nameWithType:
        CSharp: ZEDMat.GetHeight()
        VB: ZEDMat.GetHeight()
      qualifiedName:
        CSharp: sl.ZEDMat.GetHeight()
        VB: sl.ZEDMat.GetHeight()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetHeight
        path: ''
        startLine: 4268
      summary: "\nReturns the height of the matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetHeight()
          VB: Public Function GetHeight As Integer
        return:
          type: System.Int32
          description: ''
      overload: sl.ZEDMat.GetHeight*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetChannels
      commentId: M:sl.ZEDMat.GetChannels
      language: CSharp
      name:
        CSharp: GetChannels()
        VB: GetChannels()
      nameWithType:
        CSharp: ZEDMat.GetChannels()
        VB: ZEDMat.GetChannels()
      qualifiedName:
        CSharp: sl.ZEDMat.GetChannels()
        VB: sl.ZEDMat.GetChannels()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetChannels
        path: ''
        startLine: 4277
      summary: "\nReturns the number of values/channels stored in each pixel.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetChannels()
          VB: Public Function GetChannels As Integer
        return:
          type: System.Int32
          description: Number of values/channels.
      overload: sl.ZEDMat.GetChannels*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetPixelBytes
      commentId: M:sl.ZEDMat.GetPixelBytes
      language: CSharp
      name:
        CSharp: GetPixelBytes()
        VB: GetPixelBytes()
      nameWithType:
        CSharp: ZEDMat.GetPixelBytes()
        VB: ZEDMat.GetPixelBytes()
      qualifiedName:
        CSharp: sl.ZEDMat.GetPixelBytes()
        VB: sl.ZEDMat.GetPixelBytes()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetPixelBytes
        path: ''
        startLine: 4286
      summary: "\nReturns the size in bytes of one pixel.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetPixelBytes()
          VB: Public Function GetPixelBytes As Integer
        return:
          type: System.Int32
          description: Size in bytes.
      overload: sl.ZEDMat.GetPixelBytes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetStep
      commentId: M:sl.ZEDMat.GetStep
      language: CSharp
      name:
        CSharp: GetStep()
        VB: GetStep()
      nameWithType:
        CSharp: ZEDMat.GetStep()
        VB: ZEDMat.GetStep()
      qualifiedName:
        CSharp: sl.ZEDMat.GetStep()
        VB: sl.ZEDMat.GetStep()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetStep
        path: ''
        startLine: 4295
      summary: "\nReturns the memory &apos;step&apos; in number/length of elements - how many values make up each row of pixels.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetStep()
          VB: Public Function GetStep As Integer
        return:
          type: System.Int32
          description: Step length.
      overload: sl.ZEDMat.GetStep*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetStepBytes
      commentId: M:sl.ZEDMat.GetStepBytes
      language: CSharp
      name:
        CSharp: GetStepBytes()
        VB: GetStepBytes()
      nameWithType:
        CSharp: ZEDMat.GetStepBytes()
        VB: ZEDMat.GetStepBytes()
      qualifiedName:
        CSharp: sl.ZEDMat.GetStepBytes()
        VB: sl.ZEDMat.GetStepBytes()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetStepBytes
        path: ''
        startLine: 4304
      summary: "\nReturns the memory &apos;step&apos; in bytes - how many bytes make up each row of pixels.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetStepBytes()
          VB: Public Function GetStepBytes As Integer
        return:
          type: System.Int32
          description: ''
      overload: sl.ZEDMat.GetStepBytes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetWidthBytes
      commentId: M:sl.ZEDMat.GetWidthBytes
      language: CSharp
      name:
        CSharp: GetWidthBytes()
        VB: GetWidthBytes()
      nameWithType:
        CSharp: ZEDMat.GetWidthBytes()
        VB: ZEDMat.GetWidthBytes()
      qualifiedName:
        CSharp: sl.ZEDMat.GetWidthBytes()
        VB: sl.ZEDMat.GetWidthBytes()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetWidthBytes
        path: ''
        startLine: 4313
      summary: "\nReturns the size of each row in bytes.\n"
      example: []
      syntax:
        content:
          CSharp: public int GetWidthBytes()
          VB: Public Function GetWidthBytes As Integer
        return:
          type: System.Int32
          description: ''
      overload: sl.ZEDMat.GetWidthBytes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetMemoryType
      commentId: M:sl.ZEDMat.GetMemoryType
      language: CSharp
      name:
        CSharp: GetMemoryType()
        VB: GetMemoryType()
      nameWithType:
        CSharp: ZEDMat.GetMemoryType()
        VB: ZEDMat.GetMemoryType()
      qualifiedName:
        CSharp: sl.ZEDMat.GetMemoryType()
        VB: sl.ZEDMat.GetMemoryType()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetMemoryType
        path: ''
        startLine: 4322
      summary: "\nReturns the type of memory (CPU and/or GPU).\n"
      example: []
      syntax:
        content:
          CSharp: public MEM GetMemoryType()
          VB: Public Function GetMemoryType As MEM
        return:
          type: sl.MEM
          description: ''
      overload: sl.ZEDMat.GetMemoryType*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.IsMemoryOwner
      commentId: M:sl.ZEDMat.IsMemoryOwner
      language: CSharp
      name:
        CSharp: IsMemoryOwner()
        VB: IsMemoryOwner()
      nameWithType:
        CSharp: ZEDMat.IsMemoryOwner()
        VB: ZEDMat.IsMemoryOwner()
      qualifiedName:
        CSharp: sl.ZEDMat.IsMemoryOwner()
        VB: sl.ZEDMat.IsMemoryOwner()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: IsMemoryOwner
        path: ''
        startLine: 4331
      summary: "\nReturns whether the Mat is the owner of the memory it&apos;s accessing.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsMemoryOwner()
          VB: Public Function IsMemoryOwner As Boolean
        return:
          type: System.Boolean
          description: ''
      overload: sl.ZEDMat.IsMemoryOwner*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetResolution
      commentId: M:sl.ZEDMat.GetResolution
      language: CSharp
      name:
        CSharp: GetResolution()
        VB: GetResolution()
      nameWithType:
        CSharp: ZEDMat.GetResolution()
        VB: ZEDMat.GetResolution()
      qualifiedName:
        CSharp: sl.ZEDMat.GetResolution()
        VB: sl.ZEDMat.GetResolution()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetResolution
        path: ''
        startLine: 4340
      summary: "\nReturns the resolution of the image that this Mat holds. \n"
      example: []
      syntax:
        content:
          CSharp: public Resolution GetResolution()
          VB: Public Function GetResolution As Resolution
        return:
          type: sl.Resolution
          description: ''
      overload: sl.ZEDMat.GetResolution*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Alloc(System.UInt32,System.UInt32,sl.MAT_TYPE,sl.MEM)
      commentId: M:sl.ZEDMat.Alloc(System.UInt32,System.UInt32,sl.MAT_TYPE,sl.MEM)
      language: CSharp
      name:
        CSharp: Alloc(UInt32, UInt32, MAT_TYPE, MEM)
        VB: Alloc(UInt32, UInt32, MAT_TYPE, MEM)
      nameWithType:
        CSharp: ZEDMat.Alloc(UInt32, UInt32, MAT_TYPE, MEM)
        VB: ZEDMat.Alloc(UInt32, UInt32, MAT_TYPE, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.Alloc(System.UInt32, System.UInt32, sl.MAT_TYPE, sl.MEM)
        VB: sl.ZEDMat.Alloc(System.UInt32, System.UInt32, sl.MAT_TYPE, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Alloc
        path: ''
        startLine: 4352
      summary: "\nAllocates memory for the Mat.\n"
      example: []
      syntax:
        content:
          CSharp: public void Alloc(uint width, uint height, MAT_TYPE matType, MEM mem = MEM.MEM_CPU)
          VB: Public Sub Alloc(width As UInteger, height As UInteger, matType As MAT_TYPE, mem As MEM = MEM.MEM_CPU)
        parameters:
        - id: width
          type: System.UInt32
          description: Width of the image/matrix in pixels.
        - id: height
          type: System.UInt32
          description: Height of the image/matrix in pixels.
        - id: matType
          type: sl.MAT_TYPE
          description: Type of matrix (data type and channels; see sl.MAT_TYPE)
        - id: mem
          type: sl.MEM
          description: Where the buffer will be stored - CPU memory or GPU memory.
      overload: sl.ZEDMat.Alloc*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Alloc(sl.Resolution,sl.MAT_TYPE,sl.MEM)
      commentId: M:sl.ZEDMat.Alloc(sl.Resolution,sl.MAT_TYPE,sl.MEM)
      language: CSharp
      name:
        CSharp: Alloc(Resolution, MAT_TYPE, MEM)
        VB: Alloc(Resolution, MAT_TYPE, MEM)
      nameWithType:
        CSharp: ZEDMat.Alloc(Resolution, MAT_TYPE, MEM)
        VB: ZEDMat.Alloc(Resolution, MAT_TYPE, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.Alloc(sl.Resolution, sl.MAT_TYPE, sl.MEM)
        VB: sl.ZEDMat.Alloc(sl.Resolution, sl.MAT_TYPE, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Alloc
        path: ''
        startLine: 4363
      summary: "\nAllocates memory for the Mat.\n"
      example: []
      syntax:
        content:
          CSharp: public void Alloc(Resolution resolution, MAT_TYPE matType, MEM mem = MEM.MEM_CPU)
          VB: Public Sub Alloc(resolution As Resolution, matType As MAT_TYPE, mem As MEM = MEM.MEM_CPU)
        parameters:
        - id: resolution
          type: sl.Resolution
          description: Size of the image/matrix in pixels.
        - id: matType
          type: sl.MAT_TYPE
          description: Type of matrix (data type and channels; see sl.MAT_TYPE)
        - id: mem
          type: sl.MEM
          description: Where the buffer will be stored - CPU memory or GPU memory.
      overload: sl.ZEDMat.Alloc*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetFrom(sl.ZEDMat,sl.COPY_TYPE)
      commentId: M:sl.ZEDMat.SetFrom(sl.ZEDMat,sl.COPY_TYPE)
      language: CSharp
      name:
        CSharp: SetFrom(ZEDMat, COPY_TYPE)
        VB: SetFrom(ZEDMat, COPY_TYPE)
      nameWithType:
        CSharp: ZEDMat.SetFrom(ZEDMat, COPY_TYPE)
        VB: ZEDMat.SetFrom(ZEDMat, COPY_TYPE)
      qualifiedName:
        CSharp: sl.ZEDMat.SetFrom(sl.ZEDMat, sl.COPY_TYPE)
        VB: sl.ZEDMat.SetFrom(sl.ZEDMat, sl.COPY_TYPE)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetFrom
        path: ''
        startLine: 4374
      summary: "\nCopies data from another Mat into this one(deep copy).\n"
      example: []
      syntax:
        content:
          CSharp: public int SetFrom(ZEDMat src, COPY_TYPE copyType = COPY_TYPE.COPY_TYPE_CPU_CPU)
          VB: Public Function SetFrom(src As ZEDMat, copyType As COPY_TYPE = COPY_TYPE.COPY_TYPE_CPU_CPU) As Integer
        parameters:
        - id: src
          type: sl.ZEDMat
          description: Source Mat from which to copy.
        - id: copyType
          type: sl.COPY_TYPE
          description: The To and From memory types.
        return:
          type: System.Int32
          description: ERROR_CODE (as an int) indicating if the copy was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetFrom*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetPtr(sl.MEM)
      commentId: M:sl.ZEDMat.GetPtr(sl.MEM)
      language: CSharp
      name:
        CSharp: GetPtr(MEM)
        VB: GetPtr(MEM)
      nameWithType:
        CSharp: ZEDMat.GetPtr(MEM)
        VB: ZEDMat.GetPtr(MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetPtr(sl.MEM)
        VB: sl.ZEDMat.GetPtr(sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetPtr
        path: ''
        startLine: 4379
      syntax:
        content:
          CSharp: public IntPtr GetPtr(MEM mem = MEM.MEM_CPU)
          VB: Public Function GetPtr(mem As MEM = MEM.MEM_CPU) As IntPtr
        parameters:
        - id: mem
          type: sl.MEM
        return:
          type: System.IntPtr
      overload: sl.ZEDMat.GetPtr*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.Clone(sl.ZEDMat)
      commentId: M:sl.ZEDMat.Clone(sl.ZEDMat)
      language: CSharp
      name:
        CSharp: Clone(ZEDMat)
        VB: Clone(ZEDMat)
      nameWithType:
        CSharp: ZEDMat.Clone(ZEDMat)
        VB: ZEDMat.Clone(ZEDMat)
      qualifiedName:
        CSharp: sl.ZEDMat.Clone(sl.ZEDMat)
        VB: sl.ZEDMat.Clone(sl.ZEDMat)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: Clone
        path: ''
        startLine: 4388
      summary: "\nDuplicates a Mat by copying all its data into a new one (deep copy).\n"
      example: []
      syntax:
        content:
          CSharp: public void Clone(ZEDMat source)
          VB: Public Sub Clone(source As ZEDMat)
        parameters:
        - id: source
          type: sl.ZEDMat
          description: ''
      overload: sl.ZEDMat.Clone*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,System.Single@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,System.Single@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out Single, MEM)
        VB: GetValue(Int32, Int32, ByRef Single, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out Single, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef Single, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out System.Single, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef System.Single, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4404
      summary: "\nReturns the value of a specific point in the matrix. (MAT_32F_C1)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out float value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As Single, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: System.Single
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.float2@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.float2@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out float2, MEM)
        VB: GetValue(Int32, Int32, ByRef float2, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out float2, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef float2, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out sl.float2, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef sl.float2, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4416
      summary: "\nReturns the value of a specific point in the matrix. (MAT_32F_C2)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out float2 value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As float2, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.float2
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.float3@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.float3@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out float3, MEM)
        VB: GetValue(Int32, Int32, ByRef float3, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out float3, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef float3, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out sl.float3, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef sl.float3, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4428
      summary: "\nReturns the value of a specific point in the matrix. (MAT_32F_C3)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out float3 value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As float3, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.float3
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.float4@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.float4@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out float4, MEM)
        VB: GetValue(Int32, Int32, ByRef float4, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out float4, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef float4, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out sl.float4, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef sl.float4, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4440
      summary: "\nReturns the value of a specific point in the matrix. (MAT_32F_C4)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out float4 value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As float4, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.float4
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,System.Byte@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,System.Byte@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out Byte, MEM)
        VB: GetValue(Int32, Int32, ByRef Byte, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out Byte, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef Byte, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out System.Byte, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef System.Byte, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4452
      summary: "\nReturns the value of a specific point in the matrix. (MAT_TYPE_8U_C1)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out byte value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As Byte, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: System.Byte
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.char2@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.char2@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out char2, MEM)
        VB: GetValue(Int32, Int32, ByRef char2, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out char2, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef char2, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out sl.char2, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef sl.char2, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4464
      summary: "\nReturns the value of a specific point in the matrix. (MAT_TYPE_8U_C2)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out char2 value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As char2, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.char2
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.char3@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.char3@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out char3, MEM)
        VB: GetValue(Int32, Int32, ByRef char3, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out char3, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef char3, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out sl.char3, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef sl.char3, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4476
      summary: "\nReturns the value of a specific point in the matrix. (MAT_TYPE_8U_C3)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out char3 value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As char3, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.char3
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.char4@,sl.MEM)
      commentId: M:sl.ZEDMat.GetValue(System.Int32,System.Int32,sl.char4@,sl.MEM)
      language: CSharp
      name:
        CSharp: GetValue(Int32, Int32, out char4, MEM)
        VB: GetValue(Int32, Int32, ByRef char4, MEM)
      nameWithType:
        CSharp: ZEDMat.GetValue(Int32, Int32, out char4, MEM)
        VB: ZEDMat.GetValue(Int32, Int32, ByRef char4, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.GetValue(System.Int32, System.Int32, out sl.char4, sl.MEM)
        VB: sl.ZEDMat.GetValue(System.Int32, System.Int32, ByRef sl.char4, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: GetValue
        path: ''
        startLine: 4488
      summary: "\nReturns the value of a specific point in the matrix. (MAT_TYPE_8U_C4)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE GetValue(int x, int y, out char4 value, MEM mem)
          VB: Public Function GetValue(x As Integer, y As Integer, ByRef value As char4, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.char4
          description: Gets filled with the current value.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the get was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,System.Single@,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,System.Single@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, ref Single, MEM)
        VB: SetValue(Int32, Int32, ByRef Single, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, ref Single, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, ByRef Single, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, ref System.Single, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, ByRef System.Single, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4506
      summary: "\nSets a value to a specific point in the matrix. (MAT_32F_C1)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, ref float value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, ByRef value As Single, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: System.Single
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.float2@,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.float2@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, ref float2, MEM)
        VB: SetValue(Int32, Int32, ByRef float2, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, ref float2, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, ByRef float2, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, ref sl.float2, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, ByRef sl.float2, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4518
      summary: "\nSets a value to a specific point in the matrix. (MAT_32F_C2)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, ref float2 value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, ByRef value As float2, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.float2
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.float3@,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.float3@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, ref float3, MEM)
        VB: SetValue(Int32, Int32, ByRef float3, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, ref float3, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, ByRef float3, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, ref sl.float3, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, ByRef sl.float3, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4530
      summary: "\nSets a value to a specific point in the matrix. (MAT_32F_C3)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, ref float3 value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, ByRef value As float3, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.float3
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.float4,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.float4,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, float4, MEM)
        VB: SetValue(Int32, Int32, float4, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, float4, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, float4, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, sl.float4, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, sl.float4, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4542
      summary: "\nSets a value to a specific point in the matrix. (MAT_32F_C4)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, float4 value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, value As float4, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.float4
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,System.Byte@,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,System.Byte@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, ref Byte, MEM)
        VB: SetValue(Int32, Int32, ByRef Byte, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, ref Byte, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, ByRef Byte, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, ref System.Byte, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, ByRef System.Byte, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4554
      summary: "\nSets a value to a specific point in the matrix. (MAT_TYPE_8U_C1)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, ref byte value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, ByRef value As Byte, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: System.Byte
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.char2@,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.char2@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, ref char2, MEM)
        VB: SetValue(Int32, Int32, ByRef char2, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, ref char2, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, ByRef char2, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, ref sl.char2, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, ByRef sl.char2, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4566
      summary: "\nSets a value to a specific point in the matrix. (MAT_TYPE_8U_C2)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, ref char2 value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, ByRef value As char2, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.char2
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.char3@,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.char3@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, ref char3, MEM)
        VB: SetValue(Int32, Int32, ByRef char3, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, ref char3, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, ByRef char3, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, ref sl.char3, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, ByRef sl.char3, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4578
      summary: "\nSets a value to a specific point in the matrix. (MAT_TYPE_8U_C3)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, ref char3 value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, ByRef value As char3, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.char3
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.char4@,sl.MEM)
      commentId: M:sl.ZEDMat.SetValue(System.Int32,System.Int32,sl.char4@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetValue(Int32, Int32, ref char4, MEM)
        VB: SetValue(Int32, Int32, ByRef char4, MEM)
      nameWithType:
        CSharp: ZEDMat.SetValue(Int32, Int32, ref char4, MEM)
        VB: ZEDMat.SetValue(Int32, Int32, ByRef char4, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetValue(System.Int32, System.Int32, ref sl.char4, sl.MEM)
        VB: sl.ZEDMat.SetValue(System.Int32, System.Int32, ByRef sl.char4, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetValue
        path: ''
        startLine: 4590
      summary: "\nSets a value to a specific point in the matrix. (MAT_TYPE_8U_C4)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetValue(int x, int y, ref char4 value, MEM mem)
          VB: Public Function SetValue(x As Integer, y As Integer, ByRef value As char4, mem As MEM) As ERROR_CODE
        parameters:
        - id: x
          type: System.Int32
          description: Row the point is in.
        - id: y
          type: System.Int32
          description: Column the point is in.
        - id: value
          type: sl.char4
          description: Value to which the point will be set.
        - id: mem
          type: sl.MEM
          description: Whether point is on CPU memory or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Error code indicating if the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(System.Single@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(System.Single@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref Single, MEM)
        VB: SetTo(ByRef Single, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref Single, MEM)
        VB: ZEDMat.SetTo(ByRef Single, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref System.Single, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef System.Single, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4605
      summary: "\nFills the entire Mat with the given value. (MAT_32F_C1)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref float value, MEM mem)
          VB: Public Function SetTo(ByRef value As Single, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: System.Single
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(sl.float2@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(sl.float2@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref float2, MEM)
        VB: SetTo(ByRef float2, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref float2, MEM)
        VB: ZEDMat.SetTo(ByRef float2, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref sl.float2, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef sl.float2, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4616
      summary: "\nFills the entire Mat with the given value. (MAT_32F_C2)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref float2 value, MEM mem)
          VB: Public Function SetTo(ByRef value As float2, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: sl.float2
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(sl.float3@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(sl.float3@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref float3, MEM)
        VB: SetTo(ByRef float3, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref float3, MEM)
        VB: ZEDMat.SetTo(ByRef float3, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref sl.float3, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef sl.float3, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4627
      summary: "\nFills the entire Mat with the given value. (MAT_32F_C3)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref float3 value, MEM mem)
          VB: Public Function SetTo(ByRef value As float3, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: sl.float3
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(sl.float4@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(sl.float4@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref float4, MEM)
        VB: SetTo(ByRef float4, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref float4, MEM)
        VB: ZEDMat.SetTo(ByRef float4, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref sl.float4, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef sl.float4, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4638
      summary: "\nFills the entire Mat with the given value. (MAT_32F_C4)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref float4 value, MEM mem)
          VB: Public Function SetTo(ByRef value As float4, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: sl.float4
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(System.Byte@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(System.Byte@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref Byte, MEM)
        VB: SetTo(ByRef Byte, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref Byte, MEM)
        VB: ZEDMat.SetTo(ByRef Byte, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref System.Byte, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef System.Byte, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4649
      summary: "\nFills the entire Mat with the given value. (MAT_TYPE_8U_C1)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref byte value, MEM mem)
          VB: Public Function SetTo(ByRef value As Byte, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: System.Byte
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(sl.char2@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(sl.char2@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref char2, MEM)
        VB: SetTo(ByRef char2, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref char2, MEM)
        VB: ZEDMat.SetTo(ByRef char2, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref sl.char2, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef sl.char2, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4660
      summary: "\nFills the entire Mat with the given value. (MAT_TYPE_8U_C2)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref char2 value, MEM mem)
          VB: Public Function SetTo(ByRef value As char2, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: sl.char2
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(sl.char3@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(sl.char3@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref char3, MEM)
        VB: SetTo(ByRef char3, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref char3, MEM)
        VB: ZEDMat.SetTo(ByRef char3, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref sl.char3, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef sl.char3, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4671
      summary: "\nFills the entire Mat with the given value. (MAT_TYPE_8U_C3)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref char3 value, MEM mem)
          VB: Public Function SetTo(ByRef value As char3, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: sl.char3
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: sl.ZEDMat.SetTo(sl.char4@,sl.MEM)
      commentId: M:sl.ZEDMat.SetTo(sl.char4@,sl.MEM)
      language: CSharp
      name:
        CSharp: SetTo(ref char4, MEM)
        VB: SetTo(ByRef char4, MEM)
      nameWithType:
        CSharp: ZEDMat.SetTo(ref char4, MEM)
        VB: ZEDMat.SetTo(ByRef char4, MEM)
      qualifiedName:
        CSharp: sl.ZEDMat.SetTo(ref sl.char4, sl.MEM)
        VB: sl.ZEDMat.SetTo(ByRef sl.char4, sl.MEM)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: sl
      source:
        id: SetTo
        path: ''
        startLine: 4682
      summary: "\nFills the entire Mat with the given value. (MAT_TYPE_8U_C4)\n"
      example: []
      syntax:
        content:
          CSharp: public ERROR_CODE SetTo(ref char4 value, MEM mem)
          VB: Public Function SetTo(ByRef value As char4, mem As MEM) As ERROR_CODE
        parameters:
        - id: value
          type: sl.char4
          description: Value with which to fill the Mat.
        - id: mem
          type: sl.MEM
          description: Which buffer to fill - CPU or GPU memory.
        return:
          type: sl.ERROR_CODE
          description: Whether the set was successful, or why it wasn&apos;t.
      overload: sl.ZEDMat.SetTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  sl.ZEDCamera.ImageWidth*:
    name:
      CSharp:
      - id: sl.ZEDCamera.ImageWidth*
        name: ImageWidth
        nameWithType: ZEDCamera.ImageWidth
        qualifiedName: sl.ZEDCamera.ImageWidth
      VB:
      - id: sl.ZEDCamera.ImageWidth*
        name: ImageWidth
        nameWithType: ZEDCamera.ImageWidth
        qualifiedName: sl.ZEDCamera.ImageWidth
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.ImageWidth
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  sl.ZEDCamera.ImageHeight*:
    name:
      CSharp:
      - id: sl.ZEDCamera.ImageHeight*
        name: ImageHeight
        nameWithType: ZEDCamera.ImageHeight
        qualifiedName: sl.ZEDCamera.ImageHeight
      VB:
      - id: sl.ZEDCamera.ImageHeight*
        name: ImageHeight
        nameWithType: ZEDCamera.ImageHeight
        qualifiedName: sl.ZEDCamera.ImageHeight
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.ImageHeight
  sl.ZEDCamera.GetRequestedCameraFPS*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetRequestedCameraFPS*
        name: GetRequestedCameraFPS
        nameWithType: ZEDCamera.GetRequestedCameraFPS
        qualifiedName: sl.ZEDCamera.GetRequestedCameraFPS
      VB:
      - id: sl.ZEDCamera.GetRequestedCameraFPS*
        name: GetRequestedCameraFPS
        nameWithType: ZEDCamera.GetRequestedCameraFPS
        qualifiedName: sl.ZEDCamera.GetRequestedCameraFPS
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetRequestedCameraFPS
  sl.ZEDCamera.Baseline*:
    name:
      CSharp:
      - id: sl.ZEDCamera.Baseline*
        name: Baseline
        nameWithType: ZEDCamera.Baseline
        qualifiedName: sl.ZEDCamera.Baseline
      VB:
      - id: sl.ZEDCamera.Baseline*
        name: Baseline
        nameWithType: ZEDCamera.Baseline
        qualifiedName: sl.ZEDCamera.Baseline
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.Baseline
  sl.ZEDCamera.HorizontalFieldOfView*:
    name:
      CSharp:
      - id: sl.ZEDCamera.HorizontalFieldOfView*
        name: HorizontalFieldOfView
        nameWithType: ZEDCamera.HorizontalFieldOfView
        qualifiedName: sl.ZEDCamera.HorizontalFieldOfView
      VB:
      - id: sl.ZEDCamera.HorizontalFieldOfView*
        name: HorizontalFieldOfView
        nameWithType: ZEDCamera.HorizontalFieldOfView
        qualifiedName: sl.ZEDCamera.HorizontalFieldOfView
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.HorizontalFieldOfView
  sl.ZEDCamera.VerticalFieldOfView*:
    name:
      CSharp:
      - id: sl.ZEDCamera.VerticalFieldOfView*
        name: VerticalFieldOfView
        nameWithType: ZEDCamera.VerticalFieldOfView
        qualifiedName: sl.ZEDCamera.VerticalFieldOfView
      VB:
      - id: sl.ZEDCamera.VerticalFieldOfView*
        name: VerticalFieldOfView
        nameWithType: ZEDCamera.VerticalFieldOfView
        qualifiedName: sl.ZEDCamera.VerticalFieldOfView
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.VerticalFieldOfView
  sl:
    name:
      CSharp:
      - name: sl
        nameWithType: sl
        qualifiedName: sl
      VB:
      - name: sl
        nameWithType: sl
        qualifiedName: sl
    isDefinition: true
    commentId: N:sl
  sl.CalibrationParameters:
    name:
      CSharp:
      - id: sl.CalibrationParameters
        name: CalibrationParameters
        nameWithType: CalibrationParameters
        qualifiedName: sl.CalibrationParameters
      VB:
      - id: sl.CalibrationParameters
        name: CalibrationParameters
        nameWithType: CalibrationParameters
        qualifiedName: sl.CalibrationParameters
    isDefinition: true
    parent: sl
    commentId: T:sl.CalibrationParameters
  sl.ZEDCamera.CalibrationParametersRaw*:
    name:
      CSharp:
      - id: sl.ZEDCamera.CalibrationParametersRaw*
        name: CalibrationParametersRaw
        nameWithType: ZEDCamera.CalibrationParametersRaw
        qualifiedName: sl.ZEDCamera.CalibrationParametersRaw
      VB:
      - id: sl.ZEDCamera.CalibrationParametersRaw*
        name: CalibrationParametersRaw
        nameWithType: ZEDCamera.CalibrationParametersRaw
        qualifiedName: sl.ZEDCamera.CalibrationParametersRaw
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.CalibrationParametersRaw
  sl.ZEDCamera.CalibrationParametersRectified*:
    name:
      CSharp:
      - id: sl.ZEDCamera.CalibrationParametersRectified*
        name: CalibrationParametersRectified
        nameWithType: ZEDCamera.CalibrationParametersRectified
        qualifiedName: sl.ZEDCamera.CalibrationParametersRectified
      VB:
      - id: sl.ZEDCamera.CalibrationParametersRectified*
        name: CalibrationParametersRectified
        nameWithType: ZEDCamera.CalibrationParametersRectified
        qualifiedName: sl.ZEDCamera.CalibrationParametersRectified
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.CalibrationParametersRectified
  sl.MODEL:
    name:
      CSharp:
      - id: sl.MODEL
        name: MODEL
        nameWithType: MODEL
        qualifiedName: sl.MODEL
      VB:
      - id: sl.MODEL
        name: MODEL
        nameWithType: MODEL
        qualifiedName: sl.MODEL
    isDefinition: true
    parent: sl
    commentId: T:sl.MODEL
  sl.ZEDCamera.CameraModel*:
    name:
      CSharp:
      - id: sl.ZEDCamera.CameraModel*
        name: CameraModel
        nameWithType: ZEDCamera.CameraModel
        qualifiedName: sl.ZEDCamera.CameraModel
      VB:
      - id: sl.ZEDCamera.CameraModel*
        name: CameraModel
        nameWithType: ZEDCamera.CameraModel
        qualifiedName: sl.ZEDCamera.CameraModel
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.CameraModel
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  sl.ZEDCamera.IsCameraReady*:
    name:
      CSharp:
      - id: sl.ZEDCamera.IsCameraReady*
        name: IsCameraReady
        nameWithType: ZEDCamera.IsCameraReady
        qualifiedName: sl.ZEDCamera.IsCameraReady
      VB:
      - id: sl.ZEDCamera.IsCameraReady*
        name: IsCameraReady
        nameWithType: ZEDCamera.IsCameraReady
        qualifiedName: sl.ZEDCamera.IsCameraReady
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.IsCameraReady
  sl.ZEDCamera.UnloadPlugin*:
    name:
      CSharp:
      - id: sl.ZEDCamera.UnloadPlugin*
        name: UnloadPlugin
        nameWithType: ZEDCamera.UnloadPlugin
        qualifiedName: sl.ZEDCamera.UnloadPlugin
      VB:
      - id: sl.ZEDCamera.UnloadPlugin*
        name: UnloadPlugin
        nameWithType: ZEDCamera.UnloadPlugin
        qualifiedName: sl.ZEDCamera.UnloadPlugin
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.UnloadPlugin
  sl.ZEDCamera.UnloadInstance*:
    name:
      CSharp:
      - id: sl.ZEDCamera.UnloadInstance*
        name: UnloadInstance
        nameWithType: ZEDCamera.UnloadInstance
        qualifiedName: sl.ZEDCamera.UnloadInstance
      VB:
      - id: sl.ZEDCamera.UnloadInstance*
        name: UnloadInstance
        nameWithType: ZEDCamera.UnloadInstance
        qualifiedName: sl.ZEDCamera.UnloadInstance
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.UnloadInstance
  Quaternion:
    name:
      CSharp:
      - id: Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
  Vector3:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  sl.ZEDCamera.TransformPose*:
    name:
      CSharp:
      - id: sl.ZEDCamera.TransformPose*
        name: TransformPose
        nameWithType: ZEDCamera.TransformPose
        qualifiedName: sl.ZEDCamera.TransformPose
      VB:
      - id: sl.ZEDCamera.TransformPose*
        name: TransformPose
        nameWithType: ZEDCamera.TransformPose
        qualifiedName: sl.ZEDCamera.TransformPose
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.TransformPose
  sl.ZEDCamera.Close*:
    name:
      CSharp:
      - id: sl.ZEDCamera.Close*
        name: Close
        nameWithType: ZEDCamera.Close
        qualifiedName: sl.ZEDCamera.Close
      VB:
      - id: sl.ZEDCamera.Close*
        name: Close
        nameWithType: ZEDCamera.Close
        qualifiedName: sl.ZEDCamera.Close
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.Close
  sl.ZEDCamera.#ctor*:
    name:
      CSharp:
      - id: sl.ZEDCamera.#ctor*
        name: ZEDCamera
        nameWithType: ZEDCamera.ZEDCamera
        qualifiedName: sl.ZEDCamera.ZEDCamera
      VB:
      - id: sl.ZEDCamera.#ctor*
        name: ZEDCamera
        nameWithType: ZEDCamera.ZEDCamera
        qualifiedName: sl.ZEDCamera.ZEDCamera
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.#ctor
  sl.ERROR_CODE:
    name:
      CSharp:
      - id: sl.ERROR_CODE
        name: ERROR_CODE
        nameWithType: ERROR_CODE
        qualifiedName: sl.ERROR_CODE
      VB:
      - id: sl.ERROR_CODE
        name: ERROR_CODE
        nameWithType: ERROR_CODE
        qualifiedName: sl.ERROR_CODE
    isDefinition: true
    parent: sl
    commentId: T:sl.ERROR_CODE
  sl.InitParameters:
    name:
      CSharp:
      - id: sl.InitParameters
        name: InitParameters
        nameWithType: InitParameters
        qualifiedName: sl.InitParameters
      VB:
      - id: sl.InitParameters
        name: InitParameters
        nameWithType: InitParameters
        qualifiedName: sl.InitParameters
    isDefinition: true
    parent: sl
    commentId: T:sl.InitParameters
  sl.ZEDCamera.Init*:
    name:
      CSharp:
      - id: sl.ZEDCamera.Init*
        name: Init
        nameWithType: ZEDCamera.Init
        qualifiedName: sl.ZEDCamera.Init
      VB:
      - id: sl.ZEDCamera.Init*
        name: Init
        nameWithType: ZEDCamera.Init
        qualifiedName: sl.ZEDCamera.Init
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.Init
  sl.RuntimeParameters:
    name:
      CSharp:
      - id: sl.RuntimeParameters
        name: RuntimeParameters
        nameWithType: RuntimeParameters
        qualifiedName: sl.RuntimeParameters
      VB:
      - id: sl.RuntimeParameters
        name: RuntimeParameters
        nameWithType: RuntimeParameters
        qualifiedName: sl.RuntimeParameters
    isDefinition: true
    parent: sl
    commentId: T:sl.RuntimeParameters
  sl.ZEDCamera.Grab*:
    name:
      CSharp:
      - id: sl.ZEDCamera.Grab*
        name: Grab
        nameWithType: ZEDCamera.Grab
        qualifiedName: sl.ZEDCamera.Grab
      VB:
      - id: sl.ZEDCamera.Grab*
        name: Grab
        nameWithType: ZEDCamera.Grab
        qualifiedName: sl.ZEDCamera.Grab
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.Grab
  sl.INPUT_TYPE:
    name:
      CSharp:
      - id: sl.INPUT_TYPE
        name: INPUT_TYPE
        nameWithType: INPUT_TYPE
        qualifiedName: sl.INPUT_TYPE
      VB:
      - id: sl.INPUT_TYPE
        name: INPUT_TYPE
        nameWithType: INPUT_TYPE
        qualifiedName: sl.INPUT_TYPE
    isDefinition: true
    parent: sl
    commentId: T:sl.INPUT_TYPE
  sl.ZEDCamera.GetInputType*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetInputType*
        name: GetInputType
        nameWithType: ZEDCamera.GetInputType
        qualifiedName: sl.ZEDCamera.GetInputType
      VB:
      - id: sl.ZEDCamera.GetInputType*
        name: GetInputType
        nameWithType: ZEDCamera.GetInputType
        qualifiedName: sl.ZEDCamera.GetInputType
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetInputType
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  sl.SVO_COMPRESSION_MODE:
    name:
      CSharp:
      - id: sl.SVO_COMPRESSION_MODE
        name: SVO_COMPRESSION_MODE
        nameWithType: SVO_COMPRESSION_MODE
        qualifiedName: sl.SVO_COMPRESSION_MODE
      VB:
      - id: sl.SVO_COMPRESSION_MODE
        name: SVO_COMPRESSION_MODE
        nameWithType: SVO_COMPRESSION_MODE
        qualifiedName: sl.SVO_COMPRESSION_MODE
    isDefinition: true
    parent: sl
    commentId: T:sl.SVO_COMPRESSION_MODE
  sl.ZEDCamera.EnableRecording*:
    name:
      CSharp:
      - id: sl.ZEDCamera.EnableRecording*
        name: EnableRecording
        nameWithType: ZEDCamera.EnableRecording
        qualifiedName: sl.ZEDCamera.EnableRecording
      VB:
      - id: sl.ZEDCamera.EnableRecording*
        name: EnableRecording
        nameWithType: ZEDCamera.EnableRecording
        qualifiedName: sl.ZEDCamera.EnableRecording
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.EnableRecording
  sl.ZEDCamera.DisableRecording*:
    name:
      CSharp:
      - id: sl.ZEDCamera.DisableRecording*
        name: DisableRecording
        nameWithType: ZEDCamera.DisableRecording
        qualifiedName: sl.ZEDCamera.DisableRecording
      VB:
      - id: sl.ZEDCamera.DisableRecording*
        name: DisableRecording
        nameWithType: ZEDCamera.DisableRecording
        qualifiedName: sl.ZEDCamera.DisableRecording
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.DisableRecording
  sl.ZEDCamera.SetCameraFPS*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SetCameraFPS*
        name: SetCameraFPS
        nameWithType: ZEDCamera.SetCameraFPS
        qualifiedName: sl.ZEDCamera.SetCameraFPS
      VB:
      - id: sl.ZEDCamera.SetCameraFPS*
        name: SetCameraFPS
        nameWithType: ZEDCamera.SetCameraFPS
        qualifiedName: sl.ZEDCamera.SetCameraFPS
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SetCameraFPS
  sl.ZEDCamera.SetSVOPosition*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SetSVOPosition*
        name: SetSVOPosition
        nameWithType: ZEDCamera.SetSVOPosition
        qualifiedName: sl.ZEDCamera.SetSVOPosition
      VB:
      - id: sl.ZEDCamera.SetSVOPosition*
        name: SetSVOPosition
        nameWithType: ZEDCamera.SetSVOPosition
        qualifiedName: sl.ZEDCamera.SetSVOPosition
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SetSVOPosition
  sl.ZEDCamera.GetConfidenceThreshold*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetConfidenceThreshold*
        name: GetConfidenceThreshold
        nameWithType: ZEDCamera.GetConfidenceThreshold
        qualifiedName: sl.ZEDCamera.GetConfidenceThreshold
      VB:
      - id: sl.ZEDCamera.GetConfidenceThreshold*
        name: GetConfidenceThreshold
        nameWithType: ZEDCamera.GetConfidenceThreshold
        qualifiedName: sl.ZEDCamera.GetConfidenceThreshold
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetConfidenceThreshold
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt64
  sl.ZEDCamera.GetCameraTimeStamp*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetCameraTimeStamp*
        name: GetCameraTimeStamp
        nameWithType: ZEDCamera.GetCameraTimeStamp
        qualifiedName: sl.ZEDCamera.GetCameraTimeStamp
      VB:
      - id: sl.ZEDCamera.GetCameraTimeStamp*
        name: GetCameraTimeStamp
        nameWithType: ZEDCamera.GetCameraTimeStamp
        qualifiedName: sl.ZEDCamera.GetCameraTimeStamp
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetCameraTimeStamp
  sl.ZEDCamera.GetCurrentTimeStamp*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetCurrentTimeStamp*
        name: GetCurrentTimeStamp
        nameWithType: ZEDCamera.GetCurrentTimeStamp
        qualifiedName: sl.ZEDCamera.GetCurrentTimeStamp
      VB:
      - id: sl.ZEDCamera.GetCurrentTimeStamp*
        name: GetCurrentTimeStamp
        nameWithType: ZEDCamera.GetCurrentTimeStamp
        qualifiedName: sl.ZEDCamera.GetCurrentTimeStamp
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetCurrentTimeStamp
  sl.ZEDCamera.GetImageUpdaterTimeStamp*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetImageUpdaterTimeStamp*
        name: GetImageUpdaterTimeStamp
        nameWithType: ZEDCamera.GetImageUpdaterTimeStamp
        qualifiedName: sl.ZEDCamera.GetImageUpdaterTimeStamp
      VB:
      - id: sl.ZEDCamera.GetImageUpdaterTimeStamp*
        name: GetImageUpdaterTimeStamp
        nameWithType: ZEDCamera.GetImageUpdaterTimeStamp
        qualifiedName: sl.ZEDCamera.GetImageUpdaterTimeStamp
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetImageUpdaterTimeStamp
  sl.ZEDCamera.GetSVOPosition*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetSVOPosition*
        name: GetSVOPosition
        nameWithType: ZEDCamera.GetSVOPosition
        qualifiedName: sl.ZEDCamera.GetSVOPosition
      VB:
      - id: sl.ZEDCamera.GetSVOPosition*
        name: GetSVOPosition
        nameWithType: ZEDCamera.GetSVOPosition
        qualifiedName: sl.ZEDCamera.GetSVOPosition
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetSVOPosition
  sl.ZEDCamera.GetSVONumberOfFrames*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetSVONumberOfFrames*
        name: GetSVONumberOfFrames
        nameWithType: ZEDCamera.GetSVONumberOfFrames
        qualifiedName: sl.ZEDCamera.GetSVONumberOfFrames
      VB:
      - id: sl.ZEDCamera.GetSVONumberOfFrames*
        name: GetSVONumberOfFrames
        nameWithType: ZEDCamera.GetSVONumberOfFrames
        qualifiedName: sl.ZEDCamera.GetSVONumberOfFrames
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetSVONumberOfFrames
  sl.ZEDCamera.GetDepthMinRangeValue*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetDepthMinRangeValue*
        name: GetDepthMinRangeValue
        nameWithType: ZEDCamera.GetDepthMinRangeValue
        qualifiedName: sl.ZEDCamera.GetDepthMinRangeValue
      VB:
      - id: sl.ZEDCamera.GetDepthMinRangeValue*
        name: GetDepthMinRangeValue
        nameWithType: ZEDCamera.GetDepthMinRangeValue
        qualifiedName: sl.ZEDCamera.GetDepthMinRangeValue
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetDepthMinRangeValue
  sl.ZEDCamera.GetDepthMaxRangeValue*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetDepthMaxRangeValue*
        name: GetDepthMaxRangeValue
        nameWithType: ZEDCamera.GetDepthMaxRangeValue
        qualifiedName: sl.ZEDCamera.GetDepthMaxRangeValue
      VB:
      - id: sl.ZEDCamera.GetDepthMaxRangeValue*
        name: GetDepthMaxRangeValue
        nameWithType: ZEDCamera.GetDepthMaxRangeValue
        qualifiedName: sl.ZEDCamera.GetDepthMaxRangeValue
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetDepthMaxRangeValue
  sl.ZEDCamera.EnableTracking*:
    name:
      CSharp:
      - id: sl.ZEDCamera.EnableTracking*
        name: EnableTracking
        nameWithType: ZEDCamera.EnableTracking
        qualifiedName: sl.ZEDCamera.EnableTracking
      VB:
      - id: sl.ZEDCamera.EnableTracking*
        name: EnableTracking
        nameWithType: ZEDCamera.EnableTracking
        qualifiedName: sl.ZEDCamera.EnableTracking
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.EnableTracking
  sl.ZEDCamera.DisableTracking*:
    name:
      CSharp:
      - id: sl.ZEDCamera.DisableTracking*
        name: DisableTracking
        nameWithType: ZEDCamera.DisableTracking
        qualifiedName: sl.ZEDCamera.DisableTracking
      VB:
      - id: sl.ZEDCamera.DisableTracking*
        name: DisableTracking
        nameWithType: ZEDCamera.DisableTracking
        qualifiedName: sl.ZEDCamera.DisableTracking
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.DisableTracking
  sl.ZEDCamera.ResetTracking*:
    name:
      CSharp:
      - id: sl.ZEDCamera.ResetTracking*
        name: ResetTracking
        nameWithType: ZEDCamera.ResetTracking
        qualifiedName: sl.ZEDCamera.ResetTracking
      VB:
      - id: sl.ZEDCamera.ResetTracking*
        name: ResetTracking
        nameWithType: ZEDCamera.ResetTracking
        qualifiedName: sl.ZEDCamera.ResetTracking
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.ResetTracking
  sl.ZEDCamera.GetCameraFPS*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetCameraFPS*
        name: GetCameraFPS
        nameWithType: ZEDCamera.GetCameraFPS
        qualifiedName: sl.ZEDCamera.GetCameraFPS
      VB:
      - id: sl.ZEDCamera.GetCameraFPS*
        name: GetCameraFPS
        nameWithType: ZEDCamera.GetCameraFPS
        qualifiedName: sl.ZEDCamera.GetCameraFPS
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetCameraFPS
  sl.ZEDCamera.GetCalibrationParameters*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetCalibrationParameters*
        name: GetCalibrationParameters
        nameWithType: ZEDCamera.GetCalibrationParameters
        qualifiedName: sl.ZEDCamera.GetCalibrationParameters
      VB:
      - id: sl.ZEDCamera.GetCalibrationParameters*
        name: GetCalibrationParameters
        nameWithType: ZEDCamera.GetCalibrationParameters
        qualifiedName: sl.ZEDCamera.GetCalibrationParameters
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetCalibrationParameters
  sl.ZEDCamera.GetCameraModel*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetCameraModel*
        name: GetCameraModel
        nameWithType: ZEDCamera.GetCameraModel
        qualifiedName: sl.ZEDCamera.GetCameraModel
      VB:
      - id: sl.ZEDCamera.GetCameraModel*
        name: GetCameraModel
        nameWithType: ZEDCamera.GetCameraModel
        qualifiedName: sl.ZEDCamera.GetCameraModel
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetCameraModel
  sl.ZEDCamera.GetCameraFirmwareVersion*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetCameraFirmwareVersion*
        name: GetCameraFirmwareVersion
        nameWithType: ZEDCamera.GetCameraFirmwareVersion
        qualifiedName: sl.ZEDCamera.GetCameraFirmwareVersion
      VB:
      - id: sl.ZEDCamera.GetCameraFirmwareVersion*
        name: GetCameraFirmwareVersion
        nameWithType: ZEDCamera.GetCameraFirmwareVersion
        qualifiedName: sl.ZEDCamera.GetCameraFirmwareVersion
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetCameraFirmwareVersion
  sl.ZEDCamera.GetSensorsFirmwareVersion*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetSensorsFirmwareVersion*
        name: GetSensorsFirmwareVersion
        nameWithType: ZEDCamera.GetSensorsFirmwareVersion
        qualifiedName: sl.ZEDCamera.GetSensorsFirmwareVersion
      VB:
      - id: sl.ZEDCamera.GetSensorsFirmwareVersion*
        name: GetSensorsFirmwareVersion
        nameWithType: ZEDCamera.GetSensorsFirmwareVersion
        qualifiedName: sl.ZEDCamera.GetSensorsFirmwareVersion
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetSensorsFirmwareVersion
  sl.ZEDCamera.GetZEDSerialNumber*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetZEDSerialNumber*
        name: GetZEDSerialNumber
        nameWithType: ZEDCamera.GetZEDSerialNumber
        qualifiedName: sl.ZEDCamera.GetZEDSerialNumber
      VB:
      - id: sl.ZEDCamera.GetZEDSerialNumber*
        name: GetZEDSerialNumber
        nameWithType: ZEDCamera.GetZEDSerialNumber
        qualifiedName: sl.ZEDCamera.GetZEDSerialNumber
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetZEDSerialNumber
  sl.ZEDCamera.GetFOV*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetFOV*
        name: GetFOV
        nameWithType: ZEDCamera.GetFOV
        qualifiedName: sl.ZEDCamera.GetFOV
      VB:
      - id: sl.ZEDCamera.GetFOV*
        name: GetFOV
        nameWithType: ZEDCamera.GetFOV
        qualifiedName: sl.ZEDCamera.GetFOV
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetFOV
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  sl.ZEDCamera.GetFrameDroppedCount*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetFrameDroppedCount*
        name: GetFrameDroppedCount
        nameWithType: ZEDCamera.GetFrameDroppedCount
        qualifiedName: sl.ZEDCamera.GetFrameDroppedCount
      VB:
      - id: sl.ZEDCamera.GetFrameDroppedCount*
        name: GetFrameDroppedCount
        nameWithType: ZEDCamera.GetFrameDroppedCount
        qualifiedName: sl.ZEDCamera.GetFrameDroppedCount
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetFrameDroppedCount
  sl.ZEDCamera.GetFrameDroppedPercent*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetFrameDroppedPercent*
        name: GetFrameDroppedPercent
        nameWithType: ZEDCamera.GetFrameDroppedPercent
        qualifiedName: sl.ZEDCamera.GetFrameDroppedPercent
      VB:
      - id: sl.ZEDCamera.GetFrameDroppedPercent*
        name: GetFrameDroppedPercent
        nameWithType: ZEDCamera.GetFrameDroppedPercent
        qualifiedName: sl.ZEDCamera.GetFrameDroppedPercent
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetFrameDroppedPercent
  sl.TRACKING_STATE:
    name:
      CSharp:
      - id: sl.TRACKING_STATE
        name: TRACKING_STATE
        nameWithType: TRACKING_STATE
        qualifiedName: sl.TRACKING_STATE
      VB:
      - id: sl.TRACKING_STATE
        name: TRACKING_STATE
        nameWithType: TRACKING_STATE
        qualifiedName: sl.TRACKING_STATE
    isDefinition: true
    parent: sl
    commentId: T:sl.TRACKING_STATE
  sl.REFERENCE_FRAME:
    name:
      CSharp:
      - id: sl.REFERENCE_FRAME
        name: REFERENCE_FRAME
        nameWithType: REFERENCE_FRAME
        qualifiedName: sl.REFERENCE_FRAME
      VB:
      - id: sl.REFERENCE_FRAME
        name: REFERENCE_FRAME
        nameWithType: REFERENCE_FRAME
        qualifiedName: sl.REFERENCE_FRAME
    isDefinition: true
    parent: sl
    commentId: T:sl.REFERENCE_FRAME
  sl.ZEDCamera.GetPosition*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetPosition*
        name: GetPosition
        nameWithType: ZEDCamera.GetPosition
        qualifiedName: sl.ZEDCamera.GetPosition
      VB:
      - id: sl.ZEDCamera.GetPosition*
        name: GetPosition
        nameWithType: ZEDCamera.GetPosition
        qualifiedName: sl.ZEDCamera.GetPosition
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetPosition
  sl.TRACKING_FRAME:
    name:
      CSharp:
      - id: sl.TRACKING_FRAME
        name: TRACKING_FRAME
        nameWithType: TRACKING_FRAME
        qualifiedName: sl.TRACKING_FRAME
      VB:
      - id: sl.TRACKING_FRAME
        name: TRACKING_FRAME
        nameWithType: TRACKING_FRAME
        qualifiedName: sl.TRACKING_FRAME
    isDefinition: true
    parent: sl
    commentId: T:sl.TRACKING_FRAME
  sl.Pose:
    name:
      CSharp:
      - id: sl.Pose
        name: Pose
        nameWithType: Pose
        qualifiedName: sl.Pose
      VB:
      - id: sl.Pose
        name: Pose
        nameWithType: Pose
        qualifiedName: sl.Pose
    isDefinition: true
    parent: sl
    commentId: T:sl.Pose
  sl.ZEDCamera.SetIMUOrientationPrior*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SetIMUOrientationPrior*
        name: SetIMUOrientationPrior
        nameWithType: ZEDCamera.SetIMUOrientationPrior
        qualifiedName: sl.ZEDCamera.SetIMUOrientationPrior
      VB:
      - id: sl.ZEDCamera.SetIMUOrientationPrior*
        name: SetIMUOrientationPrior
        nameWithType: ZEDCamera.SetIMUOrientationPrior
        qualifiedName: sl.ZEDCamera.SetIMUOrientationPrior
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SetIMUOrientationPrior
  sl.TIME_REFERENCE:
    name:
      CSharp:
      - id: sl.TIME_REFERENCE
        name: TIME_REFERENCE
        nameWithType: TIME_REFERENCE
        qualifiedName: sl.TIME_REFERENCE
      VB:
      - id: sl.TIME_REFERENCE
        name: TIME_REFERENCE
        nameWithType: TIME_REFERENCE
        qualifiedName: sl.TIME_REFERENCE
    isDefinition: true
    parent: sl
    commentId: T:sl.TIME_REFERENCE
  sl.ZEDCamera.GetInternalIMUOrientation*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetInternalIMUOrientation*
        name: GetInternalIMUOrientation
        nameWithType: ZEDCamera.GetInternalIMUOrientation
        qualifiedName: sl.ZEDCamera.GetInternalIMUOrientation
      VB:
      - id: sl.ZEDCamera.GetInternalIMUOrientation*
        name: GetInternalIMUOrientation
        nameWithType: ZEDCamera.GetInternalIMUOrientation
        qualifiedName: sl.ZEDCamera.GetInternalIMUOrientation
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetInternalIMUOrientation
  sl.SensorsData:
    name:
      CSharp:
      - id: sl.SensorsData
        name: SensorsData
        nameWithType: SensorsData
        qualifiedName: sl.SensorsData
      VB:
      - id: sl.SensorsData
        name: SensorsData
        nameWithType: SensorsData
        qualifiedName: sl.SensorsData
    isDefinition: true
    parent: sl
    commentId: T:sl.SensorsData
  sl.ZEDCamera.GetInternalSensorsData*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetInternalSensorsData*
        name: GetInternalSensorsData
        nameWithType: ZEDCamera.GetInternalSensorsData
        qualifiedName: sl.ZEDCamera.GetInternalSensorsData
      VB:
      - id: sl.ZEDCamera.GetInternalSensorsData*
        name: GetInternalSensorsData
        nameWithType: ZEDCamera.GetInternalSensorsData
        qualifiedName: sl.ZEDCamera.GetInternalSensorsData
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetInternalSensorsData
  sl.CAMERA_SETTINGS:
    name:
      CSharp:
      - id: sl.CAMERA_SETTINGS
        name: CAMERA_SETTINGS
        nameWithType: CAMERA_SETTINGS
        qualifiedName: sl.CAMERA_SETTINGS
      VB:
      - id: sl.CAMERA_SETTINGS
        name: CAMERA_SETTINGS
        nameWithType: CAMERA_SETTINGS
        qualifiedName: sl.CAMERA_SETTINGS
    isDefinition: true
    parent: sl
    commentId: T:sl.CAMERA_SETTINGS
  sl.ZEDCamera.SetCameraSettings*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SetCameraSettings*
        name: SetCameraSettings
        nameWithType: ZEDCamera.SetCameraSettings
        qualifiedName: sl.ZEDCamera.SetCameraSettings
      VB:
      - id: sl.ZEDCamera.SetCameraSettings*
        name: SetCameraSettings
        nameWithType: ZEDCamera.SetCameraSettings
        qualifiedName: sl.ZEDCamera.SetCameraSettings
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SetCameraSettings
  sl.ZEDCamera.GetCameraSettings*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetCameraSettings*
        name: GetCameraSettings
        nameWithType: ZEDCamera.GetCameraSettings
        qualifiedName: sl.ZEDCamera.GetCameraSettings
      VB:
      - id: sl.ZEDCamera.GetCameraSettings*
        name: GetCameraSettings
        nameWithType: ZEDCamera.GetCameraSettings
        qualifiedName: sl.ZEDCamera.GetCameraSettings
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetCameraSettings
  sl.iRect:
    name:
      CSharp:
      - id: sl.iRect
        name: iRect
        nameWithType: iRect
        qualifiedName: sl.iRect
      VB:
      - id: sl.iRect
        name: iRect
        nameWithType: iRect
        qualifiedName: sl.iRect
    isDefinition: true
    parent: sl
    commentId: T:sl.iRect
  sl.ZEDCamera.ResetCameraSettings*:
    name:
      CSharp:
      - id: sl.ZEDCamera.ResetCameraSettings*
        name: ResetCameraSettings
        nameWithType: ZEDCamera.ResetCameraSettings
        qualifiedName: sl.ZEDCamera.ResetCameraSettings
      VB:
      - id: sl.ZEDCamera.ResetCameraSettings*
        name: ResetCameraSettings
        nameWithType: ZEDCamera.ResetCameraSettings
        qualifiedName: sl.ZEDCamera.ResetCameraSettings
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.ResetCameraSettings
  sl.ZEDCamera.LoadCameraSettings*:
    name:
      CSharp:
      - id: sl.ZEDCamera.LoadCameraSettings*
        name: LoadCameraSettings
        nameWithType: ZEDCamera.LoadCameraSettings
        qualifiedName: sl.ZEDCamera.LoadCameraSettings
      VB:
      - id: sl.ZEDCamera.LoadCameraSettings*
        name: LoadCameraSettings
        nameWithType: ZEDCamera.LoadCameraSettings
        qualifiedName: sl.ZEDCamera.LoadCameraSettings
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.LoadCameraSettings
  sl.ZEDCamera.SaveCameraSettings*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SaveCameraSettings*
        name: SaveCameraSettings
        nameWithType: ZEDCamera.SaveCameraSettings
        qualifiedName: sl.ZEDCamera.SaveCameraSettings
      VB:
      - id: sl.ZEDCamera.SaveCameraSettings*
        name: SaveCameraSettings
        nameWithType: ZEDCamera.SaveCameraSettings
        qualifiedName: sl.ZEDCamera.SaveCameraSettings
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SaveCameraSettings
  sl.ZEDCamera.RetrieveCameraSettings*:
    name:
      CSharp:
      - id: sl.ZEDCamera.RetrieveCameraSettings*
        name: RetrieveCameraSettings
        nameWithType: ZEDCamera.RetrieveCameraSettings
        qualifiedName: sl.ZEDCamera.RetrieveCameraSettings
      VB:
      - id: sl.ZEDCamera.RetrieveCameraSettings*
        name: RetrieveCameraSettings
        nameWithType: ZEDCamera.RetrieveCameraSettings
        qualifiedName: sl.ZEDCamera.RetrieveCameraSettings
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.RetrieveCameraSettings
  sl.ZEDCamera.GetExposureUpdateType*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetExposureUpdateType*
        name: GetExposureUpdateType
        nameWithType: ZEDCamera.GetExposureUpdateType
        qualifiedName: sl.ZEDCamera.GetExposureUpdateType
      VB:
      - id: sl.ZEDCamera.GetExposureUpdateType*
        name: GetExposureUpdateType
        nameWithType: ZEDCamera.GetExposureUpdateType
        qualifiedName: sl.ZEDCamera.GetExposureUpdateType
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetExposureUpdateType
  sl.ZEDCamera.GetWhiteBalanceUpdateType*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetWhiteBalanceUpdateType*
        name: GetWhiteBalanceUpdateType
        nameWithType: ZEDCamera.GetWhiteBalanceUpdateType
        qualifiedName: sl.ZEDCamera.GetWhiteBalanceUpdateType
      VB:
      - id: sl.ZEDCamera.GetWhiteBalanceUpdateType*
        name: GetWhiteBalanceUpdateType
        nameWithType: ZEDCamera.GetWhiteBalanceUpdateType
        qualifiedName: sl.ZEDCamera.GetWhiteBalanceUpdateType
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetWhiteBalanceUpdateType
  sl.ZEDCamera.IsZedConnected*:
    name:
      CSharp:
      - id: sl.ZEDCamera.IsZedConnected*
        name: IsZedConnected
        nameWithType: ZEDCamera.IsZedConnected
        qualifiedName: sl.ZEDCamera.IsZedConnected
      VB:
      - id: sl.ZEDCamera.IsZedConnected*
        name: IsZedConnected
        nameWithType: ZEDCamera.IsZedConnected
        qualifiedName: sl.ZEDCamera.IsZedConnected
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.IsZedConnected
  sl.ZEDCamera.GetSDKVersion*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetSDKVersion*
        name: GetSDKVersion
        nameWithType: ZEDCamera.GetSDKVersion
        qualifiedName: sl.ZEDCamera.GetSDKVersion
      VB:
      - id: sl.ZEDCamera.GetSDKVersion*
        name: GetSDKVersion
        nameWithType: ZEDCamera.GetSDKVersion
        qualifiedName: sl.ZEDCamera.GetSDKVersion
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetSDKVersion
  sl.ZEDCamera.GetDepthValue*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetDepthValue*
        name: GetDepthValue
        nameWithType: ZEDCamera.GetDepthValue
        qualifiedName: sl.ZEDCamera.GetDepthValue
      VB:
      - id: sl.ZEDCamera.GetDepthValue*
        name: GetDepthValue
        nameWithType: ZEDCamera.GetDepthValue
        qualifiedName: sl.ZEDCamera.GetDepthValue
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetDepthValue
  sl.ZEDCamera.GetDistanceValue*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetDistanceValue*
        name: GetDistanceValue
        nameWithType: ZEDCamera.GetDistanceValue
        qualifiedName: sl.ZEDCamera.GetDistanceValue
      VB:
      - id: sl.ZEDCamera.GetDistanceValue*
        name: GetDistanceValue
        nameWithType: ZEDCamera.GetDistanceValue
        qualifiedName: sl.ZEDCamera.GetDistanceValue
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetDistanceValue
  Vector4:
    name:
      CSharp:
      - id: Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
      VB:
      - id: Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
    isDefinition: true
  sl.ZEDCamera.GetXYZValue*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetXYZValue*
        name: GetXYZValue
        nameWithType: ZEDCamera.GetXYZValue
        qualifiedName: sl.ZEDCamera.GetXYZValue
      VB:
      - id: sl.ZEDCamera.GetXYZValue*
        name: GetXYZValue
        nameWithType: ZEDCamera.GetXYZValue
        qualifiedName: sl.ZEDCamera.GetXYZValue
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetXYZValue
  sl.ZEDCamera.GetNormalValue*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetNormalValue*
        name: GetNormalValue
        nameWithType: ZEDCamera.GetNormalValue
        qualifiedName: sl.ZEDCamera.GetNormalValue
      VB:
      - id: sl.ZEDCamera.GetNormalValue*
        name: GetNormalValue
        nameWithType: ZEDCamera.GetNormalValue
        qualifiedName: sl.ZEDCamera.GetNormalValue
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetNormalValue
  sl.ZEDCamera.EnableSpatialMapping*:
    name:
      CSharp:
      - id: sl.ZEDCamera.EnableSpatialMapping*
        name: EnableSpatialMapping
        nameWithType: ZEDCamera.EnableSpatialMapping
        qualifiedName: sl.ZEDCamera.EnableSpatialMapping
      VB:
      - id: sl.ZEDCamera.EnableSpatialMapping*
        name: EnableSpatialMapping
        nameWithType: ZEDCamera.EnableSpatialMapping
        qualifiedName: sl.ZEDCamera.EnableSpatialMapping
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.EnableSpatialMapping
  sl.ZEDCamera.DisableSpatialMapping*:
    name:
      CSharp:
      - id: sl.ZEDCamera.DisableSpatialMapping*
        name: DisableSpatialMapping
        nameWithType: ZEDCamera.DisableSpatialMapping
        qualifiedName: sl.ZEDCamera.DisableSpatialMapping
      VB:
      - id: sl.ZEDCamera.DisableSpatialMapping*
        name: DisableSpatialMapping
        nameWithType: ZEDCamera.DisableSpatialMapping
        qualifiedName: sl.ZEDCamera.DisableSpatialMapping
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.DisableSpatialMapping
  System.Int32[]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  sl.ZEDCamera.UpdateMesh*:
    name:
      CSharp:
      - id: sl.ZEDCamera.UpdateMesh*
        name: UpdateMesh
        nameWithType: ZEDCamera.UpdateMesh
        qualifiedName: sl.ZEDCamera.UpdateMesh
      VB:
      - id: sl.ZEDCamera.UpdateMesh*
        name: UpdateMesh
        nameWithType: ZEDCamera.UpdateMesh
        qualifiedName: sl.ZEDCamera.UpdateMesh
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.UpdateMesh
  sl.ZEDCamera.extractWholeSpatialMap*:
    name:
      CSharp:
      - id: sl.ZEDCamera.extractWholeSpatialMap*
        name: extractWholeSpatialMap
        nameWithType: ZEDCamera.extractWholeSpatialMap
        qualifiedName: sl.ZEDCamera.extractWholeSpatialMap
      VB:
      - id: sl.ZEDCamera.extractWholeSpatialMap*
        name: extractWholeSpatialMap
        nameWithType: ZEDCamera.extractWholeSpatialMap
        qualifiedName: sl.ZEDCamera.extractWholeSpatialMap
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.extractWholeSpatialMap
  sl.ZEDCamera.RequestMesh*:
    name:
      CSharp:
      - id: sl.ZEDCamera.RequestMesh*
        name: RequestMesh
        nameWithType: ZEDCamera.RequestMesh
        qualifiedName: sl.ZEDCamera.RequestMesh
      VB:
      - id: sl.ZEDCamera.RequestMesh*
        name: RequestMesh
        nameWithType: ZEDCamera.RequestMesh
        qualifiedName: sl.ZEDCamera.RequestMesh
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.RequestMesh
  sl.ZEDCamera.PauseSpatialMapping*:
    name:
      CSharp:
      - id: sl.ZEDCamera.PauseSpatialMapping*
        name: PauseSpatialMapping
        nameWithType: ZEDCamera.PauseSpatialMapping
        qualifiedName: sl.ZEDCamera.PauseSpatialMapping
      VB:
      - id: sl.ZEDCamera.PauseSpatialMapping*
        name: PauseSpatialMapping
        nameWithType: ZEDCamera.PauseSpatialMapping
        qualifiedName: sl.ZEDCamera.PauseSpatialMapping
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.PauseSpatialMapping
  sl.ZEDCamera.GetMeshRequestStatus*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetMeshRequestStatus*
        name: GetMeshRequestStatus
        nameWithType: ZEDCamera.GetMeshRequestStatus
        qualifiedName: sl.ZEDCamera.GetMeshRequestStatus
      VB:
      - id: sl.ZEDCamera.GetMeshRequestStatus*
        name: GetMeshRequestStatus
        nameWithType: ZEDCamera.GetMeshRequestStatus
        qualifiedName: sl.ZEDCamera.GetMeshRequestStatus
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetMeshRequestStatus
  sl.MESH_FILE_FORMAT:
    name:
      CSharp:
      - id: sl.MESH_FILE_FORMAT
        name: MESH_FILE_FORMAT
        nameWithType: MESH_FILE_FORMAT
        qualifiedName: sl.MESH_FILE_FORMAT
      VB:
      - id: sl.MESH_FILE_FORMAT
        name: MESH_FILE_FORMAT
        nameWithType: MESH_FILE_FORMAT
        qualifiedName: sl.MESH_FILE_FORMAT
    isDefinition: true
    parent: sl
    commentId: T:sl.MESH_FILE_FORMAT
  sl.ZEDCamera.SaveMesh*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SaveMesh*
        name: SaveMesh
        nameWithType: ZEDCamera.SaveMesh
        qualifiedName: sl.ZEDCamera.SaveMesh
      VB:
      - id: sl.ZEDCamera.SaveMesh*
        name: SaveMesh
        nameWithType: ZEDCamera.SaveMesh
        qualifiedName: sl.ZEDCamera.SaveMesh
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SaveMesh
  sl.ZEDCamera.LoadMesh*:
    name:
      CSharp:
      - id: sl.ZEDCamera.LoadMesh*
        name: LoadMesh
        nameWithType: ZEDCamera.LoadMesh
        qualifiedName: sl.ZEDCamera.LoadMesh
      VB:
      - id: sl.ZEDCamera.LoadMesh*
        name: LoadMesh
        nameWithType: ZEDCamera.LoadMesh
        qualifiedName: sl.ZEDCamera.LoadMesh
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.LoadMesh
  sl.FILTER:
    name:
      CSharp:
      - id: sl.FILTER
        name: FILTER
        nameWithType: FILTER
        qualifiedName: sl.FILTER
      VB:
      - id: sl.FILTER
        name: FILTER
        nameWithType: FILTER
        qualifiedName: sl.FILTER
    isDefinition: true
    parent: sl
    commentId: T:sl.FILTER
  sl.ZEDCamera.FilterMesh*:
    name:
      CSharp:
      - id: sl.ZEDCamera.FilterMesh*
        name: FilterMesh
        nameWithType: ZEDCamera.FilterMesh
        qualifiedName: sl.ZEDCamera.FilterMesh
      VB:
      - id: sl.ZEDCamera.FilterMesh*
        name: FilterMesh
        nameWithType: ZEDCamera.FilterMesh
        qualifiedName: sl.ZEDCamera.FilterMesh
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.FilterMesh
  sl.ZEDCamera.ApplyTexture*:
    name:
      CSharp:
      - id: sl.ZEDCamera.ApplyTexture*
        name: ApplyTexture
        nameWithType: ZEDCamera.ApplyTexture
        qualifiedName: sl.ZEDCamera.ApplyTexture
      VB:
      - id: sl.ZEDCamera.ApplyTexture*
        name: ApplyTexture
        nameWithType: ZEDCamera.ApplyTexture
        qualifiedName: sl.ZEDCamera.ApplyTexture
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.ApplyTexture
  sl.SPATIAL_MAPPING_STATE:
    name:
      CSharp:
      - id: sl.SPATIAL_MAPPING_STATE
        name: SPATIAL_MAPPING_STATE
        nameWithType: SPATIAL_MAPPING_STATE
        qualifiedName: sl.SPATIAL_MAPPING_STATE
      VB:
      - id: sl.SPATIAL_MAPPING_STATE
        name: SPATIAL_MAPPING_STATE
        nameWithType: SPATIAL_MAPPING_STATE
        qualifiedName: sl.SPATIAL_MAPPING_STATE
    isDefinition: true
    parent: sl
    commentId: T:sl.SPATIAL_MAPPING_STATE
  sl.ZEDCamera.GetSpatialMappingState*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetSpatialMappingState*
        name: GetSpatialMappingState
        nameWithType: ZEDCamera.GetSpatialMappingState
        qualifiedName: sl.ZEDCamera.GetSpatialMappingState
      VB:
      - id: sl.ZEDCamera.GetSpatialMappingState*
        name: GetSpatialMappingState
        nameWithType: ZEDCamera.GetSpatialMappingState
        qualifiedName: sl.ZEDCamera.GetSpatialMappingState
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetSpatialMappingState
  sl.ZEDCamera.GetGravityEstimate*:
    name:
      CSharp:
      - id: sl.ZEDCamera.GetGravityEstimate*
        name: GetGravityEstimate
        nameWithType: ZEDCamera.GetGravityEstimate
        qualifiedName: sl.ZEDCamera.GetGravityEstimate
      VB:
      - id: sl.ZEDCamera.GetGravityEstimate*
        name: GetGravityEstimate
        nameWithType: ZEDCamera.GetGravityEstimate
        qualifiedName: sl.ZEDCamera.GetGravityEstimate
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.GetGravityEstimate
  sl.ZEDCamera.MergeChunks*:
    name:
      CSharp:
      - id: sl.ZEDCamera.MergeChunks*
        name: MergeChunks
        nameWithType: ZEDCamera.MergeChunks
        qualifiedName: sl.ZEDCamera.MergeChunks
      VB:
      - id: sl.ZEDCamera.MergeChunks*
        name: MergeChunks
        nameWithType: ZEDCamera.MergeChunks
        qualifiedName: sl.ZEDCamera.MergeChunks
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.MergeChunks
  sl.ZEDMat:
    name:
      CSharp:
      - id: sl.ZEDMat
        name: ZEDMat
        nameWithType: ZEDMat
        qualifiedName: sl.ZEDMat
      VB:
      - id: sl.ZEDMat
        name: ZEDMat
        nameWithType: ZEDMat
        qualifiedName: sl.ZEDMat
    isDefinition: true
    parent: sl
    commentId: T:sl.ZEDMat
  sl.MEASURE:
    name:
      CSharp:
      - id: sl.MEASURE
        name: MEASURE
        nameWithType: MEASURE
        qualifiedName: sl.MEASURE
      VB:
      - id: sl.MEASURE
        name: MEASURE
        nameWithType: MEASURE
        qualifiedName: sl.MEASURE
    isDefinition: true
    parent: sl
    commentId: T:sl.MEASURE
  sl.MEM:
    name:
      CSharp:
      - id: sl.MEM
        name: MEM
        nameWithType: MEM
        qualifiedName: sl.MEM
      VB:
      - id: sl.MEM
        name: MEM
        nameWithType: MEM
        qualifiedName: sl.MEM
    isDefinition: true
    parent: sl
    commentId: T:sl.MEM
  sl.Resolution:
    name:
      CSharp:
      - id: sl.Resolution
        name: Resolution
        nameWithType: Resolution
        qualifiedName: sl.Resolution
      VB:
      - id: sl.Resolution
        name: Resolution
        nameWithType: Resolution
        qualifiedName: sl.Resolution
    isDefinition: true
    parent: sl
    commentId: T:sl.Resolution
  sl.ZEDCamera.RetrieveMeasure*:
    name:
      CSharp:
      - id: sl.ZEDCamera.RetrieveMeasure*
        name: RetrieveMeasure
        nameWithType: ZEDCamera.RetrieveMeasure
        qualifiedName: sl.ZEDCamera.RetrieveMeasure
      VB:
      - id: sl.ZEDCamera.RetrieveMeasure*
        name: RetrieveMeasure
        nameWithType: ZEDCamera.RetrieveMeasure
        qualifiedName: sl.ZEDCamera.RetrieveMeasure
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.RetrieveMeasure
  sl.VIEW:
    name:
      CSharp:
      - id: sl.VIEW
        name: VIEW
        nameWithType: VIEW
        qualifiedName: sl.VIEW
      VB:
      - id: sl.VIEW
        name: VIEW
        nameWithType: VIEW
        qualifiedName: sl.VIEW
    isDefinition: true
    parent: sl
    commentId: T:sl.VIEW
  sl.ZEDCamera.RetrieveImage*:
    name:
      CSharp:
      - id: sl.ZEDCamera.RetrieveImage*
        name: RetrieveImage
        nameWithType: ZEDCamera.RetrieveImage
        qualifiedName: sl.ZEDCamera.RetrieveImage
      VB:
      - id: sl.ZEDCamera.RetrieveImage*
        name: RetrieveImage
        nameWithType: ZEDCamera.RetrieveImage
        qualifiedName: sl.ZEDCamera.RetrieveImage
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.RetrieveImage
  sl.STREAMING_CODEC:
    name:
      CSharp:
      - id: sl.STREAMING_CODEC
        name: STREAMING_CODEC
        nameWithType: STREAMING_CODEC
        qualifiedName: sl.STREAMING_CODEC
      VB:
      - id: sl.STREAMING_CODEC
        name: STREAMING_CODEC
        nameWithType: STREAMING_CODEC
        qualifiedName: sl.STREAMING_CODEC
    isDefinition: true
    parent: sl
    commentId: T:sl.STREAMING_CODEC
  System.UInt16:
    name:
      CSharp:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      VB:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt16
  sl.ZEDCamera.EnableStreaming*:
    name:
      CSharp:
      - id: sl.ZEDCamera.EnableStreaming*
        name: EnableStreaming
        nameWithType: ZEDCamera.EnableStreaming
        qualifiedName: sl.ZEDCamera.EnableStreaming
      VB:
      - id: sl.ZEDCamera.EnableStreaming*
        name: EnableStreaming
        nameWithType: ZEDCamera.EnableStreaming
        qualifiedName: sl.ZEDCamera.EnableStreaming
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.EnableStreaming
  sl.ZEDCamera.IsStreamingEnabled*:
    name:
      CSharp:
      - id: sl.ZEDCamera.IsStreamingEnabled*
        name: IsStreamingEnabled
        nameWithType: ZEDCamera.IsStreamingEnabled
        qualifiedName: sl.ZEDCamera.IsStreamingEnabled
      VB:
      - id: sl.ZEDCamera.IsStreamingEnabled*
        name: IsStreamingEnabled
        nameWithType: ZEDCamera.IsStreamingEnabled
        qualifiedName: sl.ZEDCamera.IsStreamingEnabled
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.IsStreamingEnabled
  sl.ZEDCamera.DisableStreaming*:
    name:
      CSharp:
      - id: sl.ZEDCamera.DisableStreaming*
        name: DisableStreaming
        nameWithType: ZEDCamera.DisableStreaming
        qualifiedName: sl.ZEDCamera.DisableStreaming
      VB:
      - id: sl.ZEDCamera.DisableStreaming*
        name: DisableStreaming
        nameWithType: ZEDCamera.DisableStreaming
        qualifiedName: sl.ZEDCamera.DisableStreaming
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.DisableStreaming
  sl.ZEDCamera.SaveCurrentImageInFile*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SaveCurrentImageInFile*
        name: SaveCurrentImageInFile
        nameWithType: ZEDCamera.SaveCurrentImageInFile
        qualifiedName: sl.ZEDCamera.SaveCurrentImageInFile
      VB:
      - id: sl.ZEDCamera.SaveCurrentImageInFile*
        name: SaveCurrentImageInFile
        nameWithType: ZEDCamera.SaveCurrentImageInFile
        qualifiedName: sl.ZEDCamera.SaveCurrentImageInFile
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SaveCurrentImageInFile
  sl.ZEDCamera.SaveCurrentDepthInFile*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SaveCurrentDepthInFile*
        name: SaveCurrentDepthInFile
        nameWithType: ZEDCamera.SaveCurrentDepthInFile
        qualifiedName: sl.ZEDCamera.SaveCurrentDepthInFile
      VB:
      - id: sl.ZEDCamera.SaveCurrentDepthInFile*
        name: SaveCurrentDepthInFile
        nameWithType: ZEDCamera.SaveCurrentDepthInFile
        qualifiedName: sl.ZEDCamera.SaveCurrentDepthInFile
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SaveCurrentDepthInFile
  sl.ZEDCamera.SaveCurrentPointCloudInFile*:
    name:
      CSharp:
      - id: sl.ZEDCamera.SaveCurrentPointCloudInFile*
        name: SaveCurrentPointCloudInFile
        nameWithType: ZEDCamera.SaveCurrentPointCloudInFile
        qualifiedName: sl.ZEDCamera.SaveCurrentPointCloudInFile
      VB:
      - id: sl.ZEDCamera.SaveCurrentPointCloudInFile*
        name: SaveCurrentPointCloudInFile
        nameWithType: ZEDCamera.SaveCurrentPointCloudInFile
        qualifiedName: sl.ZEDCamera.SaveCurrentPointCloudInFile
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.SaveCurrentPointCloudInFile
  sl.dll_ObjectDetectionParameters:
    name:
      CSharp:
      - id: sl.dll_ObjectDetectionParameters
        name: dll_ObjectDetectionParameters
        nameWithType: dll_ObjectDetectionParameters
        qualifiedName: sl.dll_ObjectDetectionParameters
      VB:
      - id: sl.dll_ObjectDetectionParameters
        name: dll_ObjectDetectionParameters
        nameWithType: dll_ObjectDetectionParameters
        qualifiedName: sl.dll_ObjectDetectionParameters
    isDefinition: true
    parent: sl
    commentId: T:sl.dll_ObjectDetectionParameters
  sl.ZEDCamera.EnableObjectsDetection*:
    name:
      CSharp:
      - id: sl.ZEDCamera.EnableObjectsDetection*
        name: EnableObjectsDetection
        nameWithType: ZEDCamera.EnableObjectsDetection
        qualifiedName: sl.ZEDCamera.EnableObjectsDetection
      VB:
      - id: sl.ZEDCamera.EnableObjectsDetection*
        name: EnableObjectsDetection
        nameWithType: ZEDCamera.EnableObjectsDetection
        qualifiedName: sl.ZEDCamera.EnableObjectsDetection
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.EnableObjectsDetection
  sl.ZEDCamera.DisableObjectsDetection*:
    name:
      CSharp:
      - id: sl.ZEDCamera.DisableObjectsDetection*
        name: DisableObjectsDetection
        nameWithType: ZEDCamera.DisableObjectsDetection
        qualifiedName: sl.ZEDCamera.DisableObjectsDetection
      VB:
      - id: sl.ZEDCamera.DisableObjectsDetection*
        name: DisableObjectsDetection
        nameWithType: ZEDCamera.DisableObjectsDetection
        qualifiedName: sl.ZEDCamera.DisableObjectsDetection
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.DisableObjectsDetection
  sl.ZEDCamera.PauseObjectsDetection*:
    name:
      CSharp:
      - id: sl.ZEDCamera.PauseObjectsDetection*
        name: PauseObjectsDetection
        nameWithType: ZEDCamera.PauseObjectsDetection
        qualifiedName: sl.ZEDCamera.PauseObjectsDetection
      VB:
      - id: sl.ZEDCamera.PauseObjectsDetection*
        name: PauseObjectsDetection
        nameWithType: ZEDCamera.PauseObjectsDetection
        qualifiedName: sl.ZEDCamera.PauseObjectsDetection
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.PauseObjectsDetection
  sl.dll_ObjectDetectionRuntimeParameters:
    name:
      CSharp:
      - id: sl.dll_ObjectDetectionRuntimeParameters
        name: dll_ObjectDetectionRuntimeParameters
        nameWithType: dll_ObjectDetectionRuntimeParameters
        qualifiedName: sl.dll_ObjectDetectionRuntimeParameters
      VB:
      - id: sl.dll_ObjectDetectionRuntimeParameters
        name: dll_ObjectDetectionRuntimeParameters
        nameWithType: dll_ObjectDetectionRuntimeParameters
        qualifiedName: sl.dll_ObjectDetectionRuntimeParameters
    isDefinition: true
    parent: sl
    commentId: T:sl.dll_ObjectDetectionRuntimeParameters
  sl.ObjectsFrameSDK:
    name:
      CSharp:
      - id: sl.ObjectsFrameSDK
        name: ObjectsFrameSDK
        nameWithType: ObjectsFrameSDK
        qualifiedName: sl.ObjectsFrameSDK
      VB:
      - id: sl.ObjectsFrameSDK
        name: ObjectsFrameSDK
        nameWithType: ObjectsFrameSDK
        qualifiedName: sl.ObjectsFrameSDK
    isDefinition: true
    parent: sl
    commentId: T:sl.ObjectsFrameSDK
  sl.ZEDCamera.RetrieveObjectsDetectionData*:
    name:
      CSharp:
      - id: sl.ZEDCamera.RetrieveObjectsDetectionData*
        name: RetrieveObjectsDetectionData
        nameWithType: ZEDCamera.RetrieveObjectsDetectionData
        qualifiedName: sl.ZEDCamera.RetrieveObjectsDetectionData
      VB:
      - id: sl.ZEDCamera.RetrieveObjectsDetectionData*
        name: RetrieveObjectsDetectionData
        nameWithType: ZEDCamera.RetrieveObjectsDetectionData
        qualifiedName: sl.ZEDCamera.RetrieveObjectsDetectionData
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.RetrieveObjectsDetectionData
  sl.ZEDCamera:
    name:
      CSharp:
      - id: sl.ZEDCamera
        name: ZEDCamera
        nameWithType: ZEDCamera
        qualifiedName: sl.ZEDCamera
      VB:
      - id: sl.ZEDCamera
        name: ZEDCamera
        nameWithType: ZEDCamera
        qualifiedName: sl.ZEDCamera
    isDefinition: true
    commentId: T:sl.ZEDCamera
  sl.ZEDCamera.TYPE_VIEW:
    name:
      CSharp:
      - id: sl.ZEDCamera.TYPE_VIEW
        name: ZEDCamera.TYPE_VIEW
        nameWithType: ZEDCamera.TYPE_VIEW
        qualifiedName: sl.ZEDCamera.TYPE_VIEW
      VB:
      - id: sl.ZEDCamera.TYPE_VIEW
        name: ZEDCamera.TYPE_VIEW
        nameWithType: ZEDCamera.TYPE_VIEW
        qualifiedName: sl.ZEDCamera.TYPE_VIEW
    isDefinition: true
    parent: sl
    commentId: T:sl.ZEDCamera.TYPE_VIEW
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  sl.RESOLUTION:
    name:
      CSharp:
      - id: sl.RESOLUTION
        name: RESOLUTION
        nameWithType: RESOLUTION
        qualifiedName: sl.RESOLUTION
      VB:
      - id: sl.RESOLUTION
        name: RESOLUTION
        nameWithType: RESOLUTION
        qualifiedName: sl.RESOLUTION
    isDefinition: true
    parent: sl
    commentId: T:sl.RESOLUTION
  sl.DEPTH_MODE:
    name:
      CSharp:
      - id: sl.DEPTH_MODE
        name: DEPTH_MODE
        nameWithType: DEPTH_MODE
        qualifiedName: sl.DEPTH_MODE
      VB:
      - id: sl.DEPTH_MODE
        name: DEPTH_MODE
        nameWithType: DEPTH_MODE
        qualifiedName: sl.DEPTH_MODE
    isDefinition: true
    parent: sl
    commentId: T:sl.DEPTH_MODE
  sl.UNIT:
    name:
      CSharp:
      - id: sl.UNIT
        name: UNIT
        nameWithType: UNIT
        qualifiedName: sl.UNIT
      VB:
      - id: sl.UNIT
        name: UNIT
        nameWithType: UNIT
        qualifiedName: sl.UNIT
    isDefinition: true
    parent: sl
    commentId: T:sl.UNIT
  sl.COORDINATE_SYSTEM:
    name:
      CSharp:
      - id: sl.COORDINATE_SYSTEM
        name: COORDINATE_SYSTEM
        nameWithType: COORDINATE_SYSTEM
        qualifiedName: sl.COORDINATE_SYSTEM
      VB:
      - id: sl.COORDINATE_SYSTEM
        name: COORDINATE_SYSTEM
        nameWithType: COORDINATE_SYSTEM
        qualifiedName: sl.COORDINATE_SYSTEM
    isDefinition: true
    parent: sl
    commentId: T:sl.COORDINATE_SYSTEM
  sl.ZEDCamera.dll_initParameters.#ctor*:
    name:
      CSharp:
      - id: sl.ZEDCamera.dll_initParameters.#ctor*
        name: dll_initParameters
        nameWithType: ZEDCamera.dll_initParameters.dll_initParameters
        qualifiedName: sl.ZEDCamera.dll_initParameters.dll_initParameters
      VB:
      - id: sl.ZEDCamera.dll_initParameters.#ctor*
        name: dll_initParameters
        nameWithType: ZEDCamera.dll_initParameters.dll_initParameters
        qualifiedName: sl.ZEDCamera.dll_initParameters.dll_initParameters
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.dll_initParameters.#ctor
  sl.ZEDCamera.dll_initParameters:
    name:
      CSharp:
      - id: sl.ZEDCamera.dll_initParameters
        name: ZEDCamera.dll_initParameters
        nameWithType: ZEDCamera.dll_initParameters
        qualifiedName: sl.ZEDCamera.dll_initParameters
      VB:
      - id: sl.ZEDCamera.dll_initParameters
        name: ZEDCamera.dll_initParameters
        nameWithType: ZEDCamera.dll_initParameters
        qualifiedName: sl.ZEDCamera.dll_initParameters
    isDefinition: true
    commentId: T:sl.ZEDCamera.dll_initParameters
  sl.SENSING_MODE:
    name:
      CSharp:
      - id: sl.SENSING_MODE
        name: SENSING_MODE
        nameWithType: SENSING_MODE
        qualifiedName: sl.SENSING_MODE
      VB:
      - id: sl.SENSING_MODE
        name: SENSING_MODE
        nameWithType: SENSING_MODE
        qualifiedName: sl.SENSING_MODE
    isDefinition: true
    parent: sl
    commentId: T:sl.SENSING_MODE
  sl.ZEDCamera.dll_RuntimeParameters.#ctor*:
    name:
      CSharp:
      - id: sl.ZEDCamera.dll_RuntimeParameters.#ctor*
        name: dll_RuntimeParameters
        nameWithType: ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters
        qualifiedName: sl.ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters
      VB:
      - id: sl.ZEDCamera.dll_RuntimeParameters.#ctor*
        name: dll_RuntimeParameters
        nameWithType: ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters
        qualifiedName: sl.ZEDCamera.dll_RuntimeParameters.dll_RuntimeParameters
    isDefinition: true
    commentId: Overload:sl.ZEDCamera.dll_RuntimeParameters.#ctor
  sl.ZEDCamera.dll_RuntimeParameters:
    name:
      CSharp:
      - id: sl.ZEDCamera.dll_RuntimeParameters
        name: ZEDCamera.dll_RuntimeParameters
        nameWithType: ZEDCamera.dll_RuntimeParameters
        qualifiedName: sl.ZEDCamera.dll_RuntimeParameters
      VB:
      - id: sl.ZEDCamera.dll_RuntimeParameters
        name: ZEDCamera.dll_RuntimeParameters
        nameWithType: ZEDCamera.dll_RuntimeParameters
        qualifiedName: sl.ZEDCamera.dll_RuntimeParameters
    isDefinition: true
    commentId: T:sl.ZEDCamera.dll_RuntimeParameters
  sl.ZEDCommon:
    name:
      CSharp:
      - id: sl.ZEDCommon
        name: ZEDCommon
        nameWithType: ZEDCommon
        qualifiedName: sl.ZEDCommon
      VB:
      - id: sl.ZEDCommon
        name: ZEDCommon
        nameWithType: ZEDCommon
        qualifiedName: sl.ZEDCommon
    isDefinition: true
    commentId: T:sl.ZEDCommon
  sl.ZED_CAMERA_ID:
    name:
      CSharp:
      - id: sl.ZED_CAMERA_ID
        name: ZED_CAMERA_ID
        nameWithType: ZED_CAMERA_ID
        qualifiedName: sl.ZED_CAMERA_ID
      VB:
      - id: sl.ZED_CAMERA_ID
        name: ZED_CAMERA_ID
        nameWithType: ZED_CAMERA_ID
        qualifiedName: sl.ZED_CAMERA_ID
    isDefinition: true
    parent: sl
    commentId: T:sl.ZED_CAMERA_ID
  sl.Constant:
    name:
      CSharp:
      - id: sl.Constant
        name: Constant
        nameWithType: Constant
        qualifiedName: sl.Constant
      VB:
      - id: sl.Constant
        name: Constant
        nameWithType: Constant
        qualifiedName: sl.Constant
    isDefinition: true
    parent: sl
    commentId: T:sl.Constant
  System.Single[]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  sl.Matrix3x3:
    name:
      CSharp:
      - id: sl.Matrix3x3
        name: Matrix3x3
        nameWithType: Matrix3x3
        qualifiedName: sl.Matrix3x3
      VB:
      - id: sl.Matrix3x3
        name: Matrix3x3
        nameWithType: Matrix3x3
        qualifiedName: sl.Matrix3x3
    isDefinition: true
    parent: sl
    commentId: T:sl.Matrix3x3
  sl.Resolution.#ctor*:
    name:
      CSharp:
      - id: sl.Resolution.#ctor*
        name: Resolution
        nameWithType: Resolution.Resolution
        qualifiedName: sl.Resolution.Resolution
      VB:
      - id: sl.Resolution.#ctor*
        name: Resolution
        nameWithType: Resolution.Resolution
        qualifiedName: sl.Resolution.Resolution
    isDefinition: true
    commentId: Overload:sl.Resolution.#ctor
  System.UIntPtr:
    name:
      CSharp:
      - id: System.UIntPtr
        name: UIntPtr
        nameWithType: UIntPtr
        qualifiedName: System.UIntPtr
        isExternal: true
      VB:
      - id: System.UIntPtr
        name: UIntPtr
        nameWithType: UIntPtr
        qualifiedName: System.UIntPtr
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UIntPtr
  sl.ImuData:
    name:
      CSharp:
      - id: sl.ImuData
        name: ImuData
        nameWithType: ImuData
        qualifiedName: sl.ImuData
      VB:
      - id: sl.ImuData
        name: ImuData
        nameWithType: ImuData
        qualifiedName: sl.ImuData
    isDefinition: true
    parent: sl
    commentId: T:sl.ImuData
  sl.BarometerData:
    name:
      CSharp:
      - id: sl.BarometerData
        name: BarometerData
        nameWithType: BarometerData
        qualifiedName: sl.BarometerData
      VB:
      - id: sl.BarometerData
        name: BarometerData
        nameWithType: BarometerData
        qualifiedName: sl.BarometerData
    isDefinition: true
    parent: sl
    commentId: T:sl.BarometerData
  sl.MagnetometerData:
    name:
      CSharp:
      - id: sl.MagnetometerData
        name: MagnetometerData
        nameWithType: MagnetometerData
        qualifiedName: sl.MagnetometerData
      VB:
      - id: sl.MagnetometerData
        name: MagnetometerData
        nameWithType: MagnetometerData
        qualifiedName: sl.MagnetometerData
    isDefinition: true
    parent: sl
    commentId: T:sl.MagnetometerData
  sl.TemperatureSensorData:
    name:
      CSharp:
      - id: sl.TemperatureSensorData
        name: TemperatureSensorData
        nameWithType: TemperatureSensorData
        qualifiedName: sl.TemperatureSensorData
      VB:
      - id: sl.TemperatureSensorData
        name: TemperatureSensorData
        nameWithType: TemperatureSensorData
        qualifiedName: sl.TemperatureSensorData
    isDefinition: true
    parent: sl
    commentId: T:sl.TemperatureSensorData
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  sl.CameraParameters:
    name:
      CSharp:
      - id: sl.CameraParameters
        name: CameraParameters
        nameWithType: CameraParameters
        qualifiedName: sl.CameraParameters
      VB:
      - id: sl.CameraParameters
        name: CameraParameters
        nameWithType: CameraParameters
        qualifiedName: sl.CameraParameters
    isDefinition: true
    parent: sl
    commentId: T:sl.CameraParameters
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  sl.Recording_state:
    name:
      CSharp:
      - id: sl.Recording_state
        name: Recording_state
        nameWithType: Recording_state
        qualifiedName: sl.Recording_state
      VB:
      - id: sl.Recording_state
        name: Recording_state
        nameWithType: Recording_state
        qualifiedName: sl.Recording_state
    isDefinition: true
    commentId: T:sl.Recording_state
  sl.ZED_SELF_CALIBRATION_STATE:
    name:
      CSharp:
      - id: sl.ZED_SELF_CALIBRATION_STATE
        name: ZED_SELF_CALIBRATION_STATE
        nameWithType: ZED_SELF_CALIBRATION_STATE
        qualifiedName: sl.ZED_SELF_CALIBRATION_STATE
      VB:
      - id: sl.ZED_SELF_CALIBRATION_STATE
        name: ZED_SELF_CALIBRATION_STATE
        nameWithType: ZED_SELF_CALIBRATION_STATE
        qualifiedName: sl.ZED_SELF_CALIBRATION_STATE
    isDefinition: true
    parent: sl
    commentId: T:sl.ZED_SELF_CALIBRATION_STATE
  sl.VIEW_MODE:
    name:
      CSharp:
      - id: sl.VIEW_MODE
        name: VIEW_MODE
        nameWithType: VIEW_MODE
        qualifiedName: sl.VIEW_MODE
      VB:
      - id: sl.VIEW_MODE
        name: VIEW_MODE
        nameWithType: VIEW_MODE
        qualifiedName: sl.VIEW_MODE
    isDefinition: true
    parent: sl
    commentId: T:sl.VIEW_MODE
  sl.InitParameters.#ctor*:
    name:
      CSharp:
      - id: sl.InitParameters.#ctor*
        name: InitParameters
        nameWithType: InitParameters.InitParameters
        qualifiedName: sl.InitParameters.InitParameters
      VB:
      - id: sl.InitParameters.#ctor*
        name: InitParameters
        nameWithType: InitParameters.InitParameters
        qualifiedName: sl.InitParameters.InitParameters
    isDefinition: true
    commentId: Overload:sl.InitParameters.#ctor
  sl.AREA_EXPORT_STATE:
    name:
      CSharp:
      - id: sl.AREA_EXPORT_STATE
        name: AREA_EXPORT_STATE
        nameWithType: AREA_EXPORT_STATE
        qualifiedName: sl.AREA_EXPORT_STATE
      VB:
      - id: sl.AREA_EXPORT_STATE
        name: AREA_EXPORT_STATE
        nameWithType: AREA_EXPORT_STATE
        qualifiedName: sl.AREA_EXPORT_STATE
    isDefinition: true
    parent: sl
    commentId: T:sl.AREA_EXPORT_STATE
  sl.RuntimeParameters.#ctor*:
    name:
      CSharp:
      - id: sl.RuntimeParameters.#ctor*
        name: RuntimeParameters
        nameWithType: RuntimeParameters.RuntimeParameters
        qualifiedName: sl.RuntimeParameters.RuntimeParameters
      VB:
      - id: sl.RuntimeParameters.#ctor*
        name: RuntimeParameters
        nameWithType: RuntimeParameters.RuntimeParameters
        qualifiedName: sl.RuntimeParameters.RuntimeParameters
    isDefinition: true
    commentId: Overload:sl.RuntimeParameters.#ctor
  sl.USB_DEVICE:
    name:
      CSharp:
      - id: sl.USB_DEVICE
        name: USB_DEVICE
        nameWithType: USB_DEVICE
        qualifiedName: sl.USB_DEVICE
      VB:
      - id: sl.USB_DEVICE
        name: USB_DEVICE
        nameWithType: USB_DEVICE
        qualifiedName: sl.USB_DEVICE
    isDefinition: true
    parent: sl
    commentId: T:sl.USB_DEVICE
  sl.OBJECT_CLASS:
    name:
      CSharp:
      - id: sl.OBJECT_CLASS
        name: OBJECT_CLASS
        nameWithType: OBJECT_CLASS
        qualifiedName: sl.OBJECT_CLASS
      VB:
      - id: sl.OBJECT_CLASS
        name: OBJECT_CLASS
        nameWithType: OBJECT_CLASS
        qualifiedName: sl.OBJECT_CLASS
    isDefinition: true
    parent: sl
    commentId: T:sl.OBJECT_CLASS
  sl.OBJECT_TRACK_STATE:
    name:
      CSharp:
      - id: sl.OBJECT_TRACK_STATE
        name: OBJECT_TRACK_STATE
        nameWithType: OBJECT_TRACK_STATE
        qualifiedName: sl.OBJECT_TRACK_STATE
      VB:
      - id: sl.OBJECT_TRACK_STATE
        name: OBJECT_TRACK_STATE
        nameWithType: OBJECT_TRACK_STATE
        qualifiedName: sl.OBJECT_TRACK_STATE
    isDefinition: true
    parent: sl
    commentId: T:sl.OBJECT_TRACK_STATE
  System.IntPtr:
    name:
      CSharp:
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      VB:
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IntPtr
  Vector2[]:
    name:
      CSharp:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Vector3[]:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  sl.ObjectDataSDK:
    name:
      CSharp:
      - id: sl.ObjectDataSDK
        name: ObjectDataSDK
        nameWithType: ObjectDataSDK
        qualifiedName: sl.ObjectDataSDK
      VB:
      - id: sl.ObjectDataSDK
        name: ObjectDataSDK
        nameWithType: ObjectDataSDK
        qualifiedName: sl.ObjectDataSDK
    isDefinition: true
    commentId: T:sl.ObjectDataSDK
  sl.ObjectDataSDK[]:
    name:
      CSharp:
      - id: sl.ObjectDataSDK
        name: ObjectDataSDK
        nameWithType: ObjectDataSDK
        qualifiedName: sl.ObjectDataSDK
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: sl.ObjectDataSDK
        name: ObjectDataSDK
        nameWithType: ObjectDataSDK
        qualifiedName: sl.ObjectDataSDK
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Byte:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Byte
  sl.char2:
    name:
      CSharp:
      - id: sl.char2
        name: char2
        nameWithType: char2
        qualifiedName: sl.char2
      VB:
      - id: sl.char2
        name: char2
        nameWithType: char2
        qualifiedName: sl.char2
    isDefinition: true
    parent: sl
    commentId: T:sl.char2
  sl.char3:
    name:
      CSharp:
      - id: sl.char3
        name: char3
        nameWithType: char3
        qualifiedName: sl.char3
      VB:
      - id: sl.char3
        name: char3
        nameWithType: char3
        qualifiedName: sl.char3
    isDefinition: true
    parent: sl
    commentId: T:sl.char3
  sl.char4:
    name:
      CSharp:
      - id: sl.char4
        name: char4
        nameWithType: char4
        qualifiedName: sl.char4
      VB:
      - id: sl.char4
        name: char4
        nameWithType: char4
        qualifiedName: sl.char4
    isDefinition: true
    parent: sl
    commentId: T:sl.char4
  sl.float2:
    name:
      CSharp:
      - id: sl.float2
        name: float2
        nameWithType: float2
        qualifiedName: sl.float2
      VB:
      - id: sl.float2
        name: float2
        nameWithType: float2
        qualifiedName: sl.float2
    isDefinition: true
    parent: sl
    commentId: T:sl.float2
  sl.float3:
    name:
      CSharp:
      - id: sl.float3
        name: float3
        nameWithType: float3
        qualifiedName: sl.float3
      VB:
      - id: sl.float3
        name: float3
        nameWithType: float3
        qualifiedName: sl.float3
    isDefinition: true
    parent: sl
    commentId: T:sl.float3
  sl.float4:
    name:
      CSharp:
      - id: sl.float4
        name: float4
        nameWithType: float4
        qualifiedName: sl.float4
      VB:
      - id: sl.float4
        name: float4
        nameWithType: float4
        qualifiedName: sl.float4
    isDefinition: true
    parent: sl
    commentId: T:sl.float4
  sl.MAT_TYPE:
    name:
      CSharp:
      - id: sl.MAT_TYPE
        name: MAT_TYPE
        nameWithType: MAT_TYPE
        qualifiedName: sl.MAT_TYPE
      VB:
      - id: sl.MAT_TYPE
        name: MAT_TYPE
        nameWithType: MAT_TYPE
        qualifiedName: sl.MAT_TYPE
    isDefinition: true
    parent: sl
    commentId: T:sl.MAT_TYPE
  sl.COPY_TYPE:
    name:
      CSharp:
      - id: sl.COPY_TYPE
        name: COPY_TYPE
        nameWithType: COPY_TYPE
        qualifiedName: sl.COPY_TYPE
      VB:
      - id: sl.COPY_TYPE
        name: COPY_TYPE
        nameWithType: COPY_TYPE
        qualifiedName: sl.COPY_TYPE
    isDefinition: true
    parent: sl
    commentId: T:sl.COPY_TYPE
  sl.ZEDMat.MatPtr*:
    name:
      CSharp:
      - id: sl.ZEDMat.MatPtr*
        name: MatPtr
        nameWithType: ZEDMat.MatPtr
        qualifiedName: sl.ZEDMat.MatPtr
      VB:
      - id: sl.ZEDMat.MatPtr*
        name: MatPtr
        nameWithType: ZEDMat.MatPtr
        qualifiedName: sl.ZEDMat.MatPtr
    isDefinition: true
    commentId: Overload:sl.ZEDMat.MatPtr
  sl.ZEDMat.#ctor*:
    name:
      CSharp:
      - id: sl.ZEDMat.#ctor*
        name: ZEDMat
        nameWithType: ZEDMat.ZEDMat
        qualifiedName: sl.ZEDMat.ZEDMat
      VB:
      - id: sl.ZEDMat.#ctor*
        name: ZEDMat
        nameWithType: ZEDMat.ZEDMat
        qualifiedName: sl.ZEDMat.ZEDMat
    isDefinition: true
    commentId: Overload:sl.ZEDMat.#ctor
  sl.ZEDMat.Create*:
    name:
      CSharp:
      - id: sl.ZEDMat.Create*
        name: Create
        nameWithType: ZEDMat.Create
        qualifiedName: sl.ZEDMat.Create
      VB:
      - id: sl.ZEDMat.Create*
        name: Create
        nameWithType: ZEDMat.Create
        qualifiedName: sl.ZEDMat.Create
    isDefinition: true
    commentId: Overload:sl.ZEDMat.Create
  sl.ZEDMat.IsInit*:
    name:
      CSharp:
      - id: sl.ZEDMat.IsInit*
        name: IsInit
        nameWithType: ZEDMat.IsInit
        qualifiedName: sl.ZEDMat.IsInit
      VB:
      - id: sl.ZEDMat.IsInit*
        name: IsInit
        nameWithType: ZEDMat.IsInit
        qualifiedName: sl.ZEDMat.IsInit
    isDefinition: true
    commentId: Overload:sl.ZEDMat.IsInit
  sl.ZEDMat.Free*:
    name:
      CSharp:
      - id: sl.ZEDMat.Free*
        name: Free
        nameWithType: ZEDMat.Free
        qualifiedName: sl.ZEDMat.Free
      VB:
      - id: sl.ZEDMat.Free*
        name: Free
        nameWithType: ZEDMat.Free
        qualifiedName: sl.ZEDMat.Free
    isDefinition: true
    commentId: Overload:sl.ZEDMat.Free
  sl.ZEDMat.UpdateCPUFromGPU*:
    name:
      CSharp:
      - id: sl.ZEDMat.UpdateCPUFromGPU*
        name: UpdateCPUFromGPU
        nameWithType: ZEDMat.UpdateCPUFromGPU
        qualifiedName: sl.ZEDMat.UpdateCPUFromGPU
      VB:
      - id: sl.ZEDMat.UpdateCPUFromGPU*
        name: UpdateCPUFromGPU
        nameWithType: ZEDMat.UpdateCPUFromGPU
        qualifiedName: sl.ZEDMat.UpdateCPUFromGPU
    isDefinition: true
    commentId: Overload:sl.ZEDMat.UpdateCPUFromGPU
  sl.ZEDMat.UpdateGPUFromCPU*:
    name:
      CSharp:
      - id: sl.ZEDMat.UpdateGPUFromCPU*
        name: UpdateGPUFromCPU
        nameWithType: ZEDMat.UpdateGPUFromCPU
        qualifiedName: sl.ZEDMat.UpdateGPUFromCPU
      VB:
      - id: sl.ZEDMat.UpdateGPUFromCPU*
        name: UpdateGPUFromCPU
        nameWithType: ZEDMat.UpdateGPUFromCPU
        qualifiedName: sl.ZEDMat.UpdateGPUFromCPU
    isDefinition: true
    commentId: Overload:sl.ZEDMat.UpdateGPUFromCPU
  sl.ZEDMat.GetInfos*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetInfos*
        name: GetInfos
        nameWithType: ZEDMat.GetInfos
        qualifiedName: sl.ZEDMat.GetInfos
      VB:
      - id: sl.ZEDMat.GetInfos*
        name: GetInfos
        nameWithType: ZEDMat.GetInfos
        qualifiedName: sl.ZEDMat.GetInfos
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetInfos
  sl.ZEDMat.CopyTo*:
    name:
      CSharp:
      - id: sl.ZEDMat.CopyTo*
        name: CopyTo
        nameWithType: ZEDMat.CopyTo
        qualifiedName: sl.ZEDMat.CopyTo
      VB:
      - id: sl.ZEDMat.CopyTo*
        name: CopyTo
        nameWithType: ZEDMat.CopyTo
        qualifiedName: sl.ZEDMat.CopyTo
    isDefinition: true
    commentId: Overload:sl.ZEDMat.CopyTo
  sl.ZEDMat.Read*:
    name:
      CSharp:
      - id: sl.ZEDMat.Read*
        name: Read
        nameWithType: ZEDMat.Read
        qualifiedName: sl.ZEDMat.Read
      VB:
      - id: sl.ZEDMat.Read*
        name: Read
        nameWithType: ZEDMat.Read
        qualifiedName: sl.ZEDMat.Read
    isDefinition: true
    commentId: Overload:sl.ZEDMat.Read
  sl.ZEDMat.Write*:
    name:
      CSharp:
      - id: sl.ZEDMat.Write*
        name: Write
        nameWithType: ZEDMat.Write
        qualifiedName: sl.ZEDMat.Write
      VB:
      - id: sl.ZEDMat.Write*
        name: Write
        nameWithType: ZEDMat.Write
        qualifiedName: sl.ZEDMat.Write
    isDefinition: true
    commentId: Overload:sl.ZEDMat.Write
  sl.ZEDMat.GetWidth*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetWidth*
        name: GetWidth
        nameWithType: ZEDMat.GetWidth
        qualifiedName: sl.ZEDMat.GetWidth
      VB:
      - id: sl.ZEDMat.GetWidth*
        name: GetWidth
        nameWithType: ZEDMat.GetWidth
        qualifiedName: sl.ZEDMat.GetWidth
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetWidth
  sl.ZEDMat.GetHeight*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetHeight*
        name: GetHeight
        nameWithType: ZEDMat.GetHeight
        qualifiedName: sl.ZEDMat.GetHeight
      VB:
      - id: sl.ZEDMat.GetHeight*
        name: GetHeight
        nameWithType: ZEDMat.GetHeight
        qualifiedName: sl.ZEDMat.GetHeight
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetHeight
  sl.ZEDMat.GetChannels*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetChannels*
        name: GetChannels
        nameWithType: ZEDMat.GetChannels
        qualifiedName: sl.ZEDMat.GetChannels
      VB:
      - id: sl.ZEDMat.GetChannels*
        name: GetChannels
        nameWithType: ZEDMat.GetChannels
        qualifiedName: sl.ZEDMat.GetChannels
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetChannels
  sl.ZEDMat.GetPixelBytes*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetPixelBytes*
        name: GetPixelBytes
        nameWithType: ZEDMat.GetPixelBytes
        qualifiedName: sl.ZEDMat.GetPixelBytes
      VB:
      - id: sl.ZEDMat.GetPixelBytes*
        name: GetPixelBytes
        nameWithType: ZEDMat.GetPixelBytes
        qualifiedName: sl.ZEDMat.GetPixelBytes
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetPixelBytes
  sl.ZEDMat.GetStep*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetStep*
        name: GetStep
        nameWithType: ZEDMat.GetStep
        qualifiedName: sl.ZEDMat.GetStep
      VB:
      - id: sl.ZEDMat.GetStep*
        name: GetStep
        nameWithType: ZEDMat.GetStep
        qualifiedName: sl.ZEDMat.GetStep
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetStep
  sl.ZEDMat.GetStepBytes*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetStepBytes*
        name: GetStepBytes
        nameWithType: ZEDMat.GetStepBytes
        qualifiedName: sl.ZEDMat.GetStepBytes
      VB:
      - id: sl.ZEDMat.GetStepBytes*
        name: GetStepBytes
        nameWithType: ZEDMat.GetStepBytes
        qualifiedName: sl.ZEDMat.GetStepBytes
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetStepBytes
  sl.ZEDMat.GetWidthBytes*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetWidthBytes*
        name: GetWidthBytes
        nameWithType: ZEDMat.GetWidthBytes
        qualifiedName: sl.ZEDMat.GetWidthBytes
      VB:
      - id: sl.ZEDMat.GetWidthBytes*
        name: GetWidthBytes
        nameWithType: ZEDMat.GetWidthBytes
        qualifiedName: sl.ZEDMat.GetWidthBytes
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetWidthBytes
  sl.ZEDMat.GetMemoryType*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetMemoryType*
        name: GetMemoryType
        nameWithType: ZEDMat.GetMemoryType
        qualifiedName: sl.ZEDMat.GetMemoryType
      VB:
      - id: sl.ZEDMat.GetMemoryType*
        name: GetMemoryType
        nameWithType: ZEDMat.GetMemoryType
        qualifiedName: sl.ZEDMat.GetMemoryType
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetMemoryType
  sl.ZEDMat.IsMemoryOwner*:
    name:
      CSharp:
      - id: sl.ZEDMat.IsMemoryOwner*
        name: IsMemoryOwner
        nameWithType: ZEDMat.IsMemoryOwner
        qualifiedName: sl.ZEDMat.IsMemoryOwner
      VB:
      - id: sl.ZEDMat.IsMemoryOwner*
        name: IsMemoryOwner
        nameWithType: ZEDMat.IsMemoryOwner
        qualifiedName: sl.ZEDMat.IsMemoryOwner
    isDefinition: true
    commentId: Overload:sl.ZEDMat.IsMemoryOwner
  sl.ZEDMat.GetResolution*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetResolution*
        name: GetResolution
        nameWithType: ZEDMat.GetResolution
        qualifiedName: sl.ZEDMat.GetResolution
      VB:
      - id: sl.ZEDMat.GetResolution*
        name: GetResolution
        nameWithType: ZEDMat.GetResolution
        qualifiedName: sl.ZEDMat.GetResolution
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetResolution
  sl.ZEDMat.Alloc*:
    name:
      CSharp:
      - id: sl.ZEDMat.Alloc*
        name: Alloc
        nameWithType: ZEDMat.Alloc
        qualifiedName: sl.ZEDMat.Alloc
      VB:
      - id: sl.ZEDMat.Alloc*
        name: Alloc
        nameWithType: ZEDMat.Alloc
        qualifiedName: sl.ZEDMat.Alloc
    isDefinition: true
    commentId: Overload:sl.ZEDMat.Alloc
  sl.ZEDMat.SetFrom*:
    name:
      CSharp:
      - id: sl.ZEDMat.SetFrom*
        name: SetFrom
        nameWithType: ZEDMat.SetFrom
        qualifiedName: sl.ZEDMat.SetFrom
      VB:
      - id: sl.ZEDMat.SetFrom*
        name: SetFrom
        nameWithType: ZEDMat.SetFrom
        qualifiedName: sl.ZEDMat.SetFrom
    isDefinition: true
    commentId: Overload:sl.ZEDMat.SetFrom
  sl.ZEDMat.GetPtr*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetPtr*
        name: GetPtr
        nameWithType: ZEDMat.GetPtr
        qualifiedName: sl.ZEDMat.GetPtr
      VB:
      - id: sl.ZEDMat.GetPtr*
        name: GetPtr
        nameWithType: ZEDMat.GetPtr
        qualifiedName: sl.ZEDMat.GetPtr
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetPtr
  sl.ZEDMat.Clone*:
    name:
      CSharp:
      - id: sl.ZEDMat.Clone*
        name: Clone
        nameWithType: ZEDMat.Clone
        qualifiedName: sl.ZEDMat.Clone
      VB:
      - id: sl.ZEDMat.Clone*
        name: Clone
        nameWithType: ZEDMat.Clone
        qualifiedName: sl.ZEDMat.Clone
    isDefinition: true
    commentId: Overload:sl.ZEDMat.Clone
  sl.ZEDMat.GetValue*:
    name:
      CSharp:
      - id: sl.ZEDMat.GetValue*
        name: GetValue
        nameWithType: ZEDMat.GetValue
        qualifiedName: sl.ZEDMat.GetValue
      VB:
      - id: sl.ZEDMat.GetValue*
        name: GetValue
        nameWithType: ZEDMat.GetValue
        qualifiedName: sl.ZEDMat.GetValue
    isDefinition: true
    commentId: Overload:sl.ZEDMat.GetValue
  sl.ZEDMat.SetValue*:
    name:
      CSharp:
      - id: sl.ZEDMat.SetValue*
        name: SetValue
        nameWithType: ZEDMat.SetValue
        qualifiedName: sl.ZEDMat.SetValue
      VB:
      - id: sl.ZEDMat.SetValue*
        name: SetValue
        nameWithType: ZEDMat.SetValue
        qualifiedName: sl.ZEDMat.SetValue
    isDefinition: true
    commentId: Overload:sl.ZEDMat.SetValue
  sl.ZEDMat.SetTo*:
    name:
      CSharp:
      - id: sl.ZEDMat.SetTo*
        name: SetTo
        nameWithType: ZEDMat.SetTo
        qualifiedName: sl.ZEDMat.SetTo
      VB:
      - id: sl.ZEDMat.SetTo*
        name: SetTo
        nameWithType: ZEDMat.SetTo
        qualifiedName: sl.ZEDMat.SetTo
    isDefinition: true
    commentId: Overload:sl.ZEDMat.SetTo
